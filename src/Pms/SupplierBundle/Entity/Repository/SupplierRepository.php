<?php

namespace Pms\SupplierBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\SupplierBundle\Entity\Supplier;
use Pms\SupplierBundle\Entity\SupplierDocument;

/**
 * SupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupplierRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }


    public function create(Supplier $data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        foreach($data->getDocuments() as $document) {
            $this->_em->persist($document);
        }
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getAllSupplier($data){

        $query = $this->createQueryBuilder('s');
        $query->leftJoin('s.category','c');
        $query->leftJoin('s.subCategory','sc');
        $query->leftJoin('s.itemType','it');
        if(!empty($data['month'])){
            $currentMonthFirstDay = date($data['month']);
            $currentMonthLastDay = date('Y-m-t', strtotime($currentMonthFirstDay));
            $this->handleSearchBetweenDate($currentMonthFirstDay, $currentMonthLastDay, $query);
        }
        if(!empty($data['itemType'])) {
            $this->handleSearchByItemType($data['itemType'], $query);
        }
        $query->orderBy('s.createdDate', 'DESC');

        return $query->getQuery()->getResult();
    }
    /**
     * @param $itemType
     * @param $query
     */
    protected function handleSearchByItemType($itemType, $query)
    {
        if (!empty($itemType)) {
            $query->andWhere("it.id = :itemType");
            $query->setParameter('itemType', $itemType);
        }
    }

    /**
     * @param $dateStartTime
     * @param $dateEndTime
     * @param $query
     */
    protected function handleSearchBetweenDate($dateStartTime, $dateEndTime, $query)
    {
        if (!empty($dateStartTime) && !empty($dateEndTime)) {
            $query->andWhere('s.createdDate >= :start');
            $query->andWhere('s.createdDate <= :end');

            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');
        }
    }
}
