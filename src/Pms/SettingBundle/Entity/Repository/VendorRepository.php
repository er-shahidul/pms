<?php

namespace Pms\SettingBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\SettingBundle\Entity\Vendor;

/**
 * VendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VendorRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getVendorSearch($data, $type = 'active', $returnQuery = true)
    {
        $query = $this->createQueryBuilder('v');
        $query->leftJoin('v.itemTypes','it');
        $query->leftJoin('v.area','a');
        $query->leftJoin('v.vendorAttach','va');
        $query->orderBy('v.vendorName', 'asc');

        if (!empty($data['vendor'])) {
            $query->where('v.id = :vendor');
            $query->setParameter('vendor', $data['vendor']);
        }
        if (!empty($data['itemType'])) {
            $query->andWhere('it.id = :itemTypes');
            $query->setParameter('itemTypes', $data['itemType']);
        }
        if (!empty($data['area'])) {
            $query->andWhere('a.id = :area');
            $query->setParameter('area', $data['area']);
        }

        $this->handleActiveTypeFilter($type, $query);
        $this->handleDeleteTypeFilter($type, $query);

        if ($returnQuery) {
            return $query;
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleActiveTypeFilter($type, $query)
    {
        if ($type == 'active') {
            $query->andWhere('v.status = :status');
            $query->setParameter('status', 1);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleDeleteTypeFilter($type, $query)
    {
        if ($type == 'delete') {
            $query->andWhere('v.status = :status');
            $query->setParameter('status', 0);
        }
    }

    public function allVendor()
    {
        $query = $this->createQueryBuilder('v');
        $query->where('v.status = 1');
        $query->orderBy('v.vendorName', 'asc');

        return $query->getQuery()->getResult();
    }

    public function vendorAutoComplete($vendorName, $getUser=null)
    {
        $query = $this->createQueryBuilder('v');
        $query->select('v.id');
        $query->addSelect('v.vendorName as text');
        $query->where($query->expr()->like("v.vendorName", "'$vendorName%'"  ));
        $query->andWhere('v.status = 1');
        $query->orderBy('v.vendorName', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function getVendorDetail(Vendor $vendor)
    {
      /*  $query = $this->createQueryBuilder('v');
        $query->join('v.itemTypes','it');
        $query->join('v.area','a');
        $query->leftJoin('v.vendorAttach','va');
        $query->orderBy('v.vendorName', 'asc');
        $query->andWhere('v.id = :vendor');
        $query->setParameter('vendor', $vendor->getId());*/
       // return $query->getQuery()->getResult();
        return $this->find($vendor->getId());
    }
}
