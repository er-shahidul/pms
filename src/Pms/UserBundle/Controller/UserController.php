<?phpnamespace Pms\UserBundle\Controller;use PHPExcel;use PHPExcel_IOFactory;use PHPExcel_Style_Alignment;use PHPExcel_Style_Fill;use Pms\UserBundle\Form\SearchForm\UserSearchType;use Pms\UserBundle\Form\Type\UserFormPasswordEditSingleType;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\BinaryFileResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Pms\UserBundle\Entity\User;use Doctrine\ORM\Repository;class UserController extends Controller{    public function usernameCheckAction(Request $request)    {        $user = $this->get('fos_user.user_manager')->findUserByUsername(trim($request->request->get('userName')));        if ($user) {            $return = array("responseCode" => 200, "user_name" => "User name already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "user_name" => "User name available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function emailCheckAction(Request $request)    {        $email = $this->get('fos_user.user_manager')->findUserByEmail(trim($request->request->get('email')));        if ($email) {            $return = array("responseCode" => 200, "email_check" => "Email already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "email_check" => "Email address available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function userDeactiveAction(User $user)    {        $status = '0';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Deactivated'        );        return $this->redirect($this->generateUrl('pms_user_manager'));    }    public function userActiveAction(User $user)    {        $status = '1';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Activated'        );        return $this->redirect($this->generateUrl('pms_user_manager'));    }    public function passwordEditAction(Request $request, User $user)    {        $form = $this->createForm(new UserFormPasswordEditSingleType(), $user);        if ($request->getMethod() == 'POST') {            $form->handleRequest($request);            if ($form->isValid()) {                $user->setPassword($form->get('plainPassword')->getData());                $user->setPlainPassword($form->get('plainPassword')->getData());                $this->getDoctrine()->getRepository('UserBundle:User')->update($user);                $this->get('session')->getFlashBag()->add(                    'notice',                    'Password Successfully Change'                );                return $this->redirect($this->generateUrl('homepage'));            }        }        return $this->render('UserBundle:Users:passwordEditSingle.html.twig', array(            'form' => $form->createView(),            'id' => $user->getId(),            'user_id'   => $user->getId()        ));    }    public function searchAction(Request $request)    {        if(!empty($_POST['search']['user'])){            $userID = $_POST['search']['user'];            $dql = "SELECT a FROM UserBundle:User a ";            $dql = $this->searchByUserName($_POST['search']['user'], $dql);        }else{            $userID = 0;            $dql = "SELECT a FROM UserBundle:User a ORDER BY a.username ASC";        }        $formSearch = $this->createForm(new UserSearchType());        $user = $this->paginate($dql);        return $this->render('UserBundle:Users:index.html.twig', array(            'pagination' =>  $user,            'user' =>  $userID,            'formSearch' => $formSearch->createView(),        ));    }    public function excelUsersListAction(Request $request)    {        $em = $this->getDoctrine()->getManager();        $url = $request->getRequestUri();        $url = explode('?',$url);        if($url[1] != 0){            $user = $url[1];            $dql = $em->createQuery("SELECT a FROM UserBundle:User a WHERE a.id = '{$user}'");            $users = $dql->getResult();        }else{            $dql = $em->createQuery("SELECT a FROM UserBundle:User a ORDER BY a.username ASC");            $users = $dql->getResult();        }        // Export LRP wise data        $header_arrays = array(            'A9'=>'S/L',            'B9'=>'Username',            'C9'=>'Full Name',//            'D9'=>'Access Level',            'D9'=>'Email',            'E9'=>'Cell Phone',            'F9'=>'designation'        );        $objPHPExcel = $this->excelSheetSet($header_arrays);        $export_file_name = 'UserList'.'.xlsx';        $objPHPExcel->getActiveSheet()->setCellValue("C5", 'User List');        if(!empty($users)){            $index = 11;            $count = 1;            foreach($users as $user){                $userName = $user->getUsername() ? $user->getUsername() : "...";                $fullName = $user->getFullName() ? $user->getFullName() : "...";//                $accessLevel = $user->getGroups() ? $user->getUsername() : "...";                $email = $user->getEmail() ? $user->getEmail() : "...";                $cellPhone = $user->getProfile() ? $user->getProfile()->getCellphone() : "...";                $designation = $user->getProfile() ? $user->getProfile()->getDesignation() : "...";                $objPHPExcel->getActiveSheet()->setCellValue("A".$index, $count);                $objPHPExcel->getActiveSheet()->setCellValue("B".$index, $userName);                $objPHPExcel->getActiveSheet()->setCellValue("C".$index, $fullName);//                $objPHPExcel->getActiveSheet()->setCellValue("D".$index, $accessLevel);                $objPHPExcel->getActiveSheet()->setCellValue("D".$index, $email);                $objPHPExcel->getActiveSheet()->setCellValue("E".$index, $cellPhone);                $objPHPExcel->getActiveSheet()->setCellValue("F".$index, $designation);                $index++;                $count++;            }            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');        } else{            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');        }        $temp_file = tempnam(sys_get_temp_dir(), 'Export');        $objWriter->save($temp_file);        $response = new BinaryFileResponse($temp_file);        $response->setContentDisposition('attachment', $export_file_name);        return $response;    }    public function excelSheetSet($header_arrays)    {        $redArr = array(            'fill' => array(                'type' => PHPExcel_Style_Fill::FILL_SOLID,                'color' => array('rgb' => 'f5f5f5')            ),            'font'  => array(                'bold'  => true,                'color' => array('rgb' => '000000'),                'size'  => 11,                'name'  => 'Calibri'            ),            'alignment' => array(                'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,            )        );        $objPHPExcel = new PHPExcel();        //header set        foreach($header_arrays as $key => $header_array ){            $objPHPExcel->getActiveSheet()->setCellValue($key, $header_array);            $objPHPExcel->getActiveSheet()->getStyle($key)->applyFromArray($redArr);            $objPHPExcel->getActiveSheet()->getColumnDimension($key[0])->setWidth(22);            $objPHPExcel->getActiveSheet()->getRowDimension(1)->setRowHeight(15);        }        return $objPHPExcel;    }    public function searchByUserName($userName, $dql){        $dql .= "WHERE a.id = '{$userName}'";        return $dql;    }    public function paginate($dql)    {        $em = $this->get('doctrine.orm.entity_manager');        if (is_string($dql)) {            $query = $em->createQuery($dql);        } else {            $query = $dql;        }        $paginator = $this->get('knp_paginator');        $value = $paginator->paginate(            $query,            $page = $this->get('request')->query->get('page', 1) /*page number*/,            50/*limit per page*/        );        return $value;    }}