<?php

namespace Pms\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getAccessUserAll($groupBy)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'p');
        $query->join('u.projects', 'pro');
        $query->select('p.cellphone');
        $query->addSelect('u.username');
        $query->where("g.roles LIKE '%{$groupBy}%' AND g.id !=1");
        $query->groupBy('u.id');
        return $query->getQuery()->getResult();
    }
    public function getReceivingAccessUser($groupBy)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'p');
        $query->select('p.cellphone');
        $query->addSelect('u.username');
        $query->where("g.roles LIKE '%{$groupBy}%' AND g.id !=1 AND u.enabled != 0");
        $query->groupBy('u.id');
        return $query->getQuery()->getResult();
    }
    public function getPrVerifiedAccessUser()
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'p');
        $query->select('p.cellphone');
        $str = "ROLE_PURCHASE_REQUISITION_APPROVE_TWO";
        $query->where("g.roles LIKE '%{$str}%' AND g.id !=1 AND u.enabled != 0");
        $query->groupBy('u.id');
        return $query->getQuery()->getResult();
    }
    public function getPaymentVerifiedAccessUser()
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'p');
        $query->select('p.cellphone');
        $query->where("g.roles LIKE '%ROLE_PROCUREMENT_LOCAL%'
                       or g.roles LIKE '%ROLE_PROCUREMENT_HEAD%'
                       or g.roles LIKE '%ROLE_PROCUREMENT_ALL%'
        ");
        $query->andWhere('g.id !=1 AND u.enabled != 0');

        return $query->getQuery()->getResult();
    }

    public function getAccessUserAllEmail()
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.projects', 'p');
        $query->select('u.email');
        $query->addSelect('u.id');
        $query->addSelect('p.id as projectId');
        $query->where("
                        g.roles LIKE '%ROLE_PURCHASE_ORDER_APPROVE_ONE%'
                     or g.roles LIKE '%ROLE_PURCHASE_ORDER_APPROVE_TWO%'
                     or g.roles LIKE '%ROLE_PURCHASE_ORDER_APPROVE_THREE%'
                     or g.roles LIKE '%ROLE_PURCHASE_REQUISITION_CLAIM%'
                     or g.roles LIKE '%ROLE_PURCHASE_REQUISITION_APPROVE_ONE%'
                     or g.roles LIKE '%ROLE_PURCHASE_REQUISITION_APPROVE_TWO%'
                     or g.roles LIKE '%ROLE_PURCHASE_REQUISITION_APPROVE_THREE%'
                     or g.roles LIKE '%ROLE_RECEIVE_ADD%'
                 ");
//        $query->andWhere('g.id =1');
       // $query->groupBy('p.id', 'u.id');
        $query->groupBy('u.id');

        return $query->getQuery()->getResult();
    }
    public function getAccessUserForEmail($access)
    {

        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.projects', 'p');
        $query->select('u.email');
        $query->addSelect('u.id');
        $query->where("$access");
        $query->groupBy('u.id');

        return $query->getQuery()->getResult();
    }

    public function getAccessUserBudget($project)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'pro');
        $query->join('u.projects', 'p');
        $query->select('pro.cellphone');
        $query->addSelect('u.id as uid');
        $query->where("
        g.roles LIKE '%ROLE_BUDGET_APPROVE_ONE%'
        or g.roles LIKE '%ROLE_BUDGET_APPROVE_TWO%'
        or g.roles LIKE '%ROLE_BUDGET_APPROVE_THREE%'");
        $query->andWhere('g.id !=1');
        $query->andWhere('p.id = :project');
        $query->setParameter('project', $project);

        return $query->getQuery()->getResult();
    }
    public function getUserFromProject($project)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.groups','g');
        $query->join('u.profile', 'pro');
        $query->join('u.projects', 'p');
        $query->select('u.username');
        $query->addSelect('u.id ');
        $query->where("g.roles LIKE '%ROLE_RECEIVE_ADD%'");
        $query->andWhere('p.id = :project');
        $query->setParameter('project', $project);

        return $query->getQuery()->getResult();
    }

    public function getAccessUserBudgetIndexedByProject()
    {
        $query = $this->createQueryBuilder('u');

        $query
            ->join('u.groups','g')
            ->join('u.profile', 'pro')
            ->join('u.projects', 'p')
            ->select('pro.cellphone')
            ->addSelect('p.id as pid')
            ->addSelect('u.id as uid')
            ->where("
                g.roles LIKE '%ROLE_BUDGET_APPROVE_ONE%'
                or g.roles LIKE '%ROLE_BUDGET_APPROVE_TWO%'
                or g.roles LIKE '%ROLE_BUDGET_APPROVE_THREE%'")
            ->andWhere('g.id !=1');

        $result = $query->getQuery()->getResult();

        $data = array();

        foreach($result as $row) {
            $data[$row['pid']][$row['cellphone']] = $row;
        }
        return $data;
    }

}
