<?php

namespace Pms\DocumentBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\UserBundle\Entity\User;

/**
 * DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getInvoiceOrChallan($status){

        $query = $this->createQueryBuilder('d');

        $query->where('d.billAmount is not null');
        $query->andWhere('d.billNumber is not null');
        $query->andWhere('d.dateOfBill is not null');

        if ($status == 'invoice') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 1);
        }

        if ($status == 'challan') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 0);
        }
        return $query->getQuery()->getResult();
    }

    public function getDocument(User $user, $type = 'invoice', $returnQuery = true)
    {
        $query = $this->createQueryBuilder('d');
        $query->join('d.uploadedBy', 'u');
        $query->orderBy('d.uploadedDate', 'desc');

        if (!in_array("ROLE_SUPER_ADMIN", $user->getRoles())) {
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        if ($type == 'invoice') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 1);
        }

        if ($type == 'calan') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 0);
        }

        if ($returnQuery) {
            return $query;
        }

        return $query->getQuery()->getResult();
    }

    public function getDocumentSearch(User $user, $document, $uploadBy, $po ,$type = 'invoice', $returnQuery = true)
    {
        $query = $this->createQueryBuilder('d');
        $query->join('d.uploadedBy', 'u');
        $query->leftJoin('d.purchaseOrder', 'po');
        $query->leftJoin('d.receiveChallan', 'rc');
        $query->leftJoin('d.receiveInvoice', 'ri');
        $query->orderBy('d.id', 'desc');
//        $query->where('d.title is null');

        if ($document != 0 && $uploadBy != 0) {
            $query->andWhere('d.id IN(:id)');
            $query->andWhere('u.id IN(:uploadBy)');
            $query->setParameter('id', $document);
            $query->setParameter('uploadBy', $uploadBy);
        }elseif ($document != 0 && $uploadBy == 0) {
            $query->where('d.id IN(:id)');
            $query->setParameter('id', $document);
        }elseif ($document == 0 && $uploadBy != 0) {
            $query->where('u.id IN(:uploadBy)');
            $query->setParameter('uploadBy', $uploadBy);
        }
          if ($po != 0) {
                $query->andWhere('po.id = :purchaseOrder');
                $query->setParameter('purchaseOrder', $po);
          }

        $this->handleUserRoleWiseTypeFilter($user, $query);

        $this->handleInvoiceTypeFilter($type, $query);

        $this->handleCalanTypeFilter($type, $query);

        if ($returnQuery) {
            return $query;
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleInvoiceTypeFilter($type, $query)
    {
        if ($type == 'invoice') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 1);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCalanTypeFilter($type, $query)
    {
        if ($type == 'calan') {
            $query->andWhere('d.invoiceOrCalan = :status');
            $query->setParameter('status', 0);
        }
    }

    /**
     * @param User $user
     * @param $query
     */
    private function handleUserRoleWiseTypeFilter(User $user, $query)
    {
        if (!$user->hasRole("ROLE_SUPER_ADMIN")) {
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
    }

    public function documentTitleAutoNumber($title,$user){

        $query = $this->createQueryBuilder('d');
        $query->select('d.id as id');
        $query->addSelect('d.title as text');
        $query->where($query->expr()->like("d.title", "'$title%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_ONE")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_TWO")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_THREE")){
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
        $query->orderBy('d.title', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function invoiceBillAutoCompleteForReceive($billNumber,$user)
    {

        $query = $this->createQueryBuilder('d');
        $query->leftJoin('d.uploadedBy', 'up');
        $query->leftJoin('d.purchaseOrder', 'pr');
        $query->where('d.invoiceOrCalan = 1')
                ->andWhere('d.billAmount is not null')
                ->andWhere('d.billNumber is not null')
                ->andWhere('d.dateOfBill is not null');
        $query->select('d.id');
        $query->addSelect('d.billNumber as billNumber');
        $query->addSelect('d.billAmount as amount');
        $query->addSelect('up.username as username');
        $query->addSelect('pr.id as prId');

        $query->andWhere($query->expr()->like("pr.id", "'$billNumber%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('up IN(:user)');
            $query->setParameter('user', $user);
        }
        $query->setMaxResults( '30' );
        $results =  $query->getQuery()->getResult();
        return $results;
    }
    public function invoiceBillAutoCompleteForReceiveModal($billNumber,$user)
    {

        $query = $this->createQueryBuilder('d');
        $query->leftJoin('d.uploadedBy', 'up');
        $query->leftJoin('d.purchaseOrder','pr');
        $query->where('d.invoiceOrCalan = 1')
                ->andWhere('d.billAmount is not null')
                ->andWhere('d.billNumber is not null')
                ->andWhere('d.dateOfBill is not null');
        $query->select('d.id');
        $query->addSelect('d.billNumber as billNumber');
        $query->addSelect('d.billAmount as amount');
        $query->addSelect('up.username as username');
        $query->addSelect('pr.id as prId');

       // $query->where($query->expr()->like("d.billNumber", "'$billNumber%'"  ));
        $query->andWhere($query->expr()->like("pr.id", "'$billNumber%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('up IN(:user)');
            $query->setParameter('user', $user);
        }
        $query->setMaxResults( '30' );
        $results =  $query->getQuery()->getResult();
        return $results;
    }
    public function calanAutoCompleteForReceive($billNumber,$user)
    {

        $query = $this->createQueryBuilder('d');
        $query->leftJoin('d.uploadedBy', 'up');
        $query->leftJoin('d.purchaseOrder', 'pr');
        $query->where('d.invoiceOrCalan = 0')
                ->andWhere('d.billAmount is not null')
                ->andWhere('d.billNumber is not null')
                ->andWhere('d.dateOfBill is not null');
        $query->select('d.id');
        $query->addSelect('d.billNumber as billNumber');
        $query->addSelect('d.billAmount as amount');
        $query->addSelect('up.username as username');
        $query->addSelect('pr.id as prId');
        $query->andWhere($query->expr()->like("pr.id", "'$billNumber%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('up IN(:user)');
            $query->setParameter('user', $user);
        }
        $query->setMaxResults( '30' );
        $results =  $query->getQuery()->getResult();
        return $results;
    }
    public function calanAutoCompleteForReceiveModal($billNumber,$user)
    {

        $query = $this->createQueryBuilder('d');
        $query->leftJoin('d.uploadedBy', 'up');
        $query->leftJoin('d.purchaseOrder','pr');
        $query->where('d.invoiceOrCalan = 0')
                ->andWhere('d.billAmount is not null')
                ->andWhere('d.billNumber is not null')
                ->andWhere('d.dateOfBill is not null');
        $query->select('d.id');
        $query->addSelect('d.billNumber as billNumber');
        $query->addSelect('d.billAmount as amount');
        $query->addSelect('up.username as username');
        $query->addSelect('pr.id as prId');
        $query->andWhere($query->expr()->like("pr.id", "'$billNumber%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('up IN(:user)');
            $query->setParameter('user', $user);
        }
        $query->setMaxResults( '30' );
        $results =  $query->getQuery()->getResult();
        return $results;
    }
}