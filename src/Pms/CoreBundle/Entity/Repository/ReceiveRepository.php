<?php

namespace Pms\CoreBundle\Entity\Repository;

use Doctrine\Common\Util\Debug;
use Doctrine\ORM\EntityRepository;
use Pms\CoreBundle\Entity\Receive;
use Pms\UserBundle\Entity\User;

/**
 * ReceiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReceiveRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function getReceive(User $user, $data, $type, $returnQuery = true)
    {
        $query = $this->createQueryBuilder('r');
        $query->LeftJoin('r.receiveItems', 'ri');
        /*$query->join('r.calan','c');
        $query->join('r.invoice','i');*/
        $query->LeftJoin('ri.purchaseOrderItem', 'poi');
        $query->LeftJoin('poi.purchaseOrder', 'po');
        $query->LeftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->LeftJoin('pri.purchaseRequisition', 'pr');
        $query->LeftJoin('pr.project', 'p');
        $query->LeftJoin('p.users', 'u');
        $query->orderBy('r.receivedDate', 'desc');


        if (!empty($data['grn'])) {
            $query->andWhere('r.id IN(:rNo)');
            $query->setParameter('rNo', $data['grn']);
        }

        if (!empty($data['po'])) {
            $query->andWhere('po.id IN(:poNo)');
            $query->setParameter('poNo', $data['po']);
        }

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $this->handleSearchByUser($user, $query);
            $this->handleReadyForPaymentTypeFilter($type, $query);
        }else {
            $this->handleReadyForPaymentTypeFilterAdmin($type, $query);
        }

        $this->handleReceivedItemTypeFilter($type, $query);

        if ($returnQuery) {
            return $query;
        }
        return $query;
       // return $query->getQuery()->getResult();
    }

    public function getRegularPaymentInfo($data)
    {
        if(!empty($data)){

            $query = $this->createQueryBuilder('r');
            $query->join('r.receiveItems', 'ri');
            $query->join('r.readyForPayment', 'rdf');
            $query->join('ri.purchaseOrderItem', 'poi');
            $query->join('poi.purchaseRequisitionItem', 'pri');
            $query->join('pri.purchaseRequisition', 'pr');
            $query->join('pr.project', 'p');
            $query->join('p.users', 'u');
            $query->orderBy('r.receivedDate', 'desc');

            if(empty($data['start_date']) or empty($data['end_date'])){
                return false;
            }
            $start      = $data['start_date'].' 00:00:01';
            $curDate    = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate;
            $end_date   = $data['end_date'].' 23:59:59';

            $query ->Where('rdf.requestDate >= :dateAfter');
            $query->setParameter('dateAfter', $start_date);

            if($data['end_date']) {
                $query->andWhere('rdf.requestDate <= :dateBefore');
                $query->setParameter('dateBefore', $end_date);
            }
            $this->handleSearchByProject($data['project'], $query);

            return $query->getQuery()->getResult();
        } else{
            return false;
        }
    }

    /**
     * @param $type
     * @param $query
     */
    private function handleReadyForPaymentTypeFilter($type, $query)
    {
        if ($type == 'payment') {
            $query->andWhere('r.sendBackStatus is null');
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 3);

        } elseif($type == 'archive') {
            $query->andWhere('r.sendBackStatus is null');
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 5);
        } elseif($type == 'send-back') {
            $query->andWhere('r.sendBackStatus is not null');
            $query->andWhere('r.sendBackStatus = :sendBackStatus');
            $query->setParameter('sendBackStatus', 3);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    private function handleReadyForPaymentTypeFilterAdmin($type, $query)
    {
        if ($type == 'payment') {
            $query->andWhere('r.sendBackStatus is null');
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 3);

        } elseif($type == 'archive') {
            $query->andWhere('r.sendBackStatus is null');
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 5);
        } elseif($type == 'send-back') {
            $query->andWhere('r.sendBackStatus is not null');
            $query->andWhere('r.sendBackStatus = :sendBackStatus');
            $query->setParameter('sendBackStatus', 3);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    private function handleReceivedItemTypeFilter($type, $query)
    {
        if ($type == 'received') {
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 1);
            $query->andWhere('r.approveStatus != 1 or r.approveStatus is null or (r.invoice is null or r.calan is null)');
        }

        if ($type == 'verified') {
            $query->andWhere('r.billNumber is not null');
            $query->andWhere('r.approveStatus = :approveStatus');
            $query->setParameter('approveStatus', 1);
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 3);
            $query->andWhere('r.invoice is null or r.calan is null');
        }

        if ($type == 'completed') {
            $query->andWhere('r.approveStatus = :approveStatus');
            $query->setParameter('approveStatus', 1);
            $query->andWhere('r.status = :status');
            $query->setParameter('status', 3);
            $query->andWhere('r.invoice is not null and r.calan is not null');
        }
    }

    public function userReceiveListReport($data)
    {
        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems', 'ri');
        $query->join('ri.project', 'p');
        $query->join('r.receivedBy', 'u');
        $query->select('u.username');
        $query->addSelect('p.id');
        $query->addSelect('p.projectName');
        $query->addSelect('COUNT(r.id) as totalR');
        $query->distinct(true);
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $query->groupBy('p.id', 'u.id');
        $query->orderBy('p.projectName');

        return $query->getQuery()->getResult();

    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {
            $query->andWhere('r.receivedDate >= :start_date');
            $query->andWhere('r.receivedDate <= :end_date');
            $query->setParameter('start_date', $monthStart.' 00:00:00');
            $query->setParameter('end_date', $monthEnd.' 23:59:59');
        }
    }

    public function getGrnCount($id, $data)
    {
        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems', 'ri');
        $query->join('ri.project', 'p');
        $query->select('COUNT(r.id) as totalR');
        $query->where('p.id = :pId');
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $query->setParameter('pId', $id);

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere('pr.project = :project');
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $user
     * @param $query
     */
    protected function handleSearchByUser($user, $query)
    {
        if (!empty($user)) {
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
    }

    public function grnNoAutoComplete($grnNo, User $user)
    {
        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems', 'ri');
        $query->join('ri.purchaseOrderItem', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->select('r.id');
        $query->where($query->expr()->like("r.id", "'$grnNo%'"  ));

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        $query->groupBy('r.id');
        $query->orderBy('r.id', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function getStockReport($data)
    {
        if(!empty($data)){
            $array = array();
            $totalQuantities = $this->getTotalQuantities($data);
          //  var_dump($totalQuantities);die;

        } else{
            return false;
        }
    }

    public function  getTotalQuantities($data) {

        if(empty($data['start_date']) && empty($data['project'])){
            return false;
        }

        $qb = $this->createQueryBuilder('r');
        $qb ->join('r.receiveItems','ri')
            ->leftJoin('ri.project','p')
            ->join('ri.item','i')
            ->select('ri.quantity')
            ->addSelect('p.id as projectId')
            ->addSelect('i.id as ItemId')
            ->addSelect('i.itemName')
            ->addSelect('r.receivedDate as receivedDate');
//            ->groupBy('i.id');

        $date = $data['start_date'];
        $qb->where($qb->expr()->like("r.receivedDate", "'%$date%'"  ));
        $qb->andWhere('p.id = :project');
        $qb->setParameter('project', $data['project']);
        $result = $qb->getQuery()->getResult();

        $data = array();
        foreach($result as $receive) {
            $data[$receive['ItemId']] = $receive;
        }
        return $data;

    }

    public function getMonthlyReceivedAmount($data)
    {
//        var_dump($data);die;
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $paymentCompany[] = $this->getReceivedAmount($data['companyType'],$dateStart, $dateEnd);
            }

            return $paymentCompany;
        }
    }

    public function getReceivedAmount($companyType,$dateStart, $dateEnd)
    {
        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems','ri');
        $query->join('ri.purchaseOrderItem','poi');
        $query->join('poi.purchaseOrder','po');
        $query->join('poi.project','p');
        $query->select('SUM(ri.quantity * poi.price)');
        $query->where('po.approveStatus = 3');
//        $query->groupBy('po.id');
        $this->handleSearchByCompanyType($companyType, $query);
        $this->handleSearchBetweenDate($query,$dateStart, $dateEnd);

        return $query->getQuery()->getSingleScalarResult();
    }
    /**
     * @param $companyType
     * @param $query
     */
    protected function handleSearchByCompanyType($companyType, $query)
    {
        if (!empty($companyType)) {
            $query->andWhere('p.projectCategory = :companyType');
            $query->setParameter('companyType', $companyType);
        }
    }
    public function getTotalReceivingQty($data)
    {

        if(empty($data['start_date'])){
            $date = date('Y-m-d 23:59:59');
        }else{
            $date = $data['start_date'].' '.'23:59:59';
        }

        $qb = $this->createQueryBuilder('r');
        $qb ->leftJoin('r.receiveItems','ri')
            ->leftJoin('ri.project','p')
            ->leftJoin('ri.purchaseOrderItem','poi')
            ->leftJoin('ri.item','i')
            ->select('SUM(ri.quantity) as quantity')
            ->addSelect('i.id as itemId')
            ->addSelect('r.receivedDate')
            ->addSelect('SUM(poi.price) as price')
            ->addSelect('SUM(poi.price * ri.quantity) as totalQty');
        $qb->where('r.receivedDate <= :start_date');
        $qb->setParameter('start_date',$date);
        $this->filteringByProject($data, $qb);
        $this->filteringByItem($data,$qb);
        $qb->groupBy('ri.item');
        $qb->orderBy('i.itemName','ASC');
        $results = $qb->getQuery()->getResult();

        $data = array();

        foreach($results as $result ){

            $result['receivingTotal'] = $result['totalQty'];
            $data[$result['itemId']] = $result;
        }

        return $data;
    }
    public function filteringByItem($data,$qb){
        if(!empty($data['item'])){
            $qb->andWhere('i.id = :item');
            $qb->setParameter('item', $data['item']);
        }
    }

    /**
     * @param $data
     * @param $qb
     */
    private function filteringByProject($data, $qb)
    {
        if(!empty($data['project'])) {
            $qb->andWhere('p.id = :project');
            $qb->setParameter('project', $data['project']);
        }
    }

    public function getQuantityByItemAndProject($item, $project_id)
    {
        $qb = $this->createQueryBuilder('r');
        $qb ->leftJoin('r.receiveItems','ri')
            ->leftJoin('ri.project','p')
            ->leftJoin('ri.purchaseOrderItem','poi')
            ->leftJoin('ri.item','i')
            ->select('SUM(ri.quantity)');
        $qb->where('p.id = :project');
        $qb->setParameter('project', $project_id);
        $qb->andWhere('i.id = :item');
        $qb->setParameter('item', $item);
        $qb->groupBy('ri.project');
        $results = $qb->getQuery()->getSingleScalarResult();
        return $results;
    }
    public function getTotalPOAmount(Receive $receive)
    {
//        var_dump($receive->getPoOrder());die;
        $qb = $this->createQueryBuilder('r');
        $qb ->leftJoin('r.receiveItems','ri')
            ->leftJoin('ri.project','p')
            ->leftJoin('ri.purchaseOrderItem','poi')
            ->leftJoin('poi.purchaseOrder','po')
            ->leftJoin('ri.item','i')
            ->select('SUM(poi.amount)');
        $qb->andWhere('po.id = :po');
        $qb->setParameter('po', $receive->getPoOrder());
        $qb->groupBy('po.id');
        $results = $qb->getQuery()->getSingleScalarResult();
        return $results;
    }

    public function getReceiveInFo($data)
    {

        $qb = $this->createQueryBuilder('r');
        $qb ->leftJoin('r.receiveItems','ri')
            ->leftJoin('ri.project','p')
            ->leftJoin('r.vendor','v')
            ->leftJoin('ri.purchaseOrderItem','poi')
            ->leftJoin('poi.purchaseOrder','po')
            ->leftJoin('ri.item','i')
            ->select('SUM(poi.amount) as GrnTotal');
        $this->filteringByProject($data,$qb);
        $this->handleSearchByVendor($data,$qb);
        $results = $qb->getQuery()->getSingleResult();
        return $results;
    }

    private function handleSearchByVendor($data, $query)
    {
        if (!empty($data['vendor'])) {
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $data['vendor']);
            $query->groupBy('v.id');
        }
    }

    public function sendBackReceiveItem($receive,$user)
    {

        foreach ($receive['grnId'] as $row){
            $receiveInfo  = $this->find($row);
            $receiveInfo->setSendBackBy($user);
            $receiveInfo->setSendBackStatus(3); //sendback status = 3 for receive
            $receiveInfo->setSendBackComments($receive['sendBackComments']);
        }
        $this->_em->flush();
    }

    public function sendBackUpdateReceiveItem($request)
    {
        $grnNumbers = json_decode($request->request->get('grnNumbers'), true);
        foreach ($grnNumbers as $row){
            $receiveInfo  = $this->find($row);
            if(!empty($receiveInfo->getSendBackStatus())){

                $receiveInfo->setSendBackStatus(NULL); //sendback status = 3 for receive
            }

        }
        $this->_em->flush();

    }

    public function getPaymentCompanyMonthlyDetailReceive($start_date, $end_Date,$companyType)
    {

        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems','ri');
        $query->join('ri.purchaseOrderItem','poi');
        $query->join('poi.purchaseOrder','po');
        $query->join('poi.project','p');
        $query->select('po.id as poId');
        $query->addSelect('po.createdDate as poDate');
        $query->addSelect('SUM(ri.quantity * poi.price) as GrnAmount');
        $query->addSelect('p.projectName');
        $this->handleSearchBetweenDate($query,$start_date, $end_Date);
        $this->handleSearchByCompanyType($companyType,$query);
        $query->groupBy('p.id','po.id');
        $query->orderBy('p.projectName','ASC');

        $paymentCompany[] = $query->getQuery()->getResult();
        return $paymentCompany;
    }

    public function supplierPaymentReport($data)
    {
        if(!empty($data)){

            $query = $this->createQueryBuilder('r');

            $query->leftJoin('r.readyForPayments', 'rfp');
            $query->leftJoin('rfp.purchaseOrder', 'po');
            $query->leftJoin('rfp.payment', 'pay');
            $query->leftJoin('pay.vendor', 'v');
            $query->leftJoin('pay.relatedBank', 'rb');
            $query->leftJoin('pay.paymentBy', 'pu');
            $query->leftJoin('pay.paymentVerifiedBy', 'vu');
            $query->select('v.vendorName');
            $query->addSelect('po.id as poId');
            $query->addSelect('r.id as grnId');
            $query->addSelect('po.createdDate as poDate');
            $query->addSelect('po.netTotal as poAmount');
            $query->addSelect('po.advancePaymentAmount as advanceAmount');
            $query->addSelect('pay.paymentAmount as paymentAmount');
            $query->addSelect('rb.name as bankName');
            $query->addSelect('pay.cheque as cheque');
            $query->where('pay.status = 2');
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $data['vendor']);
            $query->orderBy('pay.paymentDate', 'desc');
            $query->groupBy('r.id');
            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

    public function getGrnByVendor($vendor)
    {
        $query = $this->createQueryBuilder('r');
        $query->join('r.receiveItems','ri');
        $query->join('ri.purchaseOrderItem','poi');
        $query->join('r.vendor','v');
        $query->join('poi.purchaseOrder','po');
        $query->join('poi.project','p');
        $query->select('po.id as poId');
        $query->addSelect('SUM(ri.quantity * poi.price) as GrnAmount');
        $query->andWhere('v.id = :vendor');
        $query->setParameter('vendor', $vendor);
        $query->groupBy('po.id');
        $query->orderBy('p.projectName','ASC');

        $results = $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['poId']] = $row;
        }
        return $data;
    }

    public function getGrnInfo($data)
    {
        if(!empty($data['vendor'])) {
            $query = $this->createQueryBuilder('r');
            $query->join('r.receiveItems', 'ri');
            $query->join('ri.purchaseOrderItem', 'poi');
            $query->join('r.vendor', 'v');
            $query->join('poi.purchaseOrder', 'po');
            $query->join('poi.project', 'p');
            $query->select('SUM(ri.quantity * poi.price) as GrnAmount');
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $data['vendor']);
            $query->groupBy('v.id');
            $query->orderBy('p.projectName', 'ASC');
            return $query->getQuery()->getResult();
        }else{
            return false;
        }
    }
    public function getGrnQty($data)
    {

            $query = $this->createQueryBuilder('r');
            $query->join('r.receiveItems', 'ri');
            $query->join('ri.purchaseOrderItem', 'poi');
            $query->join('poi.item', 'i');
            $query->join('i.category', 'c');
            $query->join('poi.project', 'p');
            $query->select('SUM(ri.quantity) as GrnQty');
            $query->addSelect('i.id as itemId');
            $query->groupBy('i.id');
            $this->handleSearchByProjectGrn($data['project'],$query);
            $this->handleSearchByCategory($data['category'],$query);
            $this->handleSearchBetweenDate($query,$data['start_date'],$data['end_date']);
            $results =  $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['itemId']] = $row;
        }
        return $data;

    }
    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProjectGrn($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere('p.id = :project');
            $query->setParameter('project', $project);
        }
    }
    private function handleSearchByCategory($category, $query)
    {

        if (!empty($category)) {
            $query->andWhere('c.id = :category');
            $query->setParameter('category', $category);
        }
    }

}
