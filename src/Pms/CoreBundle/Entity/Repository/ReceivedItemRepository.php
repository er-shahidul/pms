<?php

namespace Pms\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ReceivedItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReceivedItemRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function findPriInfo($getId)
    {
        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive', 'r');
        $query->join('ri.purchaseOrderItem','poi');
        $query->join('r.receivedBy','u');
        $query->join('poi.purchaseOrder','po');
        $query->join('poi.purchaseRequisitionItem','pri');
        $query->join('pri.purchaseRequisition','pr');
        $query->join('pri.item','i');
        $query->join('pr.project','p');
        $query->select('p.projectName');
        $query->addSelect('i.itemName');
        $query->addSelect('po.id');
        $query->addSelect('poi.quantity');
        $query->addSelect('r.id as receiveId');
        $query->addSelect('poi.totalOrderReceiveQuantity');
        $query->addSelect('u.username');
        $query->addSelect('r.receivedDate');
        $query->where('po.id = :id');
        $query->setParameter('id', $getId);

        return $query->getQuery()->getResult();
    }

    public function getItemLastReceiveDateQuantityItems($project, $item)
    {
        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive', 'r');
        $query->join('ri.purchaseOrderItem', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->select('r.receivedDate');
        $query->addSelect('ri.quantity');
        $query->addSelect('i.itemName');
//        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);
        $query->orderBy('ri.id', 'DESC');
//        $query->setMaxResults(1);

        return $query->getQuery()->getResult();
    }

    public function receiveItemReport($data)
    {
        if(!empty($data)) {

            $query = $this->createQueryBuilder('ri');
            $query->select('i.itemName as itemName');
            $query->addSelect('po.id as poId');
            $query->addSelect('po.createdDate as poCreatedDate');
            $query->addSelect('poi.quantity as poiQuantity');

            $query->addSelect('ri.quantity as riQuantity');
            $query->addSelect('p.projectName as projectName');
            $query->addSelect('v.vendorName as vendorName');
            $query->addSelect('r.id as GrnNo');
            $query->addSelect('u.fullName as GrnBy');
            $query->addSelect('ri.comment as Remarks');
            $query->addSelect('r.receivedDate as receivedDate');

            $query->addSelect('poiCloseInfo.quantity as closeQty');
            $query->addSelect('poi.remark as closeRemark');
            $query->addSelect('cb.fullName as closedBy');



            $query->leftJoin('ri.purchaseOrderItem', 'poi');
            $query->leftJoin('ri.receive', 'r');
            $query->leftJoin('r.receivedBy', 'u');

            $query->leftJoin('poi.purchaseOrder', 'po');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('pri.item', 'i');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('pr.project', 'p');

            $query->leftJoin('poi.purchaseOrderItemClose','poiCloseInfo');
            $query->leftJoin('poiCloseInfo.closedBy', 'cb');

            /*if(empty($data['start_date']) or empty($data['end_date'])){
                return false;
            }

            $start      = $data['start_date'].' 00:00:01';
            $curDate    = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate;
            $end_date   = $data['end_date'].' 23:59:59';

            $query->where('r.receivedDate >= :dateAfter');
            $query->setParameter('dateAfter', $start_date);

            if($data['end_date']) {
                $query->andWhere('r.receivedDate <= :dateBefore');
                $query->setParameter('dateBefore', $end_date);
            }*/
            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }
            $this->handleSearchByProject($data['project'], $query);

            return $query->getQuery()->getResult();
        } else {

            return false;
        }
    }

    public function totalDeliveredItem($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive', 'r');
        $query->select('count(ri.id) as TotalDeliverItem');
        $this->handleSearchBetweenDate($query, $dateStartTime, $dateEndTime);

        return $query->getQuery()->getResult();
    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {
            $query->andWhere('r.receivedDate >= :start_date');
            $query->andWhere('r.receivedDate <= :end_date');
            $query->setParameter('start_date', $monthStart.' 00:00:01');
            $query->setParameter('end_date', $monthEnd.' 23:59:59');
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere("p.id = :project");
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $item
     * @param $query
     */
    protected function handleSearchByItem($item, $query)
    {
        if (!empty($item)) {
            $query->andWhere("i.id = :item");
            $query->setParameter('item', $item);
        }
    }
    /**
     * @param $storeOfficer
     * @param $query
     */
    protected function handleSearchByStoreOfficer($storeOfficer, $query)
    {
        if (!empty($storeOfficer)) {
            $query->andWhere("r.receivedBy = :storeOfficer");
            $query->setParameter('storeOfficer', $storeOfficer);
        }
    }

    public function findInfoForPoHistory($id)
    {
        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive','r');
        $query->join('r.receivedBy','u');
        $query->join('ri.purchaseOrderItem','poi');
        $query->join('poi.purchaseOrder','po');
        $query->join('poi.project','p');
        $query->join('poi.item','i');

        $query->select('p.projectName');
        $query->addSelect('i.itemName');
        $query->addSelect('po.id');
        $query->addSelect('poi.quantity as poiQty');
        $query->addSelect('r.id as receiveId');
        $query->addSelect('u.username');
        $query->addSelect('r.receivedDate');
        $query->addSelect('ri.quantity as riQty');
        $query->where("po.id = :id");
        $query->setParameter('id', $id);

        return $query->getQuery()->getResult();
    }

    public function totalDailyReceiveItem($project, $item)
    {
        $date = date('Y-m-d');
        $qb = $this->createQueryBuilder('ri');
        $qb->join('ri.item', 'i');
        $qb->join('ri.receive','r');
        $qb->select('SUM(ri.quantity)');
        $qb->where("ri.project= :project");
        $qb->andWhere("ri.item = :item");
        $qb->andWhere($qb->expr()->like("r.receivedDate", "'%$date%'"  ));
        $qb->setParameter('project', $project);
        $qb->setParameter('item', $item);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function receiveReport($data)
    {
        if(!empty($data)){

            $query = $this->createQueryBuilder('ri');
            $query->leftJoin('ri.purchaseOrderItem', 'poi');
            $query->leftJoin('ri.receive', 'r');
            $query->leftJoin('r.receivedBy', 'u');
            $query->leftJoin('poi.purchaseOrder', 'po');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('pri.item', 'i');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('pr.project', 'p');
            $query->select('i.itemName')
                  ->addSelect('i.itemUnit')
                  ->addSelect('p.projectName')
                  ->addSelect('poi.brand')
                  ->addSelect('ri.quantity')
                  ->addSelect('r.receivedDate')
                  ->addSelect('r.id as receiveId')
                  ->addSelect('u.username as receiveBy')
                  ->addSelect('poi.price')
                  ->addSelect('v.vendorName')
//                  ->addSelect('r.buyer')
                  ->addSelect('poi.quantity as poQty')
                  ->addSelect('po.id as poId');

            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByStoreOfficer($data['storeOfficer'], $query);
         //   $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);

            /*if(empty($data['project']) && empty($data['item']) && empty($data['start_date']) && empty($data['end_date'])){
                $query->andWhere('r.status = 9');
            }*/
            $query->orderBy('r.receivedDate', 'DESC');

            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

    public function trendUsageReport($data)
    {
        if (!empty($data['year']) && !empty($data['item']) && !empty($data['project'])) {

            for ($i = 1; $i < 13; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $trendUsageRMonthReport[] = $this->trendUsageRMonthReport($data['item'], $data['project'], $dateStart, $dateEnd);
            }

            return $trendUsageRMonthReport;
        }
    }

    private function trendUsageRMonthReport($item, $project, $dateStart, $dateEnd)
    {
        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive', 'r');
        $query->join('ri.item', 'i');
        $query->join('ri.project', 'p');
        $query->select('SUM(ri.quantity) as itemUsageQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('p.projectName');
        $query->andWhere('r.status = 1');

        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);

        return $query->getQuery()->getSingleResult();
    }

    public function getTotalReceiveItem($data){

        $query = $this->createQueryBuilder('ri');

        $query->leftJoin('ri.purchaseOrderItem','poi');
        $query->leftJoin('poi.purchaseOrder','po');
        $query->leftJoin('po.vendor','v');
        $query->leftJoin('ri.receive','r');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');

        $query->select('SUM(ri.quantity)');

        $query->where('po.approveStatus = 3');

        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('po.id = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }
        $query->leftJoin('pri.item', 'i');

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getReceiveItemList()
    {

        $query = $this->createQueryBuilder('ri');
        $query->join('ri.receive', 'r');
        $query->join('ri.item', 'i');
        $query->join('ri.project', 'p');

        return $result = $query->getQuery()->getResult();
    }
}
