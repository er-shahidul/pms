<?php

namespace Pms\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\CoreBundle\Entity\Payment;
use Pms\UserBundle\Entity\User;
use Pms\CoreBundle\DQL\GroupConcat;

/**
 * ReadyForPaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function insert($paymentData, $purchaseOrder, $user)
    {
       // var_dump($paymentData);die;
        $payment = new Payment();
        $payment->setPurchaseOrder($purchaseOrder);

        if($purchaseOrder->getVendor()){
            $payment->setVendor($purchaseOrder->getVendor());
        }

        if(isset($paymentData['adjustmentAmount'])){
            $payment->setAdjustmentAmount($paymentData['adjustmentAmount']);
            $adjustmentPaymentAmount = ( $paymentData['paymentAmount'] - $paymentData['adjustmentAmount'] );
            $payment->setPaymentAmount($adjustmentPaymentAmount);
        } else {
//            $payment->setRequestAmount($paymentData['paymentRequest']);
            $payment->setPaymentAmount($paymentData['paymentAmount']);
        }

        $payment->setRequestDate(new \DateTime());
        $payment->setPaymentVerifiedBy($user);
        $payment->setStatus(1);

        $this->_em->persist($payment);
        $this->_em->flush();

        return $payment;
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function getAdvancePayment($purchaseOrder)
    {
        return $this->findOneBy(array('purchaseOrder'=>$purchaseOrder,'grn'=>NULL));
    }

    public function getAdvancePaid($payment)
    {
        return $this->findOneBy(array('purchaseOrder'=>$payment,'grn'=>NULL));
    }

    public function getAdvanceArchivePaid()
    {
        return $this->findBy(array('grn'=>NULL),array('billDate'=>'DESC'));
    }

    public function vendorPaymentOneReport($data)
    {
        if(!empty($data)) {

            $query= $this->createQueryBuilder('r');
            $query->select('v.vendorName as vendorName');
            $query->addSelect('COUNT(po.id) as NoOfOrder');
            $query->addSelect('r.poPaymentAmount as paidAmount');
            $query->addSelect('r.poAmount as totalPoAmount');
            $query->addSelect('(r.poAmount - r.poPaymentAmount) as duesAmount');
            $query->leftJoin('r.purchaseOrder', 'po');
            $query->leftJoin('r.vendor', 'v');
            $query->where('r.grn IS NOT NULL');

            if(empty($data['start_date']) or empty($data['end_date'])){
                return false;
            }
            $start      = $data['start_date'].' 00:00:01';
            $curDate    = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate;
            $end_date   = $data['end_date'].' 23:59:59';

            $query->andWhere('r.requestDate >= :dateAfter');
            $query->setParameter('dateAfter', $start_date);

            if($data['end_date']) {
                $query->andWhere('r.requestDate <= :dateBefore');
                $query->setParameter('dateBefore', $end_date);
            }if($data['vendor']){
                $query->andWhere('r.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }

            $query->groupBy('v.id');
            $query->orderBy('v.vendorName', 'ASC');

            return $query->getQuery()->getResult();

        } else {
            return false;
        }
    }

    public function vendorPaymentTwoReport($data)
    {
        if(!empty($data)) {

            $query = $this->createQueryBuilder('r');
            $query->select('v.vendorName as vendorName');
            $query->addSelect('po.id as poNo');
            $query->addSelect('p.projectName as projectName');
            $query->addSelect('po.paymentType as paymentType');
            $query->addSelect('po.paymentFrom as paymentFrom');
            $query->addSelect('po.paymentMethod as paymentMode');
            $query->addSelect('ptype.name as purchaseType');
            $query->addSelect('rb.name as bankName');
            $query->addSelect('r.cheque as chequeNo');
            $query->addSelect('r.billNumber as billNumber');
            $query->addSelect('r.requestDate as requestDate');
            $query->addSelect('r.billDate as billDate');
            $query->addSelect('r.poPaymentAmount as paidAmount');
            $query->addSelect('r.poAmount as totalPoAmount');
            $query->addSelect('(r.poAmount - r.poPaymentAmount) as duesAmount');
            $query->leftJoin('r.purchaseOrder', 'po');
            $query->leftJoin('po.purchaseOrderItems', 'poi');
            $query->leftJoin('po.poNonpo', 'ptype');
            $query->leftJoin('r.relatedBank', 'rb');
            $query->leftJoin('poi.project', 'p');
            $query->leftJoin('r.vendor', 'v');
            $query->where('r.grn IS NOT NULL');

            if(empty($data['start_date']) or empty($data['end_date'])){
                return false;
            }
            $start      = $data['start_date'].' 00:00:01';
            $curDate    = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate;
            $end_date   = $data['end_date'].' 23:59:59';

            $query->andWhere('r.requestDate >= :dateAfter');
            $query->setParameter('dateAfter', $start_date);

            if($data['end_date']) {
                $query->andWhere('r.requestDate <= :dateBefore');
                $query->setParameter('dateBefore', $end_date);
            }if($data['vendor']){
                $query->andWhere('r.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }
            $query->orderBy('v.vendorName', 'ASC');

            return $query->getQuery()->getResult();

        } else {
            return false;
        }
    }

    public function findVerifiedList($data,$keyword = '', $value = '', User $user)
    {
        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder','po');
        $query->join('pay.readyForPayments','rfp');
        $query->leftJoin('rfp.grn','grn');
        $query ->Where('pay.status = 1');

        if($data['po']){
            $query->andWhere('po.id = :purchaseOrderId');
            $query->setParameter('purchaseOrderId', $data['po']);
        }

        if($data['vendor']){
            $query->andWhere('pay.vendor = :vendor');
            $query->setParameter('vendor', $data['vendor']);
        }

        if($user->hasRole('"ROLE_ACCOUNT_LOCAL"')){
            $query ->andWhere('po.paymentFrom = 1');
        }elseif($user->hasRole('"ROLE_ACCOUNT_HEAD"')){
            $query ->andWhere('po.paymentFrom = 2');
        }elseif($user->hasRole('"ROLE_ACCOUNT_ALL"') || $user->hasRole('"ROLE_SUPER_ADMIN"')){

        }

        if($keyword && $value ){
            $query->orderBy($keyword, $value);
        }else{
            $query->orderBy('pay.requestDate', 'desc');
        }

        return $query->getQuery()->getResult();

    }

    public function getPaymentArchiveList($data, $keyword = '' , $value = '' )
    {

        $query = $this->createQueryBuilder('pay');
//        $query->addSelect('SUM(pay.paymentAmount) as testAmount');
       // $query->join('pay.purchaseOrder','po');
        //$query->join('pay.readyForPayments','rfp');
      //  $query->leftJoin('pay.vendor','v');
       // $query->leftJoin('rfp.grn','grn');
       // $query ->where('pay.status = 2');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->join('p.projectCategory','pc');
        $query->leftJoin('pay.readyForPayments','rfp');
        $query->leftJoin('rfp.grn','grn');
//        $query->leftJoin('po.buyer','b');
        $query ->where('pay.status = 2');

        if($data['po']){
            $query->andWhere('po.id = :purchaseOrderId');
            $query->setParameter('purchaseOrderId', $data['po']);
        }

        if($data['vendor']){
            $query->andWhere('pay.vendor = :vendor');
            $query->setParameter('vendor', $data['vendor']);
        }
//                $query->andWhere('pay.paymentDate >= :start');
//                $query->andWhere('pay.paymentDate <= :end');
//                $query->setParameter('start', '2015-08-01 00:00:01');
//                $query->setParameter('end', '2015-08-31 23:59:59');
        /*if(!empty($data['start_date']) && !empty($data['end_date'])){

            $query->andWhere('pay.paymentDate >= :start');
            $query->andWhere('pay.paymentDate <= :end');
            $query->setParameter('start', $data['start_date'].' 00:00:00');
            $query->setParameter('end', $data['end_date'].' 23:59:59');
        }*/
        if($keyword && $value ){
            $query->orderBy($keyword, $value);
        }else{
            $query->orderBy('pay.paymentDate', 'desc');
        }

        return $query->getQuery()->getResult();
    }

    public function poNoAutoComplete($poNo, User $user,$status)
    {

        $query = $this->createQueryBuilder('pay');
        $query->select('po.id');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('pay.paymentVerifiedBy', 'u');
        $query->where($query->expr()->like("po.id", "'%$poNo%'"  ));

        if($status =='archive'){
            $query->andWhere('pay.status = 2');
        } elseif($status =='verified'){
            $query->andWhere('pay.status = 1');
        } else{

        }

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){

            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        $query->orderBy('po.id', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function paymentReport($data)
    {

        if (!empty($data)) {

            $query = $this->createQueryBuilder('pay');
            $query->select('pay.id')
                ->addSelect('pay.requestDate')
                ->addSelect('pay.paymentDate')
              //  ->addSelect('rfp.billNumber')
                ->addSelect('pay.paymentAmount')
                ->addSelect('pay.cheque')
                ->addSelect('v.vendorName')
                ->addSelect('po.id as poId')
                ->addSelect('u.username')
                ->addSelect('po.netTotal')
                ->addSelect('po.createdDate')
                ->addSelect('rb.name');

            $query->where('pay.status = 2');



            $query->join('pay.purchaseOrder', 'po');
            $query->join('po.purchaseOrderItems','poi');
            $query->join('poi.project','p');
          //  $query->join('p.projectCategory','pc');
            $query->leftJoin('pay.vendor', 'v');
            $query->leftJoin('pay.relatedBank', 'rb');
          //  $query->join('pay.readyForPayments', 'rfp');
            $query->join('po.createdBy', 'u');
            $query->groupBy('pay.id');

            if (!empty($data['vendor'])) {
                $query->andWhere('v.id = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }

            if (!empty($data['poNo'])) {
                $query->andWhere('po.id IN(:id)');
                $query->setParameter('id', $data['poNo']);
            }

//            if (!empty($data['start_date']) && !empty($data['end_date'])) {
//                $query->andWhere('pay.paymentDate >= :start');
//                $query->andWhere('pay.paymentDate <= :end');
//                $query->setParameter('start', '2015-08-01 00:00:01');
//                $query->setParameter('end', '2015-08-31 23:59:59');
//            }

            $query->orderBy('pay.paymentDate', 'desc');

            $result =  $query->getQuery()->getResult();
           // var_dump($result);die;
            return $result;
        } else {
             return false;
        }
    }

    public function getPaymentAmountByCompanyTypeAndDate($data)
    {
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $paymentCompany[$i] = $this->getPaymentAmountCompanyResult($data['companyType'],$dateStart, $dateEnd);
            }
            return $paymentCompany;
        }
    }

    public function getPaymentAmountCompanyResult($companyType,$dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->join('p.projectCategory','pc');

        $query->select('SUM(pay.paymentAmount) as paymentAmount');
        $query->where('pay.status = 2');
        $this->handleSearchByCompanyType($companyType, $query);
        $this->paymentAmountSearchDate($query, $dateStart, $dateEnd);
        return $query->getQuery()->getSingleResult();

    }

    public function supplierPaymentReport($data)
    {
        if(!empty($data)){

            $query = $this->createQueryBuilder('pay');
            $query->leftJoin('pay.purchaseOrder', 'po');
            $query->leftJoin('pay.vendor', 'v');
            $query->join('pay.relatedBank', 'rb');
            $query->leftJoin('pay.readyForPayments', 'rfp');
            $query->leftJoin('pay.paymentBy', 'pu');
            $query->leftJoin('pay.paymentVerifiedBy', 'vu');
            $query->leftJoin('rfp.grn', 'r');
            $query->where('pay.status = 2');
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $data['vendor']);
            $query->orderBy('pay.paymentDate', 'desc');
            $query->groupBy('r.id');

            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

    public function getPaymentCompanyResult($companyType,$dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->join('p.projectCategory','pc');
        $query->select('pay.requestDate');
        $query->addSelect('po.tax');
        $query->addSelect('pay.paymentDate');
        $query->addSelect('pay.id');
        $query->addSelect('pay.requestAmount');
        $query->addSelect('pay.paymentAmount');
        $query->where('pay.status = 2');
        $query->groupBy('pay.id');
        $this->handleSearchByCompanyType($companyType, $query);
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);
        return $query->getQuery()->getResult();
    }



    public function getPaymentCompany($data)
    {
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));
                $paymentCompany[] = $this->getPaymentCompanyResult($data['companyType'],$dateStart, $dateEnd);
            }
            return $paymentCompany;
        }
    }



    /**
     * @param $companyType
     * @param $query
     */
    protected function handleSearchByCompanyType($companyType, $query)
    {
        if (!empty($companyType)) {
            $query->andWhere('p.projectCategory = :companyType');
            $query->setParameter('companyType', $companyType);
        }
    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {

            $query->andWhere('po.approvedThreeDate >= :start');
            $query->andWhere('po.approvedThreeDate <= :end');
            $query->setParameter('start', $monthStart.' 00:00:00');
            $query->setParameter('end', $monthEnd.' 23:59:59');
        }
    }
    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function paymentAmountSearchDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {

            $query->andWhere('pay.paymentDate >= :start');
            $query->andWhere('pay.paymentDate <= :end');
            $query->setParameter('start', $monthStart.' 00:00:00');
            $query->setParameter('end', $monthEnd.' 23:59:59');
        }
    }

    public function getPaymentCompanyMonthlyDetail($dateStart,$dateEnd,$companyType)
    {
        

        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->join('p.projectCategory','pc');
      //  $query->select('SUM(poi.amount) as paymentAmount');
        $query->select('(pay.paymentAmount) as paymentAmount');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.createdDate as poDate');
        $query->addSelect('p.projectName');
        $query->where('pay.status = 2');
        $query->andWhere('pay.paymentDate >= :start');
        $query->andWhere('pay.paymentDate <= :end');
        $query->setParameter('start', $dateStart.' 00:00:00');
        $query->setParameter('end', $dateEnd.' 23:59:59');
        $this->handleSearchByCompanyType($companyType,$query);
//        $query->groupBy('p.id','po.id');
        $query->groupBy('po.id','pay.id');
        $result[] = $query->getQuery()->getResult();
        return $result;
        /*$data = array();
        foreach ($result as $rows){
            $data[$rows['poId']] = $rows;
        }
        return $data;*/

    }

    private function getPaymentMonthlyDetail($dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.receivedItems','ri');
        $query->join('poi.project','p');
        $query->join('p.projectCategory','pc');
        $query->select('pay.requestDate');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.tax');
        $query->addSelect('SUM(poi.amount) as poAmount');
        $query->addSelect('SUM(ri.quantity * poi.price) as GrnAmount');
        $query->addSelect('p.projectName');
        $query->addSelect('pay.paymentDate');
        $query->addSelect('pay.id');
        $query->addSelect('pay.requestAmount');
        $query->addSelect('pay.paymentAmount');
        $query->where('pay.status = 2');
        $query->groupBy('p.id');
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);

        return $query->getQuery()->getResult();

    }

    public function getPaymentAmount($companyType,$dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('pay');
        $query->join('pay.purchaseOrder', 'po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->select('SUM(pay.paymentAmount)');
        $query->where('pay.status = 2');
        $query->andWhere('po.approveStatus = 3');
//        $query->groupBy('po.id');
        $this->handleSearchByCompanyType($companyType, $query);
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);

        return $query->getQuery()->getSingleScalarResult();
    }
    public function getMonthlyPaymentAmount($data)
    {
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $paymentCompany[] = $this->getPaymentAmount($data['companyType'],$dateStart, $dateEnd);
            }
            return $paymentCompany;
        }
    }

    public function getPaymentInFo($data)
    {
        if(!empty($data['vendor'])){

            $query = $this->createQueryBuilder('pay');
            $query->leftJoin('pay.vendor', 'v');
            $query->select('SUM(pay.paymentAmount) as paymentAmount');
            $query->addSelect('SUM(pay.adjustmentAmount) as adjustmentAmount');
            $query->groupBy('v.id');
            if (!empty($data['vendor'])) {
                $query->andWhere('v.id = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }
            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }
    public function getPaymentByVendor($vendor)
    {
        if(!empty($vendor)){

            $query = $this->createQueryBuilder('pay');
            $query->leftJoin('pay.vendor', 'v');
            $query->leftJoin('pay.relatedBank', 'rb');
            $query->leftJoin('pay.purchaseOrder', 'po');
            $query->select('SUM(pay.paymentAmount) as paymentAmount');
            $query->addSelect('po.id as poId');
            $query->addSelect('rb.name as bankName');
            $query->addSelect('pay.cheque as chequeNumber');
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $vendor);
            $query->groupBy('po.id');
            $results =  $query->getQuery()->getResult();
            $data = array();
            foreach($results as $row){
                $data[$row['poId']] = $row;
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getPaymentRequestAmount($data)
    {
        if(!empty($data['vendor']) || !empty($data['project'])){

            $query = $this->createQueryBuilder('pay');
            $query->leftJoin('pay.readyForPayments', 'rfp');
            $query->leftJoin('pay.vendor', 'v');
            $query->leftJoin('pay.purchaseOrder', 'po');
            $query->leftJoin('po.purchaseOrderItems', 'poi');
            $query->leftJoin('poi.project', 'p');
//            $query->leftJoin('rfp.grn', 'g');
            $query->select('SUM(rfp.amount) as requestedAmount');
            $query->where('rfp.grn is not NULL');
            if (!empty($data['vendor'])) {
                $query->andWhere('v.id = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }
            if (!empty($data['project'])) {
                $query->andWhere('p.id= :project');
                $query->setParameter('project', $data['project']);
            }
            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

}
