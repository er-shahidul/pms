<?php

namespace Pms\CoreBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Pms\UserBundle\Entity\User;
use Pms\CoreBundle\Entity\PurchaseRequisition;

/**
 * PurchaseRequisitionItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRequisitionItemRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function totalQuantity($item)
    {
        $query = $this->createQueryBuilder('pri');
        $query->select('SUM(pri.quantity) as totalQuantity');
        $query->where('pri.status = 1');
        $this->handleSearchByItem($item, $query);

        return $query->getQuery()->getResult();
    }

    public function getDailyPurchaseRequisitionReport($data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pri.purchaseRequisitionItemCloseInfo','prici');
        $query->leftJoin('prici.closedBy','clb');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('pri.item', 'i');
        $query->leftJoin('i.itemType', 'it');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.category', 'c');
        $query->leftJoin('pr.createdBy', 'cu');
        $query->leftJoin('pr.costHeader', 'ch');
        $query->leftJoin('pr.approvedByProjectHead', 'aph');
        $query->leftJoin('pr.approvedByCategoryHeadOne', 'apho');
        $query->leftJoin('pr.approvedByCategoryHeadTwo', 'apht');
        $query->leftJoin('pri.claimedBy', 'cb');
        $query  ->select('pr.id')
                ->addSelect('pr.refNo')
                ->addSelect('pr.createdDate')
                ->addSelect('pr.approvedDateCategoryHeadTwo')
                ->addSelect('p.projectName')
                ->addSelect('pri.isHeadOrLocal')
                ->addSelect('pr.status')
                ->addSelect('pr.approveStatus')
                ->addSelect('pr.totalRequisitionItemClaimed')
                ->addSelect('pr.totalOrderItemQuantity')
                ->addSelect('pr.totalRequisitionItem')
                ->addSelect('pr.totalRequisitionItemQuantity')
                ->addSelect('i.itemName')
                ->addSelect('it.itemType')
                ->addSelect('c.categoryName')
                ->addSelect('sc.subCategoryName')
                ->addSelect('ch.title')
                ->addSelect('pri.quantity')
                ->addSelect('pri.totalPrice')
                ->addSelect('pri.closeRemark')
                ->addSelect('cu.username as createdBy')
                ->addSelect('cb.username as claimedBy')
                ->addSelect('aph.username as approvedByOne')
                ->addSelect('apho.username as approvedByTwo')
                ->addSelect('apht.username as approvedByThree')
                ->addSelect('pri.claimedDate')
                ->addSelect('pr.priority')
                ->addSelect('clb.username as closedBy') ;

        if(($data['start_date']==true) and ($data['end_date']==true)) {
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchBySubcategory($data['subCategory'], $query);
            $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        }else{
            return false;
        }

        return $query->getQuery()->getResult();
    }
    public function getDailyPurchaseRequisitionReport1($data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->join('i.itemType', 'it');
        $query->join('pr.subCategory', 'sc');

        if(($data['start_date']==true) and ($data['end_date']==true)) {
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchBySubcategory($data['subCategory'], $query);
            $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        }else{
            return false;
        }

        return $query->getQuery()->getResult();
    }

    public function userClaimListReport($data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.claimedBy', 'u');
        $query->select('u.username');
        $query->addSelect('p.id');
        $query->addSelect('p.projectName');
        $query->addSelect('COUNT(pri.id) as totalPri');
        $query->groupBy('u.id');
        $query->orderBy('u.username', 'ASC');
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);

        return $query->getQuery()->getResult();
    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {

            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $monthStart.' 00:00:00');
            $query->setParameter('end', $monthEnd.' 23:59:59');
        }
    }

    public function getTotalProjectWiseRequisitionItem($id, $data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->select('COUNT(pri.id) as totalPri');
        $query->where('p.id = :pId');
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $query->setParameter('pId', $id);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function purchaseRequisitionReport($data)
    {
        if (empty($data['start_date']) && empty($data['end_date'])) {
            return false;
        }
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');

        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $this->handleSearchByProject($data['project'], $query);

//        if (empty($data)) {
//            $query->where('pri.status = 11');
//        }
//        if (empty(!empty($data['status']))) {
//
//            $query->andWhere('pr.status = :status');
//            $query->setParameter('status', $data['status']);
//        }

        $query->andWhere('pr.approveStatus = 3');
        $query->andWhere('pr.totalRequisitionItemQuantity != 0');

        return $query->getQuery()->getResult();
    }

    public function getRequisitionVsOrderSaving($data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pri.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseOrder', 'po');
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $query->andWhere('po.approveStatus = 3');

        return $query->getQuery()->getResult();
    }

    public function totalPrItemsApproved($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('count(pri.id) as TotalPrItemApproved');
        $query->where('pr.approveStatus = 3');
        $query->andWhere('pr.status = 1');
        $this->handleSearchBetweenDate($query, $dateStartTime, $dateEndTime);

        return $query->getQuery()->getResult();
    }

    public function totalItemClaimed($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('count(pri.id) as TotalItemClaimed');
        $query->where('pr.approveStatus = 3');
        $query->andWhere('pr.status = 1');
        $query->andWhere('pri.claimedBy IS NOT NULL');
        $this->handleSearchBetweenDate($query, $dateStartTime, $dateEndTime);

        return $query->getQuery()->getResult();
    }

    public function getItemLastRequisitionDateQuantityItems($project, $item,$currentPr)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->select('pr.createdDate');
        $query->addSelect('pri.quantity');
        $query->addSelect('pri.status');
        $query->addSelect('pri.id as priId');

        $query->addSelect('pr.id as purchaseRequisitionId');
        $query->addSelect('pri.purchaseOrderQuantity as orderQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('i.id');
        $query->andWhere('pr.id !='. $currentPr);
        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);

        $query->orderBy('pri.id', 'DESC');
        $query->setMaxResults(2);

        return $query->getQuery()->getResult();
    }
    public function getLastItemRequisitionByProjectAndItemWise(PurchaseRequisition $purchaseRequisition)
    {
        foreach ($purchaseRequisition->getPurchaseRequisitionItems() as $item){
            $itemList[] = $item->getItem()->getId();
        }

        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->select('pr.createdDate');
        $query->addSelect('pri.quantity');
        $query->addSelect('pri.status');

        $query->addSelect('pr.id as purchaseRequisitionId');
        $query->addSelect('pri.purchaseOrderQuantity as orderQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('i.id');
        $this->handleSearchByProject($purchaseRequisition->getProject()->getId(), $query);
        $query->andWhere('pri.item IN (:item)');
        $query->setParameter('item', array_values($itemList));

        $query->andWhere('pr.id !='. $purchaseRequisition->getId());
      //   $query->setMaxResults(2);
        $query->orderBy('pr.createdDate','DESC');
         $query->groupBy('i.id','pr.project');
        $results = $query->getQuery()->getResult();

        $array = array();

        foreach ($results as $row){
           $array[$row['id']] = $row;

        }
        return $array;


    }

    /**
     * @param $item
     * @param $query
     */
    protected function handleSearchByItem($item, $query)
    {
        if (!empty($item)) {
            $query->andWhere('pri.item = :item');
            $query->setParameter('item', $item);
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere('p.id = :project');
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $subCategory
     * @param $query
     */
    protected function handleSearchBySubcategory($subCategory, $query)
    {
        if (!empty($subCategory)) {
            $query->andWhere('sc.id = :subCategory');
            $query->setParameter('subCategory', $subCategory);
        }
    }

    public function itemListForPurchaseOrder(User $user)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->join('u.groups', 'g');
        $query->where('pri.status = 1');
        $query->andWhere('pri.claimedBy IS NOT NULL');
        $query->andWhere('pri.quantity > pri.purchaseOrderQuantity');
        $query->orderBy('p.projectName', 'ASC');

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('pri.claimedBy = :user');
            $query->setParameter('user', $user->getId());
        }

        return $query->getQuery()->getResult();
    }

    public function prItemReport($data)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pri.item', 'i');
        $query->join('pr.project', 'p');

        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByItem($data['item'], $query);
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        if(empty($data['project']) && empty($data['item']) && empty($data['start_date']) && empty($data['end_date'])){
            $query->andWhere('pr.status = 9');
        }
        $query->orderBy('pr.closedDate', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function trendRequisitionReport($data)
    {
        $month = array(
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December');

        if (!empty($data['year']) && !empty($data['item']) && !empty($data['project'])) {

            for ($i = 1; $i < 13; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $trendRequisitionMonthReport[] = $this->trendRequisitionMonthReport($data['item'], $data['project'], $dateStart, $dateEnd);
            }

            return array($trendRequisitionMonthReport, $month);
        }
    }

    private function trendRequisitionMonthReport($item, $project, $dateStart, $dateEnd)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pri.item', 'i');
        $query->join('pr.project', 'p');
        $query->select('SUM(pri.quantity) as itemQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('p.projectName');
        $query->addSelect('i.itemUnit');
        $query->where('pr.approveStatus = 3');
        $query->andWhere('pr.status = 1');
        $query->andWhere('pri.claimedBy IS NOT NULL');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);

        return $query->getQuery()->getSingleResult();
    }

    public function totalRequisitionItemResolved($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('COUNT(pri.id) as totalRequisitionItemResolved');

        $this->handlePoIssuedTypeFilter('po-issued', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);


        return $query->getQuery()->getSingleScalarResult();
    }

    public function totalRequisitionItemOpen($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');

        $query->select('COUNT(pri.id) as totalRequisitionItemOpen');

        $this->handleOpenTypeFilter('open', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);


        return $query->getQuery()->getSingleScalarResult();
    }
    public function totalRequisitionItemApproved($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');

        $query->select('COUNT(pri.id) as totalRequisitionItemOpen');

        $this->handleApproveTypeFilter('approve', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);


        return $query->getQuery()->getSingleScalarResult();
    }
    public function totalRequisitionItemHold($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('COUNT(pri.id) as totalRequisitionItemOpen');
        $query->where('pr.status = 5');
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function totalRequisitionItemCanceled($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('COUNT(pri.id) as totalRequisitionItemCanceled');
        $query->where('pr.status = 6');

       //  $query->orWhere('pr.totalRequisitionItemQuantity >= 0');
//        $this->handleCancelTypeFilter('cancel', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);


        return $query->getQuery()->getSingleScalarResult();
    }

    public function totalRequisitionItemCanceledIndividual($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->innerJoin('pri.purchaseRequisitionItemCloseInfo','pric');
        $query->select('COUNT(pric.id) as totalRequisitionItemCanceledIndividual');
        $query->andWhere('pr.status != 6');
        $this->handleCancelIndividualTypeFilter('cancel-individual', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function totalRequisitionItemInProgress($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('COUNT(pri.id) as totalRequisitionItemInProgress');
        $this->handleInProgressTypeFilter('in-progress', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function handleOpenTypeFilter($type, $query)
    {
        if ($type == 'open') {
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 0 OR pr.approveStatus = 1 OR pr.approveStatus = 2');
        }
    }

    private function handleApproveTypeFilter($type, $query)
    {
        if ($type == 'approve') {
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.totalRequisitionItemClaimed = 0');
            $query->andWhere('pr.totalOrderItemQuantity = 0');
        }
    }

    private function handleInProgressTypeFilter($type, $query)
    {

        if ($type == 'in-progress') {
            $query->andWhere('pri.claimedBy IS NULL');
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.totalRequisitionItemClaimed != 0');
            $query->andWhere('pr.totalRequisitionItemQuantity > pr.totalOrderItemQuantity');
            $query->andWhere('pr.totalRequisitionItemClaimed <= pr.totalRequisitionItem');

        } elseif($type == 'hold') {
            $query->andWhere('pr.status = 5');
        }
    }

    private function handlePoIssuedTypeFilter($type, $query)
    {
        if ($type == 'po-issued') {
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.totalOrderItemQuantity >= pr.totalRequisitionItemQuantity');

        }
    }

    public function getByUpdatedDate()
    {
        $query = $this->createQueryBuilder('pri');
        $query->leftJoin('pri.purchaseRequisition','pr');
        $query->select('pr.id');
        $query->addSelect('SUM(pri.quantity) AS TotalUpdateQuantity');
        $query->addSelect('pr.approveStatus');
        $query->andWhere('pr.updatedDate IS NOT NULL');
        $query->groupBy('pr.id');
        return $query->getQuery()->getResult();
    }

    public function totalRequisitionItem($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition','pr');
        $query->select('COUNT(pri.id) as totalRequisitionItem');
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleHoldTypeFilter($type, $query)
    {
        if ($type == 'hold') {
            $query->andWhere('pr.status = 6');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancelTypeFilter($type, $query)
    {
        if ($type == 'cancel') {
            $query->andWhere('pr.status = 6');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancel($type, $query)
    {
        if ($type == 'cancel') {
            $query->where('pr.status = 6');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancelIndividualTypeFilter($type, $query)
    {
        if ($type == 'cancel-individual') {
            $query->andWhere('pr.status != :close');
            $query->setParameter('close', 7);
        }
    }
    protected function monthStartEnd($data)
    {
        $month = $data["month"];
        $start_date = $month . ' 00:00:00';
        $end_date = date('Y-m-t 23:59:59', (strtotime($start_date)));

        return array($start_date, $end_date);
    }

    public function getPurchaseRequisitionData($data,$type)
    {
        list($start_date, $end_date) = $this->monthStartEnd($data);

        $query = $this->createQueryBuilder('pri');
        $query->leftJoin('pri.purchaseRequisition','pr');
        $this->handleSearchBetweenDate($query,$start_date,$end_date);
        $this->handleInProgressTypeFilter($type, $query);
        return $query->getQuery()->getResult();

    }
    public function getPurchaseRequisitionCancelData($data,$type)
    {
        list($start_date, $end_date) = $this->monthStartEnd($data);

        $query = $this->createQueryBuilder('pri');
        $query->leftJoin('pri.purchaseRequisition','pr');
        $query->leftJoin('pr.prLogs','pl');
        $this->handleCancel($type, $query);
        $this->handlePoIssuedTypeFilter($type,$query);
        $this->handleSearchBetweenDate($query,$start_date,$end_date);
        return $query->getQuery()->getResult();

    }
    public function getPurchaseRequisitionItemTotalData($data)
    {

        list($start_date, $end_date) = $this->monthStartEnd($data);
        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition','pr');
        $this->handleSearchBetweenDate($query,$start_date,$end_date);
        return $query;


    }

    public function purchaseRequisitionAllStatus($query){
        //open
        $query->andWhere('pr.approveStatus = 0 OR
                          pr.approveStatus = 3 OR
                          pr.status = 1 OR
                          pr.status = 6 OR
                          pri.status = 2
                          pr.totalOrderItemQuantity >= pr.totalRequisitionItemQuantity OR
                          pr.totalRequisitionItemClaimed != 0 OR
                          pr.totalRequisitionItemQuantity > pr.totalOrderItemQuantity OR
                          pr.totalRequisitionItemClaimed <= pr.totalRequisitionItem
                          ');
    }
    public function getPurchaseRequisitionOpenData($data,$type)
    {
        list($start_date, $end_date) = $this->monthStartEnd($data);

        $query = $this->createQueryBuilder('pri');
        $query->leftJoin('pri.purchaseRequisition','pr');
        if($type == 'open'){
            $this->handleOpenType($type, $query);
        } elseif($type == 'approve') {
            $this->handleApproveTypeFilter($type,$query);
        }
        $this->handleSearchBetweenDate($query,$start_date,$end_date);

        return $query->getQuery()->getResult();

    }
    protected function handleOpenType($type, $query)
    {
        if ($type == 'open') {
            $query->where('pr.approveStatus = 0');
            $query->andWhere('pr.status = 1');
        }
    }

    public function totalRequisitionIndividualItemQtyCanceled($data)
    {

        $query = $this->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.purchaseRequisitionItemCloseInfo','pric');
        $query->join('pri.item','i');
        $query->join('i.category','c');
        $query->select('SUM(pric.quantity) as cancelQty');
        $query->addSelect('i.id as itemId');
        $query->groupBy('i.id');
        $query->where('pr.status = 6');

        $this->handleSearchByProject($data['project'],$query);
        $this->handleSearchByCategory($data['category'],$query);
        $this->handleSearchBetweenDate($query, $data['start_date'],$data['end_date']);
        $results = $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['itemId']] = $row;
        }
        return $data;
    }

    /**
     * @param $category
     * @param $query
     */
    protected function handleSearchByCategory($category, $query)
    {
        if (!empty($category)) {
            $query->andwhere('c.id = :category');
            $query->setParameter('category', $category);
        }
    }
}
