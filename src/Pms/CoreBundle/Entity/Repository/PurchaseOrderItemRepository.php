<?php

namespace Pms\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\CoreBundle\Entity\PurchaseOrder;
use Pms\UserBundle\Entity\User;

/**
 * PurchaseOrderItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseOrderItemRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function getBudgetVsSpendsForPoiTotal($data, $subCategoryID)
    {
        $start_date = date('Y-m-01',(strtotime ($data['month']) ));
        $end_date = date('Y-m-t',(strtotime ($start_date) ));

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.subCategory', 'sc');

        $query->select('SUM(poi.amount) as spendAmountForSubCategory');

        $query->where('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('sc.id = :subCategoryID');
        $query->setParameter('subCategoryID', $subCategoryID);
        $this->handleSearchBetweenDate($start_date, $end_date, $query);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPriceCompareReport($data)
    {
        $monthArray = array();
        $priceCompare = array();

        if(!empty($data['month'])){
            $month = $data['month'];
            for($i=0;$i<2;$i++){
                $monthArray[] = $month;
                $priceCompare[] = $this->getPriceCompareReportMonth($data, $month);
                $month = date('Y-m-01',(strtotime ("-1 month" . $data['month']) ));
            }
        }

        return array($priceCompare, $monthArray);
    }

    public function getPriceCompareReportMonth($data, $month)
    {
        $start_date = date('Y-m-01',(strtotime ($month) ));
        $end_date = date('Y-m-t',(strtotime ($start_date) ));

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.item', 'i');
        $query->join('poi.project', 'p');

        $query->where('po.status = 1');
        $query->andWhere('po.approveStatus = 3');

        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByItem($data['item'], $query);
        $this->handleSearchBetweenDate($start_date, $end_date, $query);
        $query->orderBy('po.createdDate', 'DESC');
        return $query->getQuery()->getResult();
    }

    public function getBudgetVsSpendsForPoiTotalSingle($data, $subCategoryID)
    {
        $start_date = date('Y-m-01',(strtotime ($data) ));
        $end_date = date('Y-m-t',(strtotime ($start_date) ));

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.subCategory', 'sc');
        $query->join('pr.project', 'p');

        $query->select('SUM(poi.amount) as spendAmountForSubCategory');
        $query->addSelect('sc.id');
        $query->addSelect('p.projectName');
        $query->addSelect('p.id as pId');

        $query->where('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('sc.id = :subCategoryID');
        $query->setParameter('subCategoryID', $subCategoryID);
        $this->handleSearchBetweenDate($start_date, $end_date, $query);
        $query->groupBy('p.id', 'sc.id');

        return $query->getQuery()->getResult();
    }
    public function getProjectWiseItemSpend($month, $project,$subcategory)
    {

        $start_date = date('Y-m-01',(strtotime ($month) ));
        $end_date = date('Y-m-t',(strtotime ($month) ));

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->leftJoin('po.buyer', 'b');
        $query->leftJoin('po.vendor', 'v');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.item', 'i');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.subCategory', 'sc');
        $query->join('pr.project', 'p');
        $query->join('po.createdBy', 'u');

        $query->select('poi.price as item_price');
        $query->addSelect('poi.quantity');
        $query->addSelect('u.username');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.createdDate as po_created_date');
        $query->addSelect('pr.id as prId');
        $query->addSelect('poi.brand as brand_name');
        $query->addSelect('b.fullName as buyer_name');
        $query->addSelect('v.vendorName as vendor_name');
        $query->addSelect('(poi.price * poi.quantity) as subTotal');

        $query->addSelect('i.itemName');
        $query->addSelect('i.itemUnit');


        $query->where('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('pr.project = :project');
        $query->setParameter('project', $project);
        $query->andWhere('sc.id = :subCategoryID');
        $query->setParameter('subCategoryID', $subcategory);
        $this->handleSearchBetweenDate($start_date, $end_date, $query);

        return $query->getQuery()->getResult();
    }

    public function totalQuantity($item)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.item', 'i');
        $query->select('SUM(poi.quantity) as totalQuantity');
        $query->where('poi.status = 1');
        $query->andWhere('i.id = :item');
        $query->setParameter('item', $item);

        return $query->getQuery()->getResult();
    }
    public function getDataByProjectAndItemWise($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.item', 'i');
        $query->join('poi.project', 'p');
        $query->select('SUM(poi.price) as price');
        $query->addSelect('SUM(poi.quantity) as quantity');
        $query->addSelect('i.id as itemId');
        $query->addSelect('p.id as projectId');
        $query->where('poi.approvalStatus = 3');

       /* if(!empty($data['start_date'] && !empty($data['end_date']))) {
            $query->andWhere('po.approvedThreeDate >= :dateAfter');
            $query->andWhere('po.approvedThreeDate <= :dateBefore');
            $query->setParameter('dateAfter', $data['start_date'].' 00:00:00');
            $query->setParameter('dateBefore', $data['end_date'].' 23:59:59');
        }*/

        if(!empty($data['item'])){
            $query->andWhere('i.id = :item');
            $query->setParameter('item', $data['item']);
        }
        if(!empty($data['project'])) {

            $query->andWhere('p.id = :project');
            $query->setParameter('project', $data['project']);
        }
        $query->groupBy('p.id','i.id');
        
        $results = $query->getQuery()->getResult();
        
        $arrayList = array();
        
        foreach ($results as $key => $row){
            $arrayList[$row['itemId']] = $row;
        }
        return $arrayList;
    }

    public function findPurchaseOrderItems($getId)
    {
        $query = $this->createQueryBuilder('poi');
        $query->select('i.id');
        $query->where('po.id = :id');
        $query->setParameter('id', $getId);
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.item', 'i');
        $query->join('poi.purchaseOrder','po');
        $query->orderBy('poi.id', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function findPurchaseOrderId($getId)
    {
        $query = $this->createQueryBuilder('poi');
        $query->select('i.id');
        $query->where("po.id = :id");
        $query->setParameter('id', $getId);
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.item', 'i');
        $query->join('poi.purchaseOrder','po');
        $query->orderBy('poi.id', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function grantedAddItemListForReceive(User $user, $project)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('poi.purchaseOrder', 'po');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->join('pri.item', 'i');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->join('u.groups', 'g');
        $query->select('poi.quantity as totalPoQty');
        $query->addSelect('poi.amendmentQuantity as totalPoAmendmentQty');
        $query->addSelect('poi.amendment');
        $query->addSelect('i.itemName');
        $query->addSelect('pri.id as priId');
        $query->addSelect('p.projectName');
        $query->addSelect('p.id as projectId');
        $query->addSelect('pr.id');
        $query->addSelect('pr.id as prId');
        $query->addSelect('pri.dateOfRequired');
        $query->addSelect('pri.quantity as totalPrQty');
        $query->addSelect('poi.totalOrderReceiveQuantity as totalReceiveQty');
        $query->addSelect('po.dateOfDelivered');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.createdDate');
        $query->addSelect('poi.id as poiId');
        $query->addSelect('v.id as vId');
        $query->addSelect('v.vendorName');
        $query->addSelect('b.username as buyerName');
        $query->where('pri.status = 1 OR pri.status = 2');
        $query->andWhere('pri.poApprovalStatus = 3');
        $query->andWhere('poi.approvalStatus = 3');
        $query->andWhere('poi.quantity > poi.totalOrderReceiveQuantity OR poi.totalOrderReceiveQuantity IS NULL');
        $query->andWhere('poi.quantity != 0');
        $query->andWhere('poi.status = 1');
        $this->handleSearchByProject($project, $query);

        if (!$user->hasRole("ROLE_SUPER_ADMIN")) {
            $query->andWhere("u IN(:user)");
            $query->setParameter('user', $user);
        }

        $query->andWhere("g.roles LIKE '%ROLE_RECEIVE_ADD%'");
        $query->groupBy('p.id', 'i.id', 'poId', 'v.id', 'pr.id');

        return $query->getQuery()->getResult();
    }
    public function notReceiveItemList(User $user,$data)
    {

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisitionItemCloseInfo','priCancelInfo');

        $query->leftJoin('poi.purchaseOrderItemClose','poiCloseInfo');

        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');

        $query->leftJoin('pri.item', 'i');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('p.users', 'u');
        $query->leftJoin('u.groups', 'g');

        $query->select('poi.quantity as totalPoQty');

        $query->addSelect('poiCloseInfo.quantity as closeQty');
        $query->addSelect('poi.remark as closeRemark');


        $query->addSelect('poi.amendmentQuantity as totalPoAmendmentQty');
        $query->addSelect('poi.amendment');
        $query->addSelect('i.itemName');
        $query->addSelect('pri.id as priId');
        $query->addSelect('p.projectName');
        $query->addSelect('p.id as projectId');
        $query->addSelect('pr.id');
        $query->addSelect('pr.id as prId');
        $query->addSelect('pri.dateOfRequired');
        $query->addSelect('pri.quantity as totalPrQty');
        $query->addSelect('priCancelInfo.quantity as priCancelQty');

        $query->addSelect('poi.totalOrderReceiveQuantity as totalReceiveQty');

        $query->addSelect('poiCloseInfo.quantity as totalNotReceiveQty');

        $query->addSelect('po.dateOfDelivered');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.createdDate');
        $query->addSelect('poi.id as poiId');
        $query->addSelect('v.id as vId');
        $query->addSelect('v.vendorName');
        $query->addSelect('b.username as buyerName');
        $query->where('pri.status = 1 OR pri.status = 2');
        $query->andWhere('pri.poApprovalStatus = 3');
        $query->andWhere('poi.approvalStatus = 3');
        $query->andWhere('poiCloseInfo.quantity IS NULL');
        $query->andWhere('poi.quantity > poi.totalOrderReceiveQuantity OR poi.totalOrderReceiveQuantity IS NULL');
        $query->andWhere('poi.quantity != 0');


        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);

            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }

        if (!$user->hasRole("ROLE_SUPER_ADMIN")) {

            $query->andWhere("u IN(:user)");
            $query->setParameter('user', $user);
        }

        $query->andWhere("g.roles LIKE '%ROLE_RECEIVE_ADD%'");
       // $query->groupBy('p.id', 'i.id', 'poId', 'v.id', 'pr.id');
        $query->groupBy('p.id','i.id');

        return $query->getQuery()->getResult();
    }
    public function notReceiveItemList1(User $user,$data)
    {

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisitionItemCloseInfo','priCancelInfo');
        $query->join('poi.purchaseOrder', 'po');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->join('pri.item', 'i');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->join('u.groups', 'g');
        $query->select('poi.quantity as totalPoQty');
        $query->addSelect('poi.amendmentQuantity as totalPoAmendmentQty');
        $query->addSelect('poi.amendment');
        $query->addSelect('i.itemName');
        $query->addSelect('pri.id as priId');
        $query->addSelect('p.projectName');
        $query->addSelect('p.id as projectId');
        $query->addSelect('pr.id');
        $query->addSelect('pr.id as prId');
        $query->addSelect('pri.dateOfRequired');
        $query->addSelect('pri.quantity as totalPrQty');
        $query->addSelect('priCancelInfo.quantity as priCancelQty');
        $query->addSelect('poi.totalOrderReceiveQuantity as totalReceiveQty');
        $query->addSelect('po.dateOfDelivered');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.createdDate');
        $query->addSelect('poi.id as poiId');
        $query->addSelect('v.id as vId');
        $query->addSelect('v.vendorName');
        $query->addSelect('b.username as buyerName');
        $query->where('pri.status = 1 OR pri.status = 2');
        $query->andWhere('pri.poApprovalStatus = 3');
        $query->andWhere('poi.approvalStatus = 3');
        $query->andWhere('poi.quantity > poi.totalOrderReceiveQuantity OR poi.totalOrderReceiveQuantity IS NULL');
        $query->andWhere('poi.quantity != 0');
        $query->andWhere('poi.status = 2');

        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);

            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }

        if (!$user->hasRole("ROLE_SUPER_ADMIN")) {

            $query->andWhere("u IN(:user)");
            $query->setParameter('user', $user);
        }

        $query->andWhere("g.roles LIKE '%ROLE_RECEIVE_ADD%'");
        $query->groupBy('p.id', 'i.id', 'poId', 'v.id', 'pr.id');

        return $query->getQuery()->getResult();
    }
    public function getTotalCloseReceiveItem($data){

        $query = $this->createQueryBuilder('poi');

        $query->leftJoin('poi.purchaseOrder','po');
        $query->leftJoin('po.vendor','v');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('poi.purchaseOrderItemClose', 'poic');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('pri.item', 'i');

        $query->select('SUM(poic.quantity)');

        $query->where('po.approveStatus = 3 AND poi.status = 2 ');

        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('po.id = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }


        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPurchaseOrderReportReport($data)
    {

        if(empty($data['start_date']) && empty($data['end_date'])){
            return false;
        }
            $query = $this->createQueryBuilder('poi');
            $query->leftJoin('poi.purchaseOrder', 'po');

            $query->leftJoin('poi.purchaseOrderItemClose', 'poic');
            $query->leftJoin('poic.closedBy', 'cb');

            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('poi.item', 'i');
            $query->leftJoin('poi.project', 'p');
            $query->leftJoin('po.poNonpo', 'pt');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('po.buyer', 'b');
            $query->leftJoin('po.createdBy', 'u');

            $query->leftJoin('p.projectArea', 'pa');
            $query->leftJoin('p.projectCategory', 'pc');

            $query->leftJoin('i.itemType', 'it');
            $query->leftJoin('pr.subCategory', 'sc');
            $query->leftJoin('pr.category', 'c');

            $query->select('poi as purchaseOrderItem');
            $query->addSelect('c.categoryName');
            $query->addSelect('sc.subCategoryName');
            $query->addSelect('i.itemName');
            $query->addSelect('i.itemUnit');
            $query->addSelect('it.itemType');
            $query->addSelect('p.projectName');
            $query->addSelect('pa.areaName');

            $query->addSelect('po.refNo');
            $query->addSelect('po.id as poId');
            $query->addSelect('po.createdDate');
            $query->addSelect('u.username');
            $query->addSelect('b.username as buyerName');
            $query->addSelect('v.vendorName');
            $query->addSelect('pt.name as purchaseTypeName');
            $query->addSelect('(poi.amount) as netTotal');

            $query->addSelect('poic.quantity as closeQty');
            $query->addSelect('cb.username as closeBy');
            $query->addSelect('poi.remark');
            $query->addSelect('pc.projectCategoryName as companyType');

            $query->where('po.approveStatus = 3');
//            $query->andWhere('po.status = 1');

                $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
                $this->handleSearchByProject($data['project'], $query);
//                $query->groupBy('p.id', 'i.id');

            if(!empty($data['user'])){
                $query->andWhere('po.buyer = :buyer');
                $query->setParameter('buyer', $data['user']);
            }
            if(!empty($data['purchaseType'])){
                $query->andWhere('pt.id = :poNonPo');
                $query->setParameter('poNonPo', $data['purchaseType']);
            }
            return $query->getQuery()->getResult();
    }

    public function getPurchaseOrderPriceDirectory($data)
    {
        if((!empty($data))){

            $start = $data['start_date'] .' 00:00:01';
            $curDate = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate ;
            $end_date = $data['end_date'] .' 23:59:59';

            $query = $this->createQueryBuilder('poi');
            $query->where('po.approveStatus = 3');
            $query->andWhere('po.createdDate >= :start_date');
            $query->setParameter('start_date', $start_date.' 00:00:01');
            $query->leftjoin('poi.purchaseOrder', 'po');
            $query->leftjoin('poi.item', 'i');
            $query->leftjoin('po.vendor', 'v');
            $query->leftjoin('po.buyer', 'u');
            $query->leftJoin('poi.project', 'p');

            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByItemType($data['itemType'], $query);

            if($data['end_date']) {
                $query->andWhere('po.createdDate <= :end_date');
                $query->setParameter('end_date', $end_date);
            }

            $query->orderBy('po.createdDate', 'DESC');

            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

    public function getComparePriceDirectory($data)
    {
        if((!empty($data['item']) && !empty($data['start_date']) && !empty($data['end_date']))){

            $query = $this->createQueryBuilder('poi');
            $query->leftjoin('poi.purchaseOrder', 'po');
            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('pri.item', 'i');
            $query->leftJoin('pr.project', 'p');
            $query->leftjoin('po.vendor', 'v');
            $query->leftjoin('po.buyer', 'u');

            $query->where('po.approveStatus = 3');
            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByPrBetweenDate($data['start_date'], $data['end_date'], $query);
            $query->orderBy('poi.price', 'ASC');

            return $query->getQuery()->getResult();

        } else {
            return false;
        }
    }

    public function overViewReport($data)
    {
        $connection = $this->_em->getConnection();

        $query = $this->createQueryBuilder('poi');
        $query->where('po.approveStatus = 3');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('poi.project', 'p');
        $query->leftJoin('poi.item', 'i');
        $query->select('i.itemName');
        $query->addSelect('i.id');
        $query->addSelect('i.itemUnit');
        $query->addSelect('SUM(poi.amount) as total');
        $query->addSelect('SUM(poi.quantity) as quantity');


        if(!empty($data['item']) && !empty($data['project']) && !empty($data['start_date']) && !empty($data['end_date'])){

            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByPoBetweenDate($data['start_date'], $data['end_date'], $query);
        }elseif(!empty($data['start_date']) && !empty($data['end_date'])){

//            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByPoBetweenDate($data['start_date'], $data['end_date'], $query);
        }
        elseif(!empty($data['item']) && empty($data['project']) && !empty($data['start_date']) && !empty($data['end_date'])){

            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByPoBetweenDate($data['start_date'], $data['end_date'], $query);
        }elseif(empty($data['item']) && !empty($data['project']) && !empty($data['start_date']) && !empty($data['end_date'])){
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByPoBetweenDate($data['start_date'], $data['end_date'], $query);
        }elseif(!empty($data['item']) && !empty($data['project']) && empty($data['start_date']) && empty($data['end_date'])){
            $this->handleSearchByItem($data['item'], $query);
            $this->handleSearchByProject($data['project'], $query);
        }elseif(!empty($data['item']) && empty($data['project']) && empty($data['start_date']) && empty($data['end_date'])){
            $this->handleSearchByItem($data['item'], $query);
        }elseif(empty($data['item']) && !empty($data['project']) && empty($data['start_date']) && empty($data['end_date'])){
            $this->handleSearchByProject($data['project'], $query);
        }else{
            $query->andWhere('poi.status = 9');
        }

        $query->groupBy('i.id');
        $query->orderBy('total', 'DESC');
        $itemUses = $query->getQuery()->getResult();

        foreach ($itemUses as $key => $item) {

            $statement = $connection->prepare("SELECT projects.projects_name, projects.id as projectId,
                                                MAX(purchase_orders.created_date) as dateMax,
												MIN(purchase_orders.created_date) as dateMin,
												purchase_order_items.purchase_orders as po_id,
                                                MAX(purchase_order_items.price) as projectHighest,
                                                MIN(purchase_order_items.price) as projectLowest,
                                                purchase_order_items.items as itemId,
                                                purchase_order_items.projects,
                                                purchase_order_items.price
                                                FROM purchase_order_items
                                                JOIN projects ON projects.id = purchase_order_items.projects
                                                INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
                                                WHERE purchase_order_items.items = :itemId
                                                GROUP BY purchase_order_items.projects
                                              ");
            $statement->bindValue('itemId', $item['id']);
            $statement->execute();
            $itemUses[$key]['projectSummary'] = $statement->fetchAll();

            foreach ($itemUses[$key]['projectSummary'] as $psKey => $projectSummary) {
                $itemUses[$key]['projectSummary'][$psKey]['max_price_date'] = $this->getItemPriceDate($projectSummary['projects'], $projectSummary['projectHighest']);
                $itemUses[$key]['projectSummary'][$psKey]['max_poId'] = $this->getPoIdItemPriceDate($projectSummary['projects'], $projectSummary['projectHighest']);
                $itemUses[$key]['projectSummary'][$psKey]['min_price_date'] = $this->getItemPriceDate($projectSummary['projects'], $projectSummary['projectLowest']);
                $itemUses[$key]['projectSummary'][$psKey]['min_poId'] = $this->getPoIdItemPriceDate($projectSummary['projects'], $projectSummary['projectLowest']);
                $itemUses[$key]['projectSummary'][$psKey]['last_price'] = $this->getItemPriceLast($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax']);
                $itemUses[$key]['projectSummary'][$psKey]['last_poId'] = $this->getPoIdItemPriceLast($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax']);
            }
        }

        return $itemUses;
    }

    private function getItemPriceDate($projectId, $price, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT DATE_FORMAT(created_date, '%d-%m-%Y') AS created_date FROM purchase_orders
              INNER JOIN purchase_order_items ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        return $result[0]['created_date'];
    }

    private function getPoIdItemPriceDate($projectId, $price, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_orders.id as poId FROM purchase_orders
              INNER JOIN purchase_order_items ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        return $result[0]['poId'];
    }

    private function getItemPriceLast($projectId, $itemId, $date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT price FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date = '{$date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        return $result[0]['price'];
    }

    private function getPoIdItemPriceLast($projectId, $itemId, $date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_orders.id as poId FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date = '{$date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        return $result[0]['poId'];
    }

    public function itemReport($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pri.item', 'i');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('p.projectName');
        $query->addSelect('i.itemName');
        $query->addSelect('p.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->addSelect('COUNT(poi.id) as totalUsed');
        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        if(!empty($data['item'])) {
            $this->handleSearchByItem($data['item'], $query);
        }
        if(!empty($data['project'])){
            $this->handleSearchByProject($data['project'], $query);
        }
        $query->andWhere('po.approveStatus = 3');
        $query->groupBy('i.id', 'p.id');
        $query->orderBy('i.itemName', 'ASC');

        return $query->getQuery()->getResult();
    }

    public function itemTopReport($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pri.item', 'i');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');

        $query->select('p.projectName');
        $query->addSelect('i.itemName');
        $query->addSelect('p.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->addSelect('COUNT(poi.id) as totalUsed');

        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        if(!empty($data['project'])){
            $this->handleSearchByProject($data['project'], $query);
        }
        $query->andWhere('po.approveStatus = 3');
        $query->groupBy('i.id','i.itemName');
        $query->setMaxResults(10);
        $query->orderBy('total', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function getVendorStatusReport($data)
    {
            $query = $this->createQueryBuilder('poi');
            $query->join('poi.purchaseOrder', 'po');
            $query->leftJoin('poi.receivedItems', 'ri');
            $query->leftJoin('ri.receive', 'r');
            $query->join('po.vendor', 'v');
            $query->join('po.readyForPayments', 'rfp');
            $query->join('poi.purchaseRequisitionItem', 'pri');
            $query->join('pri.purchaseRequisition', 'pr');
            $query->join('pr.project', 'p');

            $this->handleSearchBetweenApprovalDate($query, $data['start_date'], $data['end_date']);
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByVendor($data['vendor'], $query);

            $query->andWhere('po.approveStatus = 3');

            return $query;

    }
    public function getVendorStatusReportExcel($data)
    {
            $query = $this->createQueryBuilder('poi');
            $query->join('poi.purchaseOrder', 'po');
            $query->leftJoin('poi.receivedItems', 'ri');
            $query->leftJoin('ri.receive', 'r');
            $query->join('po.vendor', 'v');
            $query->join('po.readyForPayments', 'rfp');
            $query->join('poi.purchaseRequisitionItem', 'pri');
            $query->join('pri.purchaseRequisition', 'pr');
            $query->join('pr.project', 'p');

            $this->handleSearchBetweenApprovalDate($query, $data['start_date'], $data['end_date']);
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByVendor($data['vendor'], $query);

            $query->andWhere('po.approveStatus = 3');

            return $query->getQuery()->getResult();

    }

    public function getProjectSpendSubCategoryWise($purchaseRequisition)
    {
        $data= "";
        $data .= '<table class="table col-md-12" style="height:220px; border: 1px solid ghostwhite;">';
        $data .= '<thead style="background-color:#4b8df8;">';
        $data .= '<tr>
                    <th>Last Requisition Date</th>
                    <th>Item</th>
                    <th>Requisition Quantity</th>
                    <th>Last Receive Date</th>
                    <th>Order Quantity</th>
                    <th>Cost Header</th>
                    <th>SubCategory</th>
                    <th>Available stock</th>
                  </tr>';
        $data .= '</thead>';
        foreach($purchaseRequisition->getPurchaseRequisitionItems() as $purchaseRequisitionItem){

            $itemLastRequisitionDateQuantityItems = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->getItemLastRequisitionDateQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
            $itemLastReceiveDateQuantityItems     = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                ->getItemLastReceiveDateQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
            $itemAvailableStockQuantityItems      = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
                ->getItemAvailableStockQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());

            if(empty($itemLastReceiveDateQuantityItems)){
                $receivedDate = '...';
            }else{
                $receivedDate = $itemLastReceiveDateQuantityItems[0]['receivedDate']->format('Y-m-d');
            }

            if(isset($itemLastRequisitionDateQuantityItems[1])){
                $createdDate = $itemLastRequisitionDateQuantityItems[1]['createdDate']->format('Y-m-d');
                $itemName = $itemLastRequisitionDateQuantityItems[1]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[1]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[1]['orderQuantity'];
            }else{
                $createdDate = $itemLastRequisitionDateQuantityItems[0]['createdDate']->format('Y-m-d');
                $itemName = $itemLastRequisitionDateQuantityItems[0]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[0]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[0]['orderQuantity'];
            }

            if(empty($itemAvailableStockQuantityItems)){
                $itemAvailableStock = '0';
            }else{
                $itemAvailableStock = $itemAvailableStockQuantityItems[0]['stock'];
            }

            $data .= '<tr>';

            $data .= '<td>'.$createdDate.'</td>';
            $data .= '<td>'.$itemName.'</td>';
            $data .= '<td>'.$quantity.'</td>';
            $data .= '<td>'.$receivedDate.'</td>';
            $data .= '<td>'.$orderQuantity.'</td>';
            $data .= '<td>'.$purchaseRequisition->getCostHeader()->getTitle().'</td>';
            $data .= '<td>'.$purchaseRequisition->getSubcategory()->getSubCategoryName().'</td>';
            $data .= '<td>'.$itemAvailableStock.'</td>';

            $data .= '</tr>';
        }
        $data .= '</table>';

        return $data;
    }

    public function getPurchaseTypesAsArray()
    {
        $data = array();
        $types = $this->_em->getRepository('PmsSettingBundle:PurchaseType')->findAll();

        foreach ($types as $row) {
            $data[$row->getId()] = $row->getName();
        }

        return $data;
    }

    public function findPurchaseOfficerInformation($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('po.buyer', 'bu');
        $query->where('po.status = 1');

        if (!empty($data['start_date']) && !empty($data['end_date']) && !empty($data['user'])){
            $this->handleSearchBetweenApprovalDate($query, $data['start_date'], $data['end_date']);
            $query->andWhere('bu.id = :buyer');
            $query->setParameter('buyer', $data['user']);
        }elseif(!empty($data['start_date']) && !empty($data['end_date']) && empty($data['user'])){
            $this->handleSearchBetweenApprovalDate($query, $data['start_date'], $data['end_date']);
        }elseif(empty($data['start_date']) && empty($data['end_date']) && !empty($data['user'])){
            $query->andWhere('bu.id = :buyer');
            $query->setParameter('buyer', $data['user']);
        }else{
            $query->where('po.approveStatus = 9');
        }

        return $query->getQuery()->getResult();
    }

    public function getReceivingItem()
    {
        $date = date('y-m-d');
        $sql = "SELECT
          GROUP_CONCAT(DISTINCT `po`.`id` SEPARATOR ', ' ) as poid
          FROM
          `purchase_order_items` as poi
          INNER JOIN `purchase_orders` as po ON (`poi`.`purchase_orders` = `po`.`id`)
          INNER JOIN `fos_user` as u ON (`po`.`created_by` = `u`.`id`)
          WHERE poi.quantities > poi.total_order_receive_quantity
          AND po.approve_status = 3 AND po.date_of_delivered <= '$date'
          GROUP BY po.created_by";

        return $this->_em->getConnection()->fetchAll($sql);
    }

    public function totalPoItems($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->select('count(poi.id) as TotalPoItem');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
        $this->handleSearchBetweenDate($dateStartTime, $dateEndTime, $query);

        return $query->getQuery()->getResult();
    }

    public function totalMonthlyBudgetSpend($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->select('SUM(poi.amount) as totalBudgetSpend');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
        $this->handleSearchBetweenDate($dateStartTime, $dateEndTime, $query);

        return $query->getQuery()->getSingleResult();
    }

    /**
     * @param $query
     * @param $start_date
     * @param $end_date
     */
    protected function handleSearchBetweenApprovalDate($query, $start_date, $end_date)
    {
        if (!empty($start_date) && !empty($end_date)) {
            $query->andWhere('po.approvedThreeDate >= :dateAfter');
            $query->andWhere('po.approvedThreeDate <= :dateBefore');
            $query->setParameter('dateAfter', $start_date.' 00:00:01');
            $query->setParameter('dateBefore', $end_date.' 23:59:59');
        }
    }

    /**
     * @param $dateStartTime
     * @param $dateEndTime
     * @param $query
     */
    protected function handleSearchBetweenDate($dateStartTime, $dateEndTime, $query)
    {
        if (!empty($dateStartTime) && !empty($dateEndTime)) {
            $query->andWhere('po.approvedThreeDate >= :start');
            $query->andWhere('po.approvedThreeDate <= :end');

            /*$query->andWhere('po.createdDate >= :start');
            $query->andWhere('po.createdDate <= :end');*/
            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere("p.id = :project");
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $item
     * @param $query
     */
    protected function handleSearchByItem($item, $query)
    {
        if (!empty($item)) {
            $query->andWhere("i.id = :item");
            $query->setParameter('item', $item);
        }
    }

    /**
     * @param $dateStartTime
     * @param $dateEndTime
     * @param $query
     */
    protected function handleSearchByPrBetweenDate($dateStartTime, $dateEndTime, $query)
    {
        if (!empty($dateStartTime) && !empty($dateEndTime)) {
            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');
        }
    }

    /**
     * @param $dateStartTime
     * @param $dateEndTime
     * @param $query
     */
    protected function handleSearchByPoBetweenDate($dateStartTime, $dateEndTime, $query)
    {
        if (!empty($dateStartTime) && !empty($dateEndTime)) {
            $query->andWhere('po.createdDate >= :start');
            $query->andWhere('po.createdDate <= :end');
            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');
        }
    }

    /**
     * @param $vendor
     * @param $query
     */
    protected function handleSearchByVendor($vendor, $query)
    {
        if (!empty($vendor)) {
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $vendor);
        }
    }

    /**
     * @param $itemType
     * @param $query
     */
    protected function handleSearchByItemType($itemType, $query)
    {
        if (!empty($itemType)) {
            $query->andWhere('i.itemType = :itemType');
            $query->setParameter('itemType', $itemType);
        }
    }

    public function itemDetailsFromProjectSpendByPurchaseTypeReport($data)
    {

        $query = $this->createQueryBuilder('poi');
        $query->where('po.approveStatus = 3');
        $query->leftjoin('poi.purchaseOrder', 'po');
        $query->leftjoin('po.vendor', 'v');
        $query->leftjoin('po.buyer', 'bu');
        $query->leftjoin('poi.project', 'p');
        $query->leftjoin('poi.item', 'i');


        if (!empty($data['start_date']) && !empty($data['end_date'])){
            $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        }
        if(!empty($data['project'])){
            $this->handleSearchByProject($data['project'], $query);
        }
        if(!empty($data['item'])){
            $this->handleSearchByItem($data['item'], $query);
        }

        $query->orderBy('po.createdDate', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function getCompareLowestPrice($data)
    {
        $connection = $this->_em->getConnection();

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->select('i.itemName');
        $query->addSelect('i.id');
        $query->addSelect('i.itemUnit');
        $query->addSelect('SUM(poi.amount) as total');
        $query->addSelect('SUM(poi.quantity) as quantity');
        $query->where('poi.approvalStatus = 3');

        if (!empty($data['start_date']) && !empty($data['end_date'])){
            $this->handleSearchByPrBetweenDate($data['start_date'], $data['end_date'], $query);
        }

        if(!empty($data['itemType'])){
            $this->handleSearchByItemType($data['itemType'], $query);
        }else{
            $query->andWhere('poi.status = 9');
        }

        $query->groupBy('i.id', 'p.id');
        $itemUses = $query->getQuery()->getResult();

        foreach ($itemUses as $key => $item) {

            $statement = $connection->prepare("SELECT projects.projects_name, projects.id as projectId,
                                                MAX(purchase_orders.created_date) as dateMax,
												MIN(purchase_orders.created_date) as dateMin,
												purchase_order_items.purchase_orders as po_id,
                                                MAX(purchase_order_items.price) as projectHighest,
                                                MIN(purchase_order_items.price) as projectLowest,
                                                purchase_order_items.items as itemId,
                                                purchase_order_items.projects,
                                                purchase_order_items.price
                                                FROM purchase_order_items
                                                JOIN projects ON projects.id = purchase_order_items.projects
                                                INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
                                                WHERE purchase_order_items.items = :itemId AND purchase_orders.created_date >= :start_date AND purchase_orders.created_date <= :end_date
                                                GROUP BY purchase_order_items.projects
                                              ");
            $statement->bindValue('itemId', $item['id']);
            $statement->bindValue('start_date', $data['start_date']);
            $statement->bindValue('end_date', $data['end_date']);
            $statement->execute();
            $itemUses[$key]['projectSummary'] = $statement->fetchAll();

            foreach ($itemUses[$key]['projectSummary'] as $psKey => $projectSummary) {
                $itemUses[$key]['projectSummary'][$psKey]['max_price_date'] = $this->getItemPriceDateLowest($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['max_poId'] = $this->getPoIdItemPriceDateLowest($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);

                $itemUses[$key]['projectSummary'][$psKey]['max_poId_issue'] = $this->getPoIdItemPriceDateLowestIssue($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['max_poId_brand'] = $this->getPoIdItemPriceDateLowestBrand($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['max_poId_vendor'] = $this->getPoIdItemPriceDateLowestVendor($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['max_poId_area'] = $this->getPoIdItemPriceDateLowestArea($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);

                $itemUses[$key]['projectSummary'][$psKey]['min_price_date'] = $this->getItemPriceDateLowest($projectSummary['projects'], $projectSummary['projectLowest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['min_poId'] = $this->getPoIdItemPriceDateLowest($projectSummary['projects'], $projectSummary['projectLowest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['min_poId_area'] = $this->getPoIdItemPriceDateLowestArea($projectSummary['projects'], $projectSummary['projectLowest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['min_poId_issue'] = $this->getPoIdItemPriceDateLowestIssue($projectSummary['projects'], $projectSummary['projectLowest'], $data['start_date'], $data['end_date']);

                $itemUses[$key]['projectSummary'][$psKey]['min_poId_brand'] = $this->getPoIdItemPriceDateLowestBrand($projectSummary['projects'], $projectSummary['projectLowest'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['min_poId_vendor'] = $this->getPoIdItemPriceDateLowestVendor($projectSummary['projects'], $projectSummary['projectHighest'], $data['start_date'], $data['end_date']);

                $itemUses[$key]['projectSummary'][$psKey]['last_price'] = $this->getItemPriceLastLowest($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['last_poId'] = $this->getPoIdItemPriceLastLowest($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);

                $itemUses[$key]['projectSummary'][$psKey]['last_poId_brand'] = $this->getPoIdItemPriceLastLowestBrand($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['last_poId_area'] = $this->getPoIdItemPriceLastLowestArea($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['last_poId_vendor'] = $this->getPoIdItemPriceLastLowestVendor($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);
                $itemUses[$key]['projectSummary'][$psKey]['last_poId_issue'] = $this->getPoIdItemPriceLastLowestIssue($projectSummary['projects'], $projectSummary['itemId'], $projectSummary['dateMax'], $data['start_date'], $data['end_date']);
            }
        }

        return $itemUses;
    }

    public function getPurchaseHighestPrice($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.projectArea', 'pa');
        $query->join('pri.item', 'i');
        $query->join('po.createdBy', 'u');
        $query->join('po.vendor', 'v');
        $query->join('i.itemType', 'it');

        $query->select('i.itemName');
        $query->addSelect('poi.id as poiId');
        $query->addSelect('i.id');
        $query->addSelect('p.projectName');
        $query->addSelect('i.itemUnit');
        $query->addSelect('MAX(poi.price) as price');
        $query->addSelect('po.id as poNo');
        $query->addSelect('po.createdDate');
        $query->addSelect('poi.brand');
        $query->addSelect('u.username');
        $query->addSelect('v.vendorName');
        $query->addSelect('it.itemType as itemTypeName');

        $query->where('poi.approvalStatus = 3');
        $query->andWhere('po.createdDate >= :start');
        $query->andWhere('po.createdDate <= :end');
        $query->setParameter('start', $data['start_date'].' 00:00:01');
        $query->setParameter('end', $data['end_date'].' 23:59:59');
        if($data['itemType']){
            $query->andWhere('i.itemType = :itemType');
            $query->setParameter('itemType', $data['itemType']);
        }
        if( $data['area']){
            $query->andWhere('pa.id = :area');
            $query->setParameter('area', $data['area']);
        }

        $query->groupBy('i.id');

        $result = $query->getQuery()->getResult();

        $data = array();

        foreach($result as $row) {
            $data[$row['id']] = $row;
        }

        return $data;
    }

    public function getPurchaseLowestPriceOfItems($itemIds, $filterOption)
    {
        if(empty($itemIds)){
            return false;
        }

        $startMonth = $filterOption['start_date'].' 00:00:01';
        $endMonth   = $filterOption['end_date'].' 23:59:59';
        $itemType   = $filterOption['itemType'];
        $area       = $filterOption['area'];

        if(!empty($startMonth) AND !empty($endMonth) AND !empty($area)){

            if($itemType){
                $itemType = ' AND i.`item_types`='.$itemType;
            }else{
                $itemType = "";
            }

            if($area){
                $area = ' AND pj.`projects_area` ='.$area;
            }else{
                $area = "";
            }

            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare('SELECT MAX(pi.`id`) as poiId FROM `purchase_order_items` AS pi
            INNER JOIN( SELECT `items`, MIN(`price`) AS price FROM `purchase_order_items`
            INNER JOIN purchase_orders p ON purchase_order_items.purchase_orders = p.id
            INNER JOIN items i ON purchase_order_items.items = i.id
            LEFT JOIN projects pj ON purchase_order_items.projects = pj.id
            WHERE purchase_order_items.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$endMonth.'"'.$itemType .' '.$area.' GROUP BY i.id ) AS poigb ON(poigb.items=pi.`items` AND pi.price = poigb.price AND pi.`items` IN('.implode(',',$itemIds).'))
            INNER JOIN purchase_orders p ON pi.purchase_orders = p.id
            INNER JOIN items i ON pi.items = i.id
            LEFT JOIN projects pj ON pi.projects = pj.id
            WHERE pi.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$endMonth.'" ' . $itemType .' '.$area.'
            GROUP BY poigb.items , poigb.price');
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach($result as $poi ){
                $poiIds[]  = $poi['poiId'];
            }

            $query = $this->createQueryBuilder('poi');
            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('poi.purchaseOrder', 'po');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('pr.project', 'p');
            $query->leftJoin('p.projectArea', 'pa');
            $query->leftJoin('pri.item', 'i');
            $query->leftJoin('po.createdBy', 'u');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('i.itemType', 'it');

            $query->select('i.itemName');
            $query->addSelect('i.id');
            $query->addSelect('p.projectName');
            $query->addSelect('i.itemUnit');
            $query->addSelect('poi.quantity');
            $query->addSelect('poi.price as price');
            $query->addSelect('po.createdDate');
            $query->addSelect('po.id as poNo');
            $query->addSelect('poi.brand');
            $query->addSelect('u.username');
            $query->addSelect('v.vendorName');
            $query->addSelect('it.itemType as itemTypeName');
            $query->where("poi.id IN(:poiIds)");
            $query->setParameter('poiIds', $poiIds);
            $result = $query->getQuery()->getResult();

            $filterOption = array();
            foreach($result as $row) {
                $filterOption[$row['id']] = $row;
            }

            return $filterOption;
        }

    }

    public function getPurchaseLowestPrice($data, $itemIds = array())
    {

        $startMonth = $data['start_date'].' 00:00:01';
        $endMonth   = $data['end_date'].' 23:59:59';
        $itemType   = $data['itemType'];
        $area       = $data['area'];

        if(!empty($startMonth) AND !empty($endMonth) AND !empty($area)){

            if($itemType){
                $itemType = ' AND i.`item_types`='.$itemType;
            }else{
                $itemType = "";
            }

            if($area){
                $area = ' AND pj.`projects_area` ='.$area;
            }else{
                $area = "";
            }



            $itemIds = array();
            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare('SELECT DISTINCT i.id as item FROM purchase_order_items AS poi
            INNER JOIN purchase_orders p ON poi.purchase_orders = p.id
            INNER JOIN items i ON poi.items = i.id
            LEFT JOIN item_types it ON i.item_types = it.id
            LEFT JOIN projects pj ON poi.projects = pj.id
            WHERE  poi.approval_status = 3  AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$endMonth.' " ' . $itemType .' '.$area);
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach($result as $poi ){
                $itemIds[]  = $poi['item'];
            }

            if(empty($result)){
                return false;
            }

            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare('SELECT MAX(pi.`id`) as poiId FROM `purchase_order_items` AS pi
            INNER JOIN( SELECT `items`, MIN(`price`) AS price FROM `purchase_order_items`
            INNER JOIN purchase_orders p ON purchase_order_items.purchase_orders = p.id
            INNER JOIN items i ON purchase_order_items.items = i.id
            LEFT JOIN projects pj ON purchase_order_items.projects = pj.id
            WHERE purchase_order_items.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$endMonth.'"'.$itemType .' '.$area.' GROUP BY i.id ) AS poigb ON(poigb.items=pi.`items` AND pi.price = poigb.price AND pi.`items` IN('.implode(',',$itemIds).'))
            INNER JOIN purchase_orders p ON pi.purchase_orders = p.id
            INNER JOIN items i ON pi.items = i.id
            LEFT JOIN projects pj ON pi.projects = pj.id
            WHERE pi.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$endMonth.'" ' . $itemType .' '.$area.'
            GROUP BY poigb.items , poigb.price');
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach($result as $poi ){
                $poiIds[]  = $poi['poiId'];
            }

            $query = $this->createQueryBuilder('poi');
            $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
            $query->leftJoin('poi.purchaseOrder', 'po');
            $query->leftJoin('pri.purchaseRequisition', 'pr');
            $query->leftJoin('pr.project', 'p');
            $query->leftJoin('p.projectArea', 'pa');
            $query->leftJoin('pri.item', 'i');
            $query->leftJoin('po.createdBy', 'u');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('i.itemType', 'it');

            $query->select('i.itemName');
            $query->addSelect('i.id');
            $query->addSelect('p.projectName');
            $query->addSelect('i.itemUnit');
            $query->addSelect('poi.quantity');
            $query->addSelect('poi.price as price');
            $query->addSelect('po.createdDate');
            $query->addSelect('po.id as poNo');
            $query->addSelect('poi.brand');
            $query->addSelect('u.username');
            $query->addSelect('v.vendorName');
            $query->addSelect('it.itemType as itemTypeName');
            $query->where("poi.id IN(:poiIds)");
            $query->setParameter('poiIds', $poiIds);
            $result = $query->getQuery()->getResult();

            $data = array();
            foreach($result as $row) {
                $data[$row['id']] = $row;
            }

            return $data;
        }

    }

    public function getPurchaseLastPrice($data)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.projectArea', 'pa');
        $query->join('pri.item', 'i');
        $query->join('po.createdBy', 'u');
        $query->join('po.vendor', 'v');
        $query->leftJoin('i.itemType', 'it');

        $query->select('i.itemName');
        $query->addSelect('poi.id as poiId');
        $query->addSelect('i.id');
        $query->addSelect('p.projectName');
        $query->addSelect('po.id as poNo');
        $query->addSelect('i.itemUnit');
        $query->addSelect('poi.price');
        $query->addSelect('max(po.createdDate) as createdDate');
        $query->addSelect('poi.brand');
        $query->addSelect('u.username');
        $query->addSelect('v.vendorName');
        $query->addSelect('it.itemType as itemTypeName');

        $query->where('poi.approvalStatus = 3');
        $query->andWhere('po.createdDate >= :start');
        $query->andWhere('po.createdDate <= :end');
        $query->setParameter('start', $data['start_date'].' 00:00:01');
        $query->setParameter('end', $data['end_date'].' 23:59:59');
        if($data['itemType']){
            $query->andWhere('i.itemType = :itemType');
            $query->setParameter('itemType', $data['itemType']);
        }
        if( $data['area']){
            $query->andWhere('pa.id = :area');
            $query->setParameter('area', $data['area']);
        }

        $query->groupBy('i.id');

        $result = $query->getQuery()->getResult();

        $data = array();

        foreach($result as $row) {
            $data[$row['id']] = $row;
        }

        return $data;
    }




    private function getItemPriceDateLowest($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT DATE_FORMAT(created_date, '%d-%m-%Y') AS created_date FROM purchase_orders
              INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['created_date'] : '';

        return $result;
    }

    private function getPoIdItemPriceDateLowest($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_orders.id as poId FROM purchase_orders
              INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['poId'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestIssue($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
               SELECT fos_user.username as issueBy FROM purchase_orders
              INNER JOIN fos_user ON fos_user.id = purchase_orders.created_by
              INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['issueBy'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestVendor($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT vendors.vendors_name as vendorName FROM purchase_orders
              INNER JOIN vendors ON vendors.id = purchase_orders.vendors
              INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['vendorName'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestBrand($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_order_items.brand as brand FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['brand'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestArea($projectId, $price, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT areas.areas_name as areasName FROM purchase_order_items
              INNER JOIN projects ON projects.id = purchase_order_items.projects
              INNER JOIN areas ON areas.id = projects.projects_area
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.projects = '{$projectId}' AND purchase_order_items.price = '{$price}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('price', $price);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['areasName'] : "---";

        return $result;
    }

    private function getItemPriceLastLowest($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT price FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['price'] : "---";

        return $result;
    }

    private function getPoIdItemPriceLastLowest($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_orders.id as poId FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['poId'] : "---";

        return $result;
    }

    private function getPoIdItemPriceLastLowestVendor($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT vendors.vendors_name as vendorName FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              INNER JOIN vendors ON vendors.id = purchase_orders.vendors
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['vendorName'] : "---";

        return $result;
    }

    private function getPoIdItemPriceLastLowestIssue($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT fos_user.username as issueBy FROM purchase_orders
              INNER JOIN fos_user ON fos_user.id = purchase_orders.created_by
              INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['issueBy'] : "---";

        return $result;
    }

    private function getPoIdItemPriceLastLowestBrand($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_order_items.brand as brand FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['brand'] : "---";

        return $result;
    }

    private function getPoIdItemPriceLastLowestArea($projectId, $itemId, $date, $start_date, $end_date, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT areas.areas_name as areasName FROM purchase_order_items
              INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              INNER JOIN projects ON projects.id = purchase_order_items.projects
              INNER JOIN areas ON areas.id = projects.projects_area
              WHERE purchase_order_items.items = '{$itemId}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$start_date}' AND purchase_orders.created_date <= '{$end_date}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('items', $itemId);
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['areasName'] : "---";

        return $result;
    }

    public function trendRequisitionReport($data)
    {
        if (!empty($data['year']) && !empty($data['item']) && !empty($data['project'])) {

            for ($i = 1; $i < 13; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $trendPurchaseMonthReport[] = $this->trendPurchaseMonthReport($data['item'], $data['project'], $dateStart, $dateEnd);
            }

            return $trendPurchaseMonthReport;
        }
    }

    private function trendPurchaseMonthReport($item, $project, $dateStart, $dateEnd)
    {
        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.item', 'i');
        $query->join('poi.project', 'p');
        $query->select('SUM(poi.quantity) as itemPoQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('p.projectName');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);
        $this->handleSearchBetweenDate($dateStart, $dateEnd, $query);

        return $query->getQuery()->getSingleResult();
    }

    public function getProjectSpendSubCategoryWiseSingle($subCategoryID, $month)
    {
        $start_date = date('Y-m-01',(strtotime ($month) ));
        $end_date = date('Y-m-t',(strtotime ($start_date) ));

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.subCategory', 'sc');
        $query->join('pr.project', 'p');

        $query->select('SUM(poi.amount) as spendAmountForSubCategory');
        $query->addSelect('p.projectName');

        $query->where('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('sc.id = :subCategoryID');
        $query->setParameter('subCategoryID', $subCategoryID);
        $this->handleSearchBetweenDate($start_date, $end_date, $query);
        $query->groupBy('pr.project');

        return $query->getQuery()->getResult();
    }

    public function getLowestTwoMonthPriceReport($itemType,$area, $startMonth, $endMonth)
    {

        if(!empty($startMonth) AND !empty($endMonth) AND !empty($area)){

            if($itemType){
                $itemType = ' AND i.`item_types`='.$itemType;
            }else{
                $itemType = "";
            }

            $itemIds = array();
            $startMonth = $startMonth.' 00:00:01';
            $lastMonth = $endMonth.' 23:59:59';
            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare('SELECT DISTINCT i.id as item FROM purchase_order_items AS poi
            INNER JOIN purchase_orders p ON poi.purchase_orders = p.id
            INNER JOIN items i ON poi.items = i.id
            LEFT JOIN item_types it ON i.item_types = it.id
            LEFT JOIN projects pj ON poi.projects = pj.id
            WHERE  poi.approval_status = 3  AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$lastMonth.' " ' . $itemType .'  AND pj.`projects_area` = '.$area.'');
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach($result as $poi ){
                $itemIds[]  = $poi['item'];
            }

            if(empty($result)){
                return false;
            }

            $stmt = $this->getEntityManager()
                ->getConnection()
                ->prepare('SELECT MAX(pi.`id`) as poiId FROM `purchase_order_items` AS pi
            INNER JOIN( SELECT `items`, MIN(`price`) AS price FROM `purchase_order_items`
            INNER JOIN purchase_orders p ON purchase_order_items.purchase_orders = p.id
            INNER JOIN items i ON purchase_order_items.items = i.id
            LEFT JOIN projects pj ON purchase_order_items.projects = pj.id
            WHERE purchase_order_items.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$lastMonth.'"'.$itemType. ' AND pj.`projects_area` = '.$area.' GROUP BY i.id ) AS poigb ON(poigb.items=pi.`items` AND pi.price = poigb.price AND pi.`items` IN('.implode(',',$itemIds).'))
            INNER JOIN purchase_orders p ON pi.purchase_orders = p.id
            INNER JOIN items i ON pi.items = i.id
            LEFT JOIN projects pj ON pi.projects = pj.id
            WHERE pi.approval_status = 3 AND p.`created_date` >= "'.$startMonth.'" AND  p.`created_date` <= "'.$lastMonth.'"'.$itemType. ' AND pj.`projects_area` = '.$area.'
            GROUP BY poigb.items , poigb.price');
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach($result as $poi ){
                $poiIds[]  = $poi['poiId'];
            }

            $query = $this->createQueryBuilder('poi');
            $query->join('poi.purchaseRequisitionItem', 'pri');
            $query->join('poi.purchaseOrder', 'po');
            $query->join('pri.purchaseRequisition', 'pr');
            $query->join('pr.project', 'p');
            $query->join('p.projectArea', 'pa');
            $query->join('pri.item', 'i');
            $query->join('po.createdBy', 'u');
            $query->join('po.vendor', 'v');

            $query->select('i.itemName');
            $query->addSelect('i.id');
            $query->addSelect('p.projectName');
            $query->addSelect('i.itemUnit');
            $query->addSelect('poi.quantity');
            $query->addSelect('poi.price as price');
            $query->addSelect('po.createdDate');
            $query->addSelect('po.id as poNo');
            $query->addSelect('poi.brand');
            $query->addSelect('u.username');
            $query->addSelect('v.vendorName');
            $query->where("poi.id IN(:poiIds)");
            $query->setParameter('poiIds', $poiIds);
            $result = $query->getQuery()->getResult();

            $data = array();
            foreach($result as $row) {
                $data[$row['id']] = $row;
            }

            return $data;
        }


    }

    public function getLowestTwoMonthPriceReportPre($itemType, $lastMonth, $lastMonthLastDay)
    {
        $connection = $this->_em->getConnection();

        $query = $this->createQueryBuilder('poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pri.item', 'i');
        $query->select('i.itemName');
        $query->addSelect('i.id');
        $query->addSelect('i.itemUnit');
        $query->addSelect('SUM(poi.amount) as total');
        $query->addSelect('SUM(poi.quantity) as quantity');
        $query->where('poi.approvalStatus = 3');

        $query->andWhere('pr.createdDate >= :start');
        $query->andWhere('pr.createdDate <= :end');
        $query->setParameter('start', $lastMonth.' 00:00:01');
        $query->setParameter('end', $lastMonthLastDay.' 23:59:59');

        $query->andWhere('i.itemType = :itemType');
        $query->setParameter('itemType', $itemType);

        $query->groupBy('i.id', 'p.id');
        $query->orderBy('total', 'DESC');
        $itemUsesPre = $query->getQuery()->getResult();

        foreach ($itemUsesPre as $key => $item) {

            $statementPre = $connection->prepare("SELECT projects.projects_name, projects.id as projectId,
                                                MIN(purchase_orders.created_date) as dateMin,
												purchase_order_items.purchase_orders as po_id,
                                                MIN(purchase_order_items.price) as projectLowest,
                                                purchase_order_items.items as itemId,
                                                purchase_order_items.projects,
                                                purchase_order_items.price
                                                FROM purchase_order_items
                                                JOIN projects ON projects.id = purchase_order_items.projects
                                                INNER JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
                                                WHERE purchase_order_items.items = :itemId AND purchase_orders.created_date >= :start_date AND purchase_orders.created_date <= :end_date
                                                GROUP BY purchase_order_items.projects
                                              ");
            $statementPre->bindValue('itemId', $item['id']);
            $statementPre->bindValue('start_date', $lastMonth.' 00:00:01');
            $statementPre->bindValue('end_date', $lastMonthLastDay.' 23:59:59');
            $statementPre->execute();
            $itemUsesPre[$key]['projectSummary'] = $statementPre->fetchAll();

            foreach ($itemUsesPre[$key]['projectSummary'] as $psKey => $projectSummary) {
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_price_date'] = $this->getItemPriceDateLowest1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_poId'] = $this->getPoIdItemPriceDateLowest1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_poId_project'] = $this->getPoIdItemPriceDateLowestArea1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_poId_issue'] = $this->getPoIdItemPriceDateLowestIssue1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_poId_brand'] = $this->getPoIdItemPriceDateLowestBrand1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
                $itemUsesPre[$key]['projectSummary'][$psKey]['pre_min_poId_vendor'] = $this->getPoIdItemPriceDateLowestVendor1($projectSummary['projects'], $projectSummary['projectLowest'], $lastMonth, $lastMonthLastDay);
            }
        }

        return $itemUsesPre;
    }

    private function getItemPriceDateLowest1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT created_date FROM purchase_orders
              LEFT JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
               AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['created_date'] : '';

        return $result;
    }

    private function getPoIdItemPriceDateLowest1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_orders.id as poId FROM purchase_orders
              LEFT JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
             AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['poId'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestIssue1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
               SELECT fos_user.username as issueBy FROM purchase_orders
              INNER JOIN fos_user ON fos_user.id = purchase_orders.created_by
              LEFT JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
             AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['issueBy'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestVendor1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT vendors.vendors_name as vendorName FROM purchase_orders
              INNER JOIN vendors ON vendors.id = purchase_orders.vendors
              LEFT JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['vendorName'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestBrand1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT purchase_order_items.brand as brand FROM purchase_order_items
              LEFT JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.price = '{$price}' AND purchase_order_items.projects = '{$projectId}'
              AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('price', $price);
        $statement->bindValue('projectId', $projectId);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['brand'] : "---";

        return $result;
    }

    private function getPoIdItemPriceDateLowestArea1($projectId, $price, $currentMonth, $currentMonthLastDay, $order = 'DESC')
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("
              SELECT projects.projects_name as projectName FROM purchase_order_items
              INNER JOIN projects ON projects.id = purchase_order_items.projects
              INNER JOIN areas ON areas.id = projects.projects_area
              LEFT JOIN purchase_orders ON purchase_orders.id = purchase_order_items.purchase_orders
              WHERE purchase_order_items.projects = '{$projectId}' AND purchase_order_items.price = '{$price}'
              AND purchase_orders.created_date >= '{$currentMonth}' AND purchase_orders.created_date <= '{$currentMonthLastDay}'
              LIMIT 1
          ");

        // ORDER BY purchase_order_items.created_date :order
        $statement->bindValue('projectId', $projectId);
        $statement->bindValue('price', $price);
//        $statement->bindValue('start_date', $currentMonth.' 00:00:01');
//        $statement->bindValue('end_date', $currentMonthLastDay.' 23:59:59');
        $statement->bindValue('order', $order);
        $statement->execute();
        $result = $statement->fetchAll();

        $result = $result ? $result[0]['projectName'] : "---";

        return $result;
    }

    public function getPurchaseOrderItemList($type = 'all',$month, $returnQuery = true)
    {

        $query = $this->createQueryBuilder('poi');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->join('poi.item', 'i');

        $query->select('i.itemName');
        $query->addSelect('po.id');
        $query->addSelect('po.createdDate');
        $query->addSelect('po.totalOrderItemQuantity');
        $query->addSelect('i.itemUnit');
        $query->orderBy('po.createdDate', 'desc');

        if (!empty($month) and $month != 1) {

            list($monthStart,$monthEnd) = $this->monthStartEnd($month);

            if (!empty($monthStart) && !empty($monthEnd)) {

                $query->andWhere('po.createdDate >= :start');
                $query->andWhere('po.createdDate <= :end');
                $query->setParameter('start', $monthStart.' 00:00:00');
                $query->setParameter('end', $monthEnd.' 23:59:59');
            }
        }

        $this->handleOpenTypeFilter($type, $query);

        $this->handleApproveTypeFilter($type,$query);

        $this->handleInProgressTypeFilter($type, $query);

        $this->handleCloseTypeFilter($type, $query);

        $this->handleHoldTypeFilter($type, $query);

        $this->handleAmendmentTypeFilter($type, $query);

        $this->handleCancelTypeFilter($type, $query);

        $this->handleCloseIndividualTypeFilter($type, $query);



        if ($returnQuery) {
            return $query;
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleOpenTypeFilter($type, $query)
    {
        if ($type == 'open') {

            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 0 OR po.approveStatus = 1 OR po.approveStatus = 2');
        }
    }
    protected function handleCloseIndividualTypeFilter($type, $query)
    {
        if ($type == 'close-individual') {
            $query->addSelect('poic.quantity');
            $query->innerJoin('poi.purchaseOrderItemClose','poic');
            $query->andWhere('po.status != 6');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCloseTypeFilter($type, $query)
    {
        if ($type == 'close') {
            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.totalOrderReceiveQuantity >= po.totalOrderItemQuantity');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleHoldTypeFilter($type, $query)
    {
        if ($type == 'hold') {
            $query->andWhere('po.status = :hold');
            $query->setParameter('hold', 5);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancelTypeFilter($type, $query)
    {
        if ($type == 'cancel') {
            $query->andWhere('po.status = :cancel');
            $query->setParameter('cancel', 6);
        }
    }

    public function getByAmendment()
    {
        $query = $this->createQueryBuilder('poi');
        $query->leftJoin('poi.purchaseOrder','po');
        $query->select('po.id');
        $query->addSelect('poi.amendmentRefPo');
        $query->addSelect('SUM(poi.quantity) AS TotalUpdateQuantity');
        $query->andWhere('poi.amendment = 7');
        $query->groupBy('poi.amendmentRefPo');
        return $query->getQuery()->getResult();
    }

    public function getLowestPriceAmongProject(PurchaseOrder $purchaseOrder)
    {

        foreach($purchaseOrder->getPurchaseOrderItems() as $poi ){
            $itemId[]  = $poi->getItem()->getId();
        }

        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare('SELECT MAX(poi.`id`) as poiId
                       FROM
                      `purchase_order_items` AS poi
                       INNER JOIN( SELECT `items`, MIN(`price`) AS price FROM `purchase_order_items`
                       GROUP BY purchase_order_items.items
                       ) AS poigb
                       ON(poigb.items=poi.`items` AND poi.price =  poigb.price AND  poi.`items` IN('.  implode(',', $itemId ) .') )
                       GROUP BY poigb.price');
        $stmt->execute();
        $result = $stmt->fetchAll();
        foreach($result as $poi ){
            $poiIds[]  = $poi['poiId'];
        }
        $query = $this->createQueryBuilder('poi')
                    ->select('poi.id')
                    ->addSelect('i.itemName')
                    ->addSelect('pon.name as purchaseType')
                    ->addSelect('poi.price')
                    ->addSelect('p.id as pId')
                    ->addSelect('po.id as poId')
                    ->addSelect('p.projectName')
                    ->addSelect('i.id as itemId')
                    ->addSelect('po.refNo as refNo')
                    ->join('poi.project','p')
                    ->join('poi.item', 'i')
                    ->join('poi.purchaseOrder', 'po')
                    ->join('po.poNonpo', 'pon')
                    ->where("poi.id IN(:poiIds)")
                    ->setParameter('poiIds', $poiIds)
                    ->orderBy('i.itemName', 'ASC');
        $query = $query->getQuery();
        $purchaseOrderItems = $query->getResult();
        $data = array();
        foreach($purchaseOrderItems as $poi){
           $data[$poi['itemId']] = $poi;
        }
        return $data;
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleAmendmentRefTypeFilter($type, $query)
    {
        if ($type == 'amendment-reference') {
            $query->andWhere('po.status = :status');
            $query->setParameter('status', 8);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    private function handleInProgressTypeFilter($type, $query)
    {
        if ($type == 'in-progress') {

            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.totalOrderReceiveQuantity is not null');
            $query->andWhere('po.totalOrderItemQuantity > po.totalOrderReceiveQuantity');
        }
    }
    /**
     * @param $type
     * @param $query
     */
    private function handleApproveTypeFilter($type, $query)
    {

        if ($type == 'approve') {

            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.status = 1');
            $query->andWhere('po.totalOrderReceiveQuantity is null');
        }
    }

    protected function handleAmendmentTypeFilter($type, $query)
    {
        if ($type == 'amendment') {
             $query->andWhere('po.amendmentStatus = :status');
//            $query->andWhere('poi.amendment = :status');
          //  $query->groupBy('poi.purchaseOrder');
            $query->setParameter('status', 7);
        }
    }
    protected function monthStartEnd($data)
    {
        $month      = $data["month"];
        $start_date = $month.' 00:00:00';
        $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));

        return array($start_date, $end_date);

    }


    public function getPurchaseTypeSubCategoryItemWise($data)
    {
        $project = $data['project'];
        $subCategory = $data['subCategory'];
        $start = $data['startDate'];
        $end = $data['endDate'];

        $query = $this->createQueryBuilder('poi');
        $query->innerJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poi');
        $query->where('po.approveStatus = 3');
        $query->where('sc.id ='. $subCategory);
        $this->handleSearchByProject($project, $query);
        $this->handleSearchBetweenDate($start, $end, $query);
        $query->orderBy('poi.id', 'DESC');

        $results = $query->getQuery()->getResult();
        if ($results) {
            return $results;
        }

    }

    public function poCloseQty($data){

        $query = $this->createQueryBuilder('poi');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->join('poi.item', 'i');
        $query->join('i.category', 'c');
        $query->join('poi.project', 'p');
        $query->innerJoin('poi.purchaseOrderItemClose','poic');
        $query->select('i.id as itemId');
        $query->addSelect('SUM(poic.quantity) as closeQty');
        $query->where('po.status != 6');
        $query->groupBy('i.id');
        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByCategory($data['category'],$query);
        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);

        $results =  $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['itemId']] = $row;
        }
        return $data;
    }
    private function handleSearchByCategory($category, $query)
    {

        if (!empty($category)) {
            $query->andWhere('c.id = :category');
            $query->setParameter('category', $category);
        }
    }
}
