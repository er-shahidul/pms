<?php

namespace Pms\CoreBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Pms\CoreBundle\Entity\PurchaseRequisition;
use Pms\UserBundle\Entity\User;

/**
 * PurchaseRequisitionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRequisitionRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function prNoAutoComplete($prNo,$user)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('pr.id');
        $query->where($query->expr()->like("pr.id", "'%$prNo%'"  ));

        $this->checkPrByUserRoleWise($user, $query);

        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function prRefAutoComplete($prRef,$user)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('pr.refNo as id');
        $query->addSelect('pr.refNo as text');
        $query->where($query->expr()->like("pr.refNo", "'%$prRef%'"  ));

        $this->checkPrByUserRoleWise($user, $query);

        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();

    }

    public function getPurchaseRequisitionSearch(User $user, $data, $type = 'all', $month=null,$returnQuery = true)
    {

        $query = $this->createQueryBuilder('pr');

        if (!empty($data['pr'])) {
            $query->andWhere('pr.id IN(:prNo)');
            $query->setParameter('prNo', $data['pr']);
        }

        if (!empty($data['prRef'])) {

            $query->andWhere('pr.refNo IN(:prNo)');
            $query->setParameter('prNo', $data['prRef']);
        }

        if (!empty($data['item'])) {

            $query->join('pr.purchaseRequisitionItems', 'pri');
            $query->join('pri.item', 'i');
            $query->where('i.id IN(:id)');
            $query->setParameter('id', $data['item']);

        }

            if (!empty($month) and $month != 1) {

                list($monthStart,$monthEnd) = $this->monthStartEnd($month);

                if (!empty($monthStart) && !empty($monthEnd)) {

                    $query->andWhere('pr.createdDate >= :start');
                    $query->andWhere('pr.createdDate <= :end');
                    $query->setParameter('start', $monthStart.' 00:00:00');
                    $query->setParameter('end', $monthEnd.' 23:59:59');
                }
            }

        $this->checkPrByUserRoleWise($user, $query);

        $this->handleOpenTypeFilter($type, $query);

        $this->handleApproveTypeFilter($type, $query);

        $this->handleInProgressTypeFilter($type, $query);

        $this->handlePoIssuedTypeFilter($type, $query);

        $this->handleHoldTypeFilter($type, $query);

        $this->handleCancelTypeFilter($type, $query);

        $this->handleCloseTypeFilter($type, $query);

        $this->handleClosedItemTypeFilter($type, $query);

        if ($returnQuery) {
            return $query;
        }

        return $query->getQuery()->getResult();
    }



    public function accountReport($data)
    {
        if (empty($data)) {
            return array();
        }
//var_dump($data);die;
        $query = $this->createQueryBuilder('pr');
        $query->select('pr.id');
        $query->addSelect('po.id');
        $query->addSelect('po.createdDate');
        $query->addSelect('po.netTotal');
        $query->addSelect('r.id as receiveId');
        $query->addSelect('r.receivedDate');
        $query->addSelect('c.id as categoryId');
        $query->addSelect('sc.id as sCategoryId');
        $query->addSelect('ch.id as costId');
        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByCategory($data['category'], $query);
        $this->handleSearchBySubCategory($data['subCategory'], $query);
        $this->handleSearchByCostHeader($data['costHeader'], $query);
        $query->andwhere('pr.createdDate = :start_date');
        $query->setParameter('start_date', $data['start_date']);
        $query->join('pr.purchaseRequisitionItems', 'pri');
        $query->join('pr.costHeader', 'ch');
        $query->join('pr.category', 'c');
        $query->join('c.subCategories', 'sc');
        $query->join('pri.purchaseOrderItems', 'poi');
        $query->join('poi.receivedItems', 'ri');
        $query->join('poi.purchaseOrder', 'po');
        $query->join('ri.receive', 'r');

        return $query->getQuery()->getResult();
    }
    public function accountReport1($data)
    {

        if(!empty($data)){
            $query = $this->createQueryBuilder('pr');
            $query->select('pr.id');
            $query->addSelect('po.id');
            $query->addSelect('po.createdDate');
            $query->addSelect('po.netTotal');
            $query->addSelect('r.id as receiveId');
            $query->addSelect('r.receivedDate');
            $query->leftJoin('pr.project','p');
            $query->leftJoin('pr.purchaseRequisitionItems', 'pri');
            $query->leftJoin('pr.costHeader', 'ch');
            $query->leftJoin('pr.category', 'c');
            $query->leftJoin('c.subCategories', 'sc');
            $query->leftJoin('pri.purchaseOrderItems', 'poi');
            $query->leftJoin('poi.receivedItems', 'ri');
            $query->leftJoin('poi.purchaseOrder', 'po');
            $query->leftJoin('ri.receive', 'r');

            if(!empty($data['project'])){
                $this->handleSearchByProject($data['project'], $query);
            }
            if(!empty($data['category'])){
                $this->handleSearchByCategory($data['category'], $query);
            }
            if(!empty($data['subCategory'])){
                $this->handleSearchBySubCategory($data['subCategory'], $query);
            }
            if(!empty($data['costHeader'])){
                $this->handleSearchByCostHeader($data['costHeader'], $query);
            }
            if(!empty($data['start_date'])){

                $query->andWhere('pr.createdDate >= :start');
                $query->andWhere('pr.createdDate <= :end');
                $query->setParameter('start', $data['start_date'].' 00:00:01');
                $query->setParameter('end', $data['start_date'].' 23:59:59');
            }

            return $query->getQuery()->getResult();
        } else{
            return array();
        }
    }

    public function systemUsagesSummaryReport($data)
    {
        $totalPrItemApproved = array();
        $totalItemClaimed = array();
//        $totalPoIssued = array();
        $totalPoItems = array();
        $totalDeliveredItem = array();
        $totalPrRaised = array();
        $totalPrApproved = array();
        $totalPoQuantity = array();
        $month = array(
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December');

        if(!empty($data)){

            for($i=1;$i<13;$i++){

                $dateStart             = date('Y-'. $i .'-d 00:00:01', (strtotime($data['year'])));
                $dateEnd               = date('Y-'. $i .'-t 23:59:59', (strtotime($data['year'])));

                $totalPrRaised[] = $this->totalPrRaised($dateStart, $dateEnd);
                $totalPrApproved[] = $this->totalPrApproved($dateStart, $dateEnd);

                $totalPrItemApproved[] = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                                              ->totalPrItemsApproved($dateStart, $dateEnd);
                $totalItemClaimed[]    = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                                              ->totalItemClaimed($dateStart, $dateEnd);
//                $totalPoIssued[]       = $this->_em->getRepository('PmsCoreBundle:PurchaseOrder')
                $totalPoQuantity[]  = $this->_em->getRepository('PmsCoreBundle:PurchaseOrder')
                    ->totalPoQuantity($dateStart, $dateEnd);
//                                              ->totalPoIssued($dateStart, $dateEnd);
                $totalPoItems[]        = $this->_em->getRepository('PmsCoreBundle:PurchaseOrderItem')
                                              ->totalPoItems($dateStart, $dateEnd);
                $totalDeliveredItem[]  = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                                              ->totalDeliveredItem($dateStart, $dateEnd);
            }
        }

        return array($totalPrItemApproved, $totalItemClaimed, $totalPoItems, $totalDeliveredItem, $totalPrRaised, $totalPrApproved, $month,$totalPoQuantity);
    }

    public function totalPrRaised($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('count(pr.id) as TotalPrRaised');
        //$query->where('pr.status != 6 and pr.status !=7');
        $this->handleSearchBetweenDate($query, $dateStartTime, $dateEndTime);

        return $query->getQuery()->getResult();
    }

    public function totalPrApproved($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('count(pr.id) as TotalPrApproved');
        $query->where('pr.approveStatus = 3');
        $query->andWhere('pr.status = 1');
        $this->handleSearchBetweenDate($query, $dateStartTime, $dateEndTime);

        return $query->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @param $query
     */
    protected function checkPrByUserRoleWise(User $user, $query)
    {
        if($user->hasRole("ROLE_SUPER_ADMIN")){
            $query->join('pr.project', 'p');
            $query->leftJoin('pr.subCategory', 'sc');
            $query->orderBy('pr.createdDate', 'desc');
        }
       /* elseif(($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_ONE")
                and $user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_TWO")
                and $user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_THREE"))
            or ($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_TWO") and $user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_THREE"))
            or ($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_ONE") and $user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_THREE"))
            or ($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_ONE") and $user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_TWO"))){
            $query->orderBy('pr.createdDate', 'desc');
            $query->join('pr.project', 'p');
            $query->join('p.users', 'u');
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }*/
        elseif($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_THREE")){

            $query->orderBy('pr.createdDate', 'desc');
            $query->join('pr.subCategory', 'sc');
            $query->join('sc.head', 'u');
            $query->join('pr.project', 'p');
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
        elseif($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_TWO")){

            $query->orderBy('pr.createdDate', 'desc');
            $query->join('pr.subCategory', 'sc');
            $query->join('sc.subHead', 'u');
            $query->join('pr.project', 'p');
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
        elseif($user->hasRole("ROLE_PURCHASE_REQUISITION_APPROVE_ONE")){

            $query->orderBy('pr.createdDate', 'desc');
            $query->join('pr.project', 'p');
            $query->join('p.users', 'u');
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

    else{

            $query->orderBy('pr.createdDate', 'desc');
            $query->join('pr.project', 'p');
            $query->join('p.users', 'u');
            $query->join('pr.subCategory', 'sc');
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleOpenTypeFilter($type, $query)
    {
        if ($type == 'open') {
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 0 OR pr.approveStatus = 1 OR pr.approveStatus = 2');

            /*$query->andWhere('pr.status = :create or pr.approveStatus = :approveOne or pr.approveStatus = :approveTwo');
            $query->andWhere('pr.status != :hold');
            $query->andWhere('pr.status != :cancel');
            $query->andWhere('pr.approveStatus != :approveThree');
            $query->setParameter('approveThree', 3);
            $query->setParameter('hold', 5);
            $query->setParameter('cancel', 6);
            $query->setParameter('create', 1);
            $query->setParameter('approveOne', 1);
            $query->setParameter('approveTwo', 2);*/
        }
    }

    private function handleApproveTypeFilter($type, $query)
    {
        if ($type == 'approve') {

            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.totalRequisitionItemClaimed = 0');
            $query->andWhere('pr.totalOrderItemQuantity = 0');
        }
    }

    private function handleInProgressTypeFilter($type, $query)
    {
        if ($type == 'in-progress') {
            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.totalRequisitionItemClaimed != 0');
            $query->andWhere('pr.totalRequisitionItemQuantity > pr.totalOrderItemQuantity');
            $query->andWhere('pr.totalRequisitionItemClaimed <= pr.totalRequisitionItem');
        }
    }

    private function handlePoIssuedTypeFilter($type, $query)
    {
        if ($type == 'po-issued') {

            $query->andWhere('pr.status = 1');
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.totalOrderItemQuantity >= pr.totalRequisitionItemQuantity');

        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleHoldTypeFilter($type, $query)
    {
        if ($type == 'hold') {
            $query->andWhere('pr.status = 5');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancelTypeFilter($type, $query)
    {

        if ($type == 'cancel') {

            $query->andWhere('pr.status = 6');
        }
    }
    /**
     * @param $type
     * @param $query
     */
    protected function handleCloseTypeFilter($type, $query)
    {
        if ($type == 'close') {
            $query->andWhere('pr.status = 7');
        }
    }

    public function getItemLastQuantity1(PurchaseRequisition $purchaseRequisition)
    {
        $data= "";
        $data .= '<table class="table-bordered table-striped table-condensed flip-content">';
        $data .= '<thead class="flip-content" style="background: #4b8df8">';
        $data .= '<tr>
                    <th class="numeric">Item</th>
                    <th class="numeric">PR</th>
                    <th class="numeric">Date</th>
                    <th class="numeric">PR Qty</th>
                    <th class="numeric">Receive Date</th>
                    <th class="numeric">PO Qty</th>
                    <th class="numeric">Cost Header</th>
                    <th class="numeric">Status</th>
                    <th class="numeric">Stock</th>
                  </tr>';
        $data .= '</thead>';
        foreach($purchaseRequisition->getPurchaseRequisitionItems() as $purchaseRequisitionItem) {


            $itemLastRequisitionDateQuantityItems = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                                                              ->getItemLastRequisitionDateQuantityItems(
                                                              $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem(),$purchaseRequisition->getId());

            $itemLastReceiveDateQuantityItems     = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                                                              ->getItemLastReceiveDateQuantityItems
                                                              ($purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
            $itemAvailableStockQuantityItems      = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
                                                              ->getItemAvailableStockQuantityItems(
                                                              $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());

            if(empty($itemLastReceiveDateQuantityItems)){
                $receivedDate = '...';
            }else{
                $receivedDate = $itemLastReceiveDateQuantityItems[0]['receivedDate']->format('d M Y');
            }

            if(isset($itemLastRequisitionDateQuantityItems[1])){
                $prId = $itemLastRequisitionDateQuantityItems[1]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[1]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[1]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[1]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[1]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[1]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[1]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }
            elseif(isset($itemLastRequisitionDateQuantityItems[0])){
//            elseif(!empty($itemLastRequisitionDateQuantityItems)){
                $prId = $itemLastRequisitionDateQuantityItems[0]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[0]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[0]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[0]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[0]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[0]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[0]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }

            if(empty($itemAvailableStockQuantityItems)){
                $itemAvailableStock = '0';
            }else{
                $itemAvailableStock = $itemAvailableStockQuantityItems[0]['stock'];
            }
        //  if(!empty($itemLastRequisitionDateQuantityItems)){
                $data .= '<tr>';

                $data .= '<td>'.$itemName.'</td>';
                $data .= '<td>'.$prId.'</td>';
                $data .= '<td>'.$createdDate.'</td>';
                $data .= '<td>'.$quantity.'</td>';
                $data .= '<td>'.$receivedDate.'</td>';
                $data .= '<td>'.$orderQuantity.'</td>';
                $data .= '<td>'.$purchaseRequisition->getCostHeader()->getTitle().'</td>';
                $data .= '<td>'.$status.'</td>';
                $data .= '<td>'.$itemAvailableStock.'</td>';

                $data .= '</tr>';
          //   }


          //  return $data;
        }
        $data .= '</table>';
        return $data;
    }
    public function getItemLastQuantity(PurchaseRequisition $purchaseRequisition)
    {
        $data= "";
        $data .= '<table class="table-bordered table-striped table-condensed flip-content">';
        $data .= '<thead class="flip-content" style="background: #4b8df8">';
        $data .= '<tr>
                    <th class="numeric">Item</th>
                    <th class="numeric">PR</th>
                    <th class="numeric">Date</th>
                    <th class="numeric">PR Qty</th>
                    <th class="numeric">Receive Date</th>
                    <th class="numeric">PO Qty</th>
                    <th class="numeric">Cost Header</th>
                    <th class="numeric">Status</th>
                    <th class="numeric">Stock</th>
                  </tr>';
        $data .= '</thead>';
        foreach($purchaseRequisition->getPurchaseRequisitionItems() as $purchaseRequisitionItem) {


            $itemLastRequisitionDateQuantityItems = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->getItemLastRequisitionDateQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem(),$purchaseRequisition->getId());

            $itemLastReceiveDateQuantityItems     = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                ->getItemLastReceiveDateQuantityItems
                ($purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
            $itemAvailableStockQuantityItems      = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
                ->getItemAvailableStockQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());

            if(empty($itemLastReceiveDateQuantityItems)){
                $receivedDate = '...';
            }else{
                $receivedDate = $itemLastReceiveDateQuantityItems[0]['receivedDate']->format('d M Y');
            }

            if(isset($itemLastRequisitionDateQuantityItems[1])){
                $prId = $itemLastRequisitionDateQuantityItems[1]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[1]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[1]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[1]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[1]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[1]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[1]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }
            elseif(isset($itemLastRequisitionDateQuantityItems[0])){
                $prId = $itemLastRequisitionDateQuantityItems[0]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[0]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[0]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[0]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[0]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[0]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[0]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }

            if(empty($itemAvailableStockQuantityItems)){
                $itemAvailableStock = '0';
            }else{
                $itemAvailableStock = $itemAvailableStockQuantityItems[0]['stock'];
            }
              if(!empty($itemLastRequisitionDateQuantityItems)){
            $data .= '<tr>';

            $data .= '<td>'.$itemName.'</td>';
            $data .= '<td>'.$prId.'</td>';
            $data .= '<td>'.$createdDate.'</td>';
            $data .= '<td>'.$quantity.'</td>';
            $data .= '<td>'.$receivedDate.'</td>';
            $data .= '<td>'.$orderQuantity.'</td>';
            $data .= '<td>'.$purchaseRequisition->getCostHeader()->getTitle().'</td>';
            $data .= '<td>'.$status.'</td>';
            $data .= '<td>'.$itemAvailableStock.'</td>';

            $data .= '</tr>';
               }


//            //  return $data;
        }
        $data .= '</table>';
        return $data;
    }
    public function getItemLastQuantityMobileVersion(PurchaseRequisition $purchaseRequisition)
    {

        $data="";
        $data .='<ul class="norm_jobs_wrapper unstyled divWrapper">';
        foreach($purchaseRequisition->getPurchaseRequisitionItems() as $purchaseRequisitionItem){
            $itemLastRequisitionDateQuantityItems = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->getItemLastRequisitionDateQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem(),$purchaseRequisition->getId());

            $itemLastReceiveDateQuantityItems     = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                ->getItemLastReceiveDateQuantityItems
                ($purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
            $itemAvailableStockQuantityItems      = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
                ->getItemAvailableStockQuantityItems(
                    $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());

            if(empty($itemLastReceiveDateQuantityItems)){
                $receivedDate = '...';
            }else{
                $receivedDate = $itemLastReceiveDateQuantityItems[0]['receivedDate']->format('d M Y');
            }

            if(isset($itemLastRequisitionDateQuantityItems[1])){
                $prId = $itemLastRequisitionDateQuantityItems[1]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[1]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[1]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[1]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[1]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[1]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[1]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }
//            elseif(isset($itemLastRequisitionDateQuantityItems[0])){
            elseif(!empty($itemLastRequisitionDateQuantityItems)){
                $prId = $itemLastRequisitionDateQuantityItems[0]['purchaseRequisitionId'];
                $createdDate = $itemLastRequisitionDateQuantityItems[0]['createdDate']->format('d M Y');
                $itemName = $itemLastRequisitionDateQuantityItems[0]['itemName'];
                $quantity = $itemLastRequisitionDateQuantityItems[0]['quantity'];
                $orderQuantity = $itemLastRequisitionDateQuantityItems[0]['orderQuantity'];
                $status = $itemLastRequisitionDateQuantityItems[0]['status'] == 2 ? 'Cancel':'';
                $priId = $itemLastRequisitionDateQuantityItems[0]['priId'];
                $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                if(!empty($close)){
                    $status == 'Cancel';
                }elseif($status == 'Cancel'){
                    $status == 'Close';
                } else{
                    $status ='';
                }
            }

            if(empty($itemAvailableStockQuantityItems)){
                $itemAvailableStock = '0';
            }else{
                $itemAvailableStock = $itemAvailableStockQuantityItems[0]['stock'];
            }

            if(!empty($itemLastRequisitionDateQuantityItems)){

                $data .='<li><strong>Item</strong>'.$itemName.'</li>';
                $data .='<li><strong>PR</strong>'.$prId.'</li>';
                $data .='<li><strong>Date</strong>'.$createdDate.'</li>';
                $data .='<li><strong>PR Qty</strong>'.$quantity.'</li>';
                $data .='<li><strong>Receive Date</strong>'.$receivedDate.'</li>';
                $data .='<li><strong>PO Qty</strong>'.$orderQuantity.'</li>';
                $data .='<li><strong>Cost Header</strong>'.$purchaseRequisition->getCostHeader()->getTitle().'</li>';
                $data .='<li><strong>Status</strong>'.$status.'</li>';
                $data .='<li><strong>Stock</strong>'.$itemAvailableStock.'</li>';

//                <li><strong>Requisition No :</strong> {{ pr.id | default() }}</li>
                /* $data .= '<tr>';

                 $data .= '<td>'.$itemName.'</td>';
                 $data .= '<td>'.$prId.'</td>';
                 $data .= '<td>'.$createdDate.'</td>';
                 $data .= '<td>'.$quantity.'</td>';
                 $data .= '<td>'.$receivedDate.'</td>';
                 $data .= '<td>'.$orderQuantity.'</td>';
                 $data .= '<td>'.$purchaseRequisition->getCostHeader()->getTitle().'</td>';
                 $data .= '<td>'.$status.'</td>';
                 $data .= '<td>'.$itemAvailableStock.'</td>';

                 $data .= '</tr>';*/
            }
            $data .= '</ul>';

            return $data;

        }




        /*
         $data= "";
         $data .= '<table class="table-bordered table-striped table-condensed flip-content">';
         $data .= '<thead class="flip-content" style="background: #4b8df8">';
         $data .= '<tr>
                     <th class="numeric">Item</th>
                     <th class="numeric">PR</th>
                     <th class="numeric">Date</th>
                     <th class="numeric">PR Qty</th>
                     <th class="numeric">Receive Date</th>
                     <th class="numeric">PO Qty</th>
                     <th class="numeric">Cost Header</th>
                     <th class="numeric">Status</th>
                     <th class="numeric">Stock</th>
                   </tr>';
         $data .= '</thead>';
         foreach($purchaseRequisition->getPurchaseRequisitionItems() as $purchaseRequisitionItem){

             $itemLastRequisitionDateQuantityItems = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                                                               ->getItemLastRequisitionDateQuantityItems(
                                                               $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem(),$purchaseRequisition->getId());

             $itemLastReceiveDateQuantityItems     = $this->_em->getRepository('PmsCoreBundle:ReceivedItem')
                                                               ->getItemLastReceiveDateQuantityItems
                                                               ($purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());
             $itemAvailableStockQuantityItems      = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
                                                               ->getItemAvailableStockQuantityItems(
                                                               $purchaseRequisition->getProject(), $purchaseRequisitionItem->getItem());

             if(empty($itemLastReceiveDateQuantityItems)){
                 $receivedDate = '...';
             }else{
                 $receivedDate = $itemLastReceiveDateQuantityItems[0]['receivedDate']->format('d M Y');
             }

             if(isset($itemLastRequisitionDateQuantityItems[1])){
                 $prId = $itemLastRequisitionDateQuantityItems[1]['purchaseRequisitionId'];
                 $createdDate = $itemLastRequisitionDateQuantityItems[1]['createdDate']->format('d M Y');
                 $itemName = $itemLastRequisitionDateQuantityItems[1]['itemName'];
                 $quantity = $itemLastRequisitionDateQuantityItems[1]['quantity'];
                 $orderQuantity = $itemLastRequisitionDateQuantityItems[1]['orderQuantity'];
                 $status = $itemLastRequisitionDateQuantityItems[1]['status'] == 2 ? 'Cancel':'';
                 $priId = $itemLastRequisitionDateQuantityItems[1]['priId'];
                 $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                 if(!empty($close)){
                     $status == 'Cancel';
                 }elseif($status == 'Cancel'){
                     $status == 'Close';
                 } else{
                     $status ='';
                 }
             }
 //            elseif(isset($itemLastRequisitionDateQuantityItems[0])){
             elseif(!empty($itemLastRequisitionDateQuantityItems)){
                 $prId = $itemLastRequisitionDateQuantityItems[0]['purchaseRequisitionId'];
                 $createdDate = $itemLastRequisitionDateQuantityItems[0]['createdDate']->format('d M Y');
                 $itemName = $itemLastRequisitionDateQuantityItems[0]['itemName'];
                 $quantity = $itemLastRequisitionDateQuantityItems[0]['quantity'];
                 $orderQuantity = $itemLastRequisitionDateQuantityItems[0]['orderQuantity'];
                 $status = $itemLastRequisitionDateQuantityItems[0]['status'] == 2 ? 'Cancel':'';
                 $priId = $itemLastRequisitionDateQuantityItems[0]['priId'];
                 $close = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItemCloseInfo')->findOneBy(array('purchaseRequisitionItem'=>$priId));

                 if(!empty($close)){
                     $status == 'Cancel';
                 }elseif($status == 'Cancel'){
                     $status == 'Close';
                 } else{
                     $status ='';
                 }
             }

             if(empty($itemAvailableStockQuantityItems)){
                 $itemAvailableStock = '0';
             }else{
                 $itemAvailableStock = $itemAvailableStockQuantityItems[0]['stock'];
             }
         if(!empty($itemLastRequisitionDateQuantityItems)){
                 $data .= '<tr>';

                 $data .= '<td>'.$itemName.'</td>';
                 $data .= '<td>'.$prId.'</td>';
                 $data .= '<td>'.$createdDate.'</td>';
                 $data .= '<td>'.$quantity.'</td>';
                 $data .= '<td>'.$receivedDate.'</td>';
                 $data .= '<td>'.$orderQuantity.'</td>';
                 $data .= '<td>'.$purchaseRequisition->getCostHeader()->getTitle().'</td>';
                 $data .= '<td>'.$status.'</td>';
                 $data .= '<td>'.$itemAvailableStock.'</td>';

                 $data .= '</tr>';
             }
             $data .= '</table>';

             return $data;
         }*/
    }

    private function handleClosedItemTypeFilter($type, $query)
    {
        if ($type == 'closed-item') {
            $query->join('pr.purchaseRequisitionItems', 'pri');
            $query->andWhere('pri.status = :status');
            $query->setParameter('status', 2);
        }
    }

    public function userPrCreatorListReport($data)
    {
        $query = $this->createQueryBuilder('pr');
        $query->join('pr.project', 'p');
        $query->join('pr.createdBy', 'u');
        $query->select('u.username');
        $query->addSelect('u.id as uId');
        $query->addSelect('p.id');
        $query->addSelect('p.projectName');
        $query->addSelect('COUNT(pr.id) as totalPr');
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);
        $query->groupBy('p.id', 'u.id');
//        $query->orderBy('u.username', 'ASC');
        $query->orderBy('p.projectName', 'ASC');

        return $query->getQuery()->getResult();
    }

    public function getTotalProjectWiseRequisition($id, $data)
    {
        $query = $this->createQueryBuilder('pr');
        $query->join('pr.project', 'p');
        $query->select('COUNT(pr.id) as totalPr');
        $query->where('p.id = :pId');
        $query->setParameter('pId', $id);
        $this->handleSearchBetweenDate($query, $data['start_date'], $data['end_date']);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPurchaseRequisitionMonthlyCost($month)
    {

        $query = $this->createQueryBuilder('pr');
        $query->join('pr.project', 'p');
        $query->join('pr.subCategory', 'sc');
        $query->select('p.projectName');
        $query->addSelect('p.id');
        $query->addSelect('sc.id as subId');
        $query->addSelect('sc.subCategoryName');
        $query->addSelect('SUM(pr.prCost) AS prCost');
        $query->where($query->expr()->like("pr.createdDate", "'%$month%'"  ));
        $query->andWhere('pr.status = 1');
        $query->andWhere('pr.approveStatus = 3');
        $query->groupBy('p.id','pr.subCategory');

        return  $query->getQuery()->getArrayResult();
    }

    public function getAllRequisitionByProjectWiseCreated()
    {
        $sql = "SELECT
          purchase_requisitions.status, purchase_requisitions.approve_status, projects.projects_name, projects.id as projectId,
          purchase_requisitions.total_requisition_item_claimed,purchase_requisitions.total_order_item_quantity
          , GROUP_CONCAT(DISTINCT `purchase_requisitions`.`id` SEPARATOR ',' ) as purchase_requsitionId
          FROM
          `purchase_requisitions`
          INNER JOIN `projects`
          ON (`purchase_requisitions`.`projects` = `projects`.`id`)
          WHERE purchase_requisitions.status = 1 && purchase_requisitions.approve_status NOT IN(1,2,3)
                    GROUP BY    `projects`.`id`";

        return $this->_em->getConnection()->fetchAll($sql);
    }

    public function getAllRequisitionByProjectWiseVerified($approve_status)
    {
        $sql = "SELECT
          purchase_requisitions.status, purchase_requisitions.approve_status, projects.projects_name, projects.id as projectId,
          purchase_requisitions.total_requisition_item_claimed,purchase_requisitions.total_order_item_quantity
          , GROUP_CONCAT(DISTINCT `purchase_requisitions`.`id` SEPARATOR ',' ) as purchase_requsitionId
          FROM
          `purchase_requisitions`
          INNER JOIN `projects`
          ON (`purchase_requisitions`.`projects` = `projects`.`id`)
          WHERE purchase_requisitions.status = 1 && purchase_requisitions.approve_status = $approve_status
          GROUP BY    `projects`.`id`";

        return $this->_em->getConnection()->fetchAll($sql);
    }

    public function getAllRequisitionByProjectWiseApproved($approve_status)
    {
        $sql = "SELECT
          purchase_requisitions.status, purchase_requisitions.approve_status, projects.projects_name, projects.id as projectId,
          purchase_requisitions.total_requisition_item_claimed,purchase_requisitions.total_order_item_quantity
          , GROUP_CONCAT(DISTINCT `purchase_requisitions`.`id` SEPARATOR ',' ) as purchase_requsitionId
          FROM
          `purchase_requisitions`
          INNER JOIN `projects`
          ON (`purchase_requisitions`.`projects` = `projects`.`id`)
          WHERE purchase_requisitions.status = 1 && purchase_requisitions.total_requisition_item_claimed = 0 AND purchase_requisitions.total_order_item_quantity = 0 AND approve_status = $approve_status
          GROUP BY    `projects`.`id`";

        return $this->_em->getConnection()->fetchAll($sql);
    }

    public function getAllPurchaseRequisitionPoIssued()
    {

        $sql = "SELECT GROUP_CONCAT(DISTINCT `pr`.`id` SEPARATOR ',' ) as purchase_requsitionId
          FROM `purchase_requisition_items` as pri
          INNER JOIN `purchase_requisitions` as pr ON (`pr`.`id` = `pri`.`purchase_requisitions`)
          WHERE pr.status = 1 AND pr.total_requisition_item_claimed > 0 AND pr.approve_status = 3
          AND pr.total_requisition_item_quantity != pr.total_order_item_quantity
          AND pri.quantities != pri.purchase_order_quantity";

        return $this->_em->getConnection()->fetchAll($sql);

    }
    public function getAllPurchaseRequisitionForClaim($status)
    {
        return $this->getAllRequisitionByProjectWiseApproved($status);

    }

    public function getPrTotalForPrFormMSG($monthStart, $monthEnd, $project, $subCategory)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('SUM(pr.prCost) as total');
        $query->where('pr.status = 1');
        $query->andWhere('pr.project = :project');
        $query->andWhere('pr.subCategory = :subCategory');
        $query->setParameter('project', $project);
        $query->setParameter('subCategory', $subCategory);
        $this->handleSearchBetweenDate($query, $monthStart, $monthEnd);

        return $query->getQuery()->getResult();
    }

    public function getPrTotal($data)
    {
        if(!empty($data)){
            $monthStart = $data['month'] .' 00:00:01';
            $monthEnd = date('Y-m-t 23:59:59',(strtotime ($monthStart) ));
        }

        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as total');
        $query->where('pr.status != 6 or pr.status != 5');
        if(!empty($data)) {
            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $monthStart);
            $query->setParameter('end', $monthEnd);
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {

        if (!empty($monthStart) && !empty($monthEnd)) {
            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $monthStart.' 00:00:00');
            $query->setParameter('end', $monthEnd.' 23:59:59');
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->where('pr.project = :project');
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $category
     * @param $query
     */
    protected function handleSearchByCategory($category, $query)
    {
        if (!empty($category)) {
            $query->andwhere('c.id = :category');
            $query->setParameter('category', $category);
        }
    }

    /**
     * @param $subCategory
     * @param $query
     */
    protected function handleSearchBySubCategory($subCategory, $query)
    {
        if (!empty($subCategory)) {
            $query->andwhere('sc.id = :subCategory');
            $query->setParameter('subCategory', $subCategory);
        }
    }

    /**
     * @param $costHeader
     * @param $query
     */
    protected function handleSearchByCostHeader($costHeader, $query)
    {
        if (!empty($costHeader)) {
            $query->andwhere('ch.id = :costHeader');
            $query->setParameter('costHeader', $costHeader);
        }
    }

    protected function monthStartEnd($data)
    {

        if (!empty($data) and $data != 1) {

            $month      = $data["month"];
            $start_date = $month.' 00:00:00';
            $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));

            return array($start_date, $end_date);
        } else{
            $month      = $data["month"];
            $start_date = $month.' 00:00:00';
            $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));
            return array($start_date, $end_date);
        }
    }

    protected function totalRequisition($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisition');
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function totalRequisitionResolved($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionResolved');
        $this->handlePoIssuedTypeFilter('po-issued', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function totalRequisitionCanceled($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionCanceled');
        $query->where('pr.status = 6');
     //   $this->handleCancelTypeFilter('cancel', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        $result =  $query->getQuery()->getSingleScalarResult();
        return $result;
    }

    protected function totalRequisitionOpen($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionOpen');
        $this->handleOpenTypeFilter('open', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function totalRequisitionApproved($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionApproved');
        $this->handleApproveTypeFilter('approve', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function totalRequisitionInProgress($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionInProgress');
        $this->handleInProgressTypeFilter('in-progress', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    protected function totalRequisitionHold($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionHold');
        $query->andWhere('pr.status = 5');
      //  $this->handleHoldTypeFilter('hold', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }
    protected function totalRequisitionClosed($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionClosed');
        $query->andWhere('pr.status = 7');
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function exceptionRequisition(){


        $query = $this->createQueryBuilder('pr');
        $query->join('pr.purchaseRequisitionItems','pri');

        // open
        $this->handleOpenTypeFilter('open', $query);
        //hold
        $this->handleHoldTypeFilter('hold',$query);
        // close
        $this->handleCloseTypeFilter('close',$query);
        //wip
        $this->handleInProgressTypeFilter('in-progress',$query);
        //po-issued
        $this->handlePoIssuedTypeFilter('po-issued',$query);
        // approved
        $this->handleApproveTypeFilter('approve',$query);
    }

    public function getByUpdatedDate($prItemLists)
    {

        $query = $this->createQueryBuilder('pr');
        $query->select('pr.id');
        $query->addSelect('pr.approveStatus');
        $query->addSelect('pr.totalRequisitionItemQuantity');
        $query->andWhere('pr.updatedDate IS NOT NULL');
        $data = $query->getQuery()->getResult();
        foreach($data as $key => $pr){

            if($pr['id'] ==  $prItemLists[$key]['id']){
                $totalPurchaseRequisitionQuantity = $prItemLists[$key]['TotalUpdateQuantity'];
                $this->updatePurchaseRequisitionQuery($pr['id'],$totalPurchaseRequisitionQuantity);
            }


        }
    }

    public function updatePurchaseRequisitionQuery($prId,$totalQuantity){

        $query = $this->createQueryBuilder('pr');
        $query->update()
            ->set('pr.totalRequisitionItemQuantity','?1')
            ->where('pr.id = :id')
            ->setParameter(1, $totalQuantity)
            ->setParameter('id', $prId)
            ->getQuery()->execute();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handlePartialClaimTypeFilter($type, $query)
    {
        if ($type == 'partial-claim') {
            $query->where('pr.status = 1');
            $query->andWhere('pr.approveStatus = 3');
            $query->andWhere('pr.totalRequisitionItemClaimed > 0');
            $query->andWhere('pr.totalRequisitionItemClaimed < pr.totalRequisitionItem');

        }

    }

    protected function totalRequisitionPartialClaim($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->select('COUNT(pr.id) as totalRequisitionPartialClaim');
        $this->handlePartialClaimTypeFilter('partial-claim', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function requisitionActivities($data)
    {
        if (!empty($data)){

            list($start_date, $end_date) = $this->monthStartEnd($data);

            $totalRequisition = $this->totalRequisition($start_date, $end_date);
            $totalRequisitionResolved = $this->totalRequisitionResolved($start_date, $end_date);
            $totalRequisitionCanceled = $this->totalRequisitionCanceled($start_date, $end_date);
            $totalRequisitionOpen = $this->totalRequisitionOpen($start_date, $end_date);
            $totalRequisitionApproved = $this->totalRequisitionApproved($start_date, $end_date);
            $totalRequisitionInProgress = $this->totalRequisitionInProgress($start_date, $end_date);
            $totalRequisitionHold = $this->totalRequisitionHold($start_date, $end_date);
            $totalRequisitionClosed = $this->totalRequisitionClosed($start_date, $end_date);
          //  $totalRequisitionPartialClaim = $this->totalRequisitionPartialClaim($start_date, $end_date);

            $totalRequisitionItemResolved = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemResolved($start_date, $end_date);
            $totalRequisitionItemCanceled = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemCanceled($start_date, $end_date);
            $totalRequisitionItemCanceledIndividual = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemCanceledIndividual($start_date, $end_date);
            $totalRequisitionItemInProgress = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemInProgress($start_date, $end_date);
            $totalRequisitionItemOpen = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemOpen($start_date, $end_date);
            $totalRequisitionItemApproved = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemApproved($start_date, $end_date);
            $totalRequisitionItemHold = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItemHold($start_date, $end_date);
            $totalRequisitionItemTotal = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                ->totalRequisitionItem($start_date, $end_date);

            return array($totalRequisition,  $totalRequisitionResolved, $totalRequisitionCanceled, $totalRequisitionOpen,
                $totalRequisitionApproved, $totalRequisitionInProgress, $totalRequisitionHold,$totalRequisitionClosed,
                $totalRequisitionItemResolved, $totalRequisitionItemCanceled, $totalRequisitionItemCanceledIndividual,
                $totalRequisitionItemInProgress, $totalRequisitionItemOpen,$totalRequisitionItemHold,$totalRequisitionItemApproved,$totalRequisitionItemTotal);
        }else{
            return false;
        }
    }

    public function getTotalPurchaseRequisitionItemQuantity($data)
    {
        $query = $this->createQueryBuilder('pr');
        $query->leftJoin('pr.project','p');
        $query->leftJoin('pr.purchaseRequisitionItems','pri');
        $query->leftJoin('pri.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseOrder', 'po');
        $query->leftJoin('po.vendor', 'v');
        $query->select('SUM(pri.quantity)');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
//        $query->andWhere('poi.status = 1');

        if(!empty($data)){

            if($data['vendor']){

                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }
            if ($data['project']) {
                $query->andWhere('pr.project = :project');
                $query->setParameter('project', $data['project']);
            }
          //  $this->handleSearchByProject($data['project'], $query);

        }

        return $query->getQuery()->getSingleScalarResult();

    }

    public function getTotalCancelQty($data)
    {

        $query = $this->createQueryBuilder('pr');
        $query->join('pr.purchaseRequisitionItems','pri');
        $query->join('pr.project','p');
        $query->join('pri.purchaseRequisitionItemCloseInfo','pric');
        $query->select('SUM(pric.quantity)');

        if(!empty($data)){

            $this->handleSearchByProject($data['project'], $query);

        }
        return $query->getQuery()->getSingleScalarResult();

    }


    protected function totalRequisitionItemPartialClaim($start_date, $end_date)
    {
        $query = $this->_em->getRepository('PmsCoreBundle:PurchaseRequisitionItem')
                 ->createQueryBuilder('pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->select('COUNT(pri.id) as totalRequisitionItemPartialClaim');
        $this->handlePartialClaimTypeFilter('partial-claim', $query);
        $this->handleSearchBetweenDate($query, $start_date, $end_date);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function requisitionActivitiesAverageDayCount($data)
    {
        if (!empty($data)) {

            list($start_date, $end_date) = $this->monthStartEnd($data);

            $requisitionItemActivities = $this->requisitionItemActivities($start_date, $end_date);

            $prActivities = array();
            foreach ($requisitionItemActivities as $keyPr => $requisitionItemActivity) {

                $i = 0;
                $j = 0;
                $claimDays = 0;
                $poDays = 0;
                $datePr = new DateTime($requisitionItemActivity->getApprovedDateCategoryHeadTwo()->format('Y-m-d'));
                $prActivities[$keyPr]['prId'] = $requisitionItemActivity->getId();
                $prActivities[$keyPr]['category'] = $requisitionItemActivity->getCategory()->getCategoryName();
                $prActivities[$keyPr]['project']  = $requisitionItemActivity->getProject()->getProjectName();
//                $prActivities[$keyPr]['head_local']  = $requisitionItemActivity->getPurchaseRequisitionItems()->getIsHeadOrLocal();
                $prActivities[$keyPr]['sub_category'] = $requisitionItemActivity->getSubCategory()->getSubCategoryName();

                foreach ($requisitionItemActivity->getPurchaseRequisitionItems() as $key => $requisitionItem) {
                    $i++;
                    if($requisitionItem->getClaimedDate() != null && $requisitionItem->getQuantity() != 0) {
                        $dateClaim = new DateTime($requisitionItem->getClaimedDate()->format('Y-m-d'));
                        $diffBetweenPrDateAndClaimDate = $dateClaim->diff($datePr)->d;
                        $claimDays = $claimDays + $diffBetweenPrDateAndClaimDate;
                        $diffBetweenPrDateAndClaimDate = 0;

                        foreach ($requisitionItem->getPurchaseOrderItems() as $po) {
                            $j++;
                            if ($po->getQuantity() != 0) {

                                $datePo = new DateTime($po->getPurchaseOrder()->getCreatedDate()->format('Y-m-d'));
                                $diffBetweenPoDateAndClaimDate = $datePo->diff($dateClaim)->d;
                                $poDays = $poDays + $diffBetweenPoDateAndClaimDate;
                                $diffBetweenPoDateAndClaimDate = 0;
                            }
                            if ($poDays == 0) {
                                $poDays = 1;
                            }
                        }

                        $resolveAverageDates = $poDays / $j;

                        $prActivities[$keyPr]['resolveAverageDates'] = $resolveAverageDates;

                        if ($claimDays == 0) {
                            $claimDays = 1;
                        }
                    }
                }

                $claimAverageDates = $claimDays / $i;
                $prActivities[$keyPr]['claimAverageDates'] = $claimAverageDates;
                $prAverageDates = ($resolveAverageDates + $claimAverageDates) / 2;
                $prActivities[$keyPr]['prAverageDates'] = $prAverageDates;
            }

            return $prActivities;
        }else{
            return false;
        }
    }

    private function requisitionItemActivities($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('pr');
        $query->join('pr.category','c');
        $query->join('pr.subCategory','sc');
        $query->leftJoin('pr.project','p');
//        $query->leftJoin('pr.purchaseRequisitionItems','pri');
        $query->where('pr.totalOrderItemQuantity >= pr.totalRequisitionItemQuantity');
        $query->andWhere('pr.status =1 ');
        $query->andWhere('pr.approveStatus = 3');
        $this->handleSearchBetweenDate($query, $start_date, $end_date);
//        $query->andWhere('pr.totalRequisitionItemQuantity != 0');
        $query->groupBy('pr.id');

        return $query->getQuery()->getResult();
    }

    public function getPRReportInfo($data){

        $query = $this->createQueryBuilder('pr');
        $query->leftJoin('pr.project','p');
        $query->leftJoin('p.projectArea','a');
        $query->leftJoin('pr.purchaseRequisitionItems','pri');
        $query->leftJoin('pri.item','i');
        $query->leftJoin('i.category','c');
        $query->select('SUM(pri.quantity) as totalPrQty');
        $query->addSelect('p.projectName as projectName');
        $query->addSelect('a.areaName as areaName');
        $query->addSelect('i.itemUnit as itemUnit');
        $query->addSelect('i.itemName as itemName');
        $query->addSelect('i.price as itemAmount');
        $query->addSelect('i.id as itemId');

        $query->where('pr.approveStatus = 3');
        $query->groupBy('i.id');

        if(!empty($data)){

            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByCategory($data['category'],$query);
            $this->handleSearchBetweenDate($query,$data['start_date'],$data['end_date']);

        }
        $results =  $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['itemId']] = $row;
        }
        return $data;
    }
    public function getPrInProgressData($status,$month){

            $start_date = $month.' 00:00:00';
            $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));

            $query = $this->createQueryBuilder('pr');

            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $start_date.' 00:00:00');
            $query->setParameter('end', $end_date.' 23:59:59');
            $this->handleInProgressTypeFilter($status,$query);

        return $query->getQuery()->getResult();

    }
    public function getPrApprovedData($status,$month){

            $start_date = $month.' 00:00:00';
            $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));

            $query = $this->createQueryBuilder('pr');

            $query->andWhere('pr.createdDate >= :start');
            $query->andWhere('pr.createdDate <= :end');
            $query->setParameter('start', $start_date.' 00:00:00');
            $query->setParameter('end', $end_date.' 23:59:59');
            $this->handleApproveTypeFilter($status,$query);

        return $query->getQuery()->getResult();

    }
}