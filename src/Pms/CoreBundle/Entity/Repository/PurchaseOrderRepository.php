<?php

namespace Pms\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\UserBundle\Entity\User;

/**
 * PurchaseOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseOrderRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $data->getId();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();

        return $this->_em;
    }

    public function getAllPurchasePendingPo($approve_status)
    {

        $sql = "SELECT GROUP_CONCAT(DISTINCT `purchase_orders`.`id` SEPARATOR ',' ) as purchase_ordersId, projects.id as projectId
          FROM `purchase_orders`
          INNER JOIN purchase_order_items ON purchase_order_items.purchase_orders = purchase_orders.id
          INNER JOIN projects ON projects.id = purchase_order_items.projects
          INNER JOIN purchase_requisition_items ON purchase_requisition_items.id = purchase_order_items.purchase_requisition_item
          INNER JOIN purchase_requisitions ON purchase_requisitions.id = purchase_requisition_items.purchase_requisitions
          WHERE purchase_requisitions.status = 1 AND purchase_requisitions.total_requisition_item_claimed > 0
                AND purchase_requisitions.approve_status = 3 AND
                purchase_requisitions.total_requisition_item_quantity != purchase_requisitions.total_order_item_quantity
          AND purchase_orders.approve_status = $approve_status AND purchase_orders.status =1
          GROUP BY projects.id";
        return $this->_em->getConnection()->fetchAll($sql);


    }



    public function getPurchaseOrderSearch(User $user, $data, $type = 'all',$month, $returnQuery = true)
    {

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->orderBy('po.createdDate', 'desc');

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $this->handleSearchByUser($user, $query);
        }

        if (!empty($data['po'])) {
            $query->andWhere('po.id IN(:id)');
            $query->setParameter('id', $data['po']);
        }

        if (!empty($data['poRef'])) {
            $query->andWhere('po.refNo IN(:id)');
            $query->setParameter('id', $data['poRef']);
        }

        if (!empty($data['vendor'])) {
            $query->andWhere('po.vendor IN(:id)');
            $query->setParameter('id', $data['vendor']);
        }

        if (!empty($month) and $month != 1) {

            list($monthStart,$monthEnd) = $this->monthStartEnd($month);

            if (!empty($monthStart) && !empty($monthEnd)) {

                $query->andWhere('po.createdDate >= :start');
                $query->andWhere('po.createdDate <= :end');
                $query->setParameter('start', $monthStart.' 00:00:00');
                $query->setParameter('end', $monthEnd.' 23:59:59');
            }
        }

        $this->handleOpenTypeFilter($type, $query);

        $this->handleApproveTypeFilter($type,$query);

        $this->handleInProgressTypeFilter($type, $query);

        $this->handleCloseTypeFilter($type, $query);

        $this->handleHoldTypeFilter($type, $query);

        $this->handleAmendmentTypeFilter($type, $query);

        $this->handleCancelTypeFilter($type, $query);



        if ($returnQuery) {
            return $query;
        }

        return $query;
    }



    /**
     * @param $type
     * @param $query
     */
    protected function handleOpenTypeFilter($type, $query)
    {
        if ($type == 'open') {

            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 0 OR po.approveStatus = 1 OR po.approveStatus = 2');
        }
    }

    public function getPurchaseOrderByAmendment()
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems','poi');
        $query->select('po.id');
        $query->addSelect('po.totalOrderItemQuantity');
        $result =  $query->getQuery()->getResult();

        $data = array();
        foreach($result as $poId) {
            $data[$poId['id']] = $poId;
        }

        return $data;

    }

    public function getMonthlyPoApprovedAmount($data)
    {
//        var_dump($data);die;
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $paymentCompany[] = $this->getPoApprovedAmount($data['companyType'],$dateStart, $dateEnd);
            }

            return $paymentCompany;
        }
    }

    public function getPoApprovedAmount($companyType,$dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->select('SUM(po.netTotal)');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByCompanyType($companyType, $query);
        $this->handleSearchBetweenDate($dateStart, $dateEnd,$query);

        return $query->getQuery()->getSingleScalarResult();
    }
    /**
     * @param $companyType
     * @param $query
     */
    protected function handleSearchByCompanyType($companyType, $query)
    {
        if (!empty($companyType)) {
            $query->andWhere('p.projectCategory = :companyType');
            $query->setParameter('companyType', $companyType);
        }
    }

    public function getPoInFo($data)
    {

        if(!empty($data['vendor'])){

            $query = $this->createQueryBuilder('po');
            $query->leftJoin('po.vendor', 'v');
/*            $query->leftJoin('po.purchaseOrderItems', 'poi');
            $query->leftJoin('poi.project', 'p');*/
            $query->select('v.vendorName as vendorName');
            $query->addSelect('COUNT(po.id) as poId');
            $query->addSelect('SUM(po.netTotal) as PoTotal');
            $query->addSelect('SUM(po.advancePaymentAmount) as advancePayment');
            $query->where('po.approveStatus = 3');
//            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByVendor($data['vendor'], $query);
            $query->orderBy('v.vendorName', 'ASC');
            return $query->getQuery()->getResult();
        } else {
            return false;
        }

    }

    public function getTopTenVendorOverView($data)
    {



        if(!empty($data['area']) || !empty($data['project'] )){

            $query = $this->createQueryBuilder('po');
            $query->leftJoin('po.vendor', 'v');
            $query->leftJoin('v.area', 'a');
            $query->leftJoin('po.purchaseOrderItems', 'poi');
            $query->leftJoin('poi.project', 'p');
            $query->select('v.vendorName as vendorName');
            $query->addSelect('SUM(po.netTotal) as PoAmount');
            $query->addSelect('po.paymentType');
            $query->addSelect('a.areaName');
            $query->where('po.approveStatus = 3');
            $this->handleSearchDate($data['start_month'], $data['start_month'],$query);
            $this->handleSearchByProject($data['project'], $query);
            $this->handleSearchByArea($data['area'], $query);
            $query->setMaxResults(20);
            $query->groupBy('v.id');
            $query->orderBy('PoAmount', 'DESC');
            return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }

    public function projectSpendSubCategoryWiseReportDetail($project, $start_date, $end_date)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('p.projectArea', 'pa');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->leftJoin('poi.item', 'i');
        $query->select('p.id as projectId');
        $query->addSelect('sc.id as subCategoryId');
        $query->addSelect('p.projectName');
        $query->addSelect('pa.areaName');
        $query->addSelect('poi.amount as total');
        $query->addSelect('i.itemName');

        $query->where('po.approveStatus = 3');

        $query->andWhere('p.id = :project');
        $query->setParameter('project',$project);

        if (!empty($start_date) && !empty($end_date)) {
            $this->handleSearchBetweenDate($start_date, $end_date, $query);
        }else{
            $query->where('po.approveStatus = 9');
        }

        $query->orderBy('p.projectName', 'ASC');
        $projectCosts = $query->getQuery()->getResult();
        return $projectCosts;
    }



    protected function handleCloseIndividualTypeFilter($type, $query)
    {
        if ($type == 'close-individual') {
            $query->addSelect('poic.quantity');
            $query->innerJoin('poi.purchaseOrderItemClose','poic');
            $query->andWhere('po.status != 6');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCloseTypeFilter($type, $query)
    {
        if ($type == 'close') {
            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.totalOrderReceiveQuantity >= po.totalOrderItemQuantity');
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleHoldTypeFilter($type, $query)
    {
        if ($type == 'hold') {
            $query->andWhere('po.status = :hold');
            $query->setParameter('hold', 5);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleCancelTypeFilter($type, $query)
    {
        if ($type == 'cancel') {
            $query->andWhere('po.status = :cancel');
            $query->setParameter('cancel', 6);
        }
    }

    public function userPoCreatorListReport($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.createdBy', 'u');
        $query->select('u.username');
        $query->addSelect('COUNT(po.id) as totalPoUserWise');

        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);

        $query->groupBy('po.createdBy');

        return $query->getQuery()->getResult();
    }

    public function getVendorStatusTwoReport($data)
    {
        if(!empty($data['vendor']) || !empty($data['project'])){

        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.payment', 'pay');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.receivedItems', 'ri');

        $query->leftJoin('poi.project', 'p');

        $query->select('COUNT(po.id) as totalPo');
        $query->addSelect('');
        $query->addSelect('SUM(po.netTotal) as total');
        $query->addSelect('v.vendorName');
        $query->addSelect('SUM(pay.paymentAmount) as paymentAmount');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($data['project'], $query);
            $query->groupBy('p.id');
            $this->handleSearchByVendor($data['vendor'], $query);
        $query->orderBy('v.vendorName', 'ASC');

        return $query->getQuery()->getResult();
        } else {
            return false;
        }
    }
    public function getVendorStatusTwoReportExcel($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.vendor', 'v');
        $query->leftJoin('po.payment', 'p');

        $query->select('COUNT(po.id) as totalPo');
        $query->addSelect('SUM(po.netTotal) as total');
        $query->addSelect('v.vendorName');
        $query->addSelect('SUM(p.paymentAmount) as paymentAmount');

        if(empty($data['start_date']) && empty($data['end_date']) && empty($data['project']) && empty($data['vendor'])){
            $query->where('po.approveStatus = 9');
        }else{
            $query->where('po.approveStatus = 3');
        }

        $this->handleSearchBetweenApprovalDate($query, $data['start_date'], $data['end_date']);
        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByVendor($data['vendor'], $query);

        $query->orderBy('v.vendorName', 'ASC');
        $query->groupBy('v.vendorName');

        return $query->getQuery()->getResult();
    }

    public function getTotalPOCount($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPo');
        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getTotalPoAmount($id){

    }
    public function totalPOAmount()
    {
        $query = $this->createQueryBuilder('po');
        $query->select('SUM(po.netTotal) as total');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.status = 1');

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getBudgetVsSpendsForPoTotal($month, $data)
    {
        $today = date('Y-m-01',(strtotime ($month) ));
        $start_date = date('Y-m-01 00:00:01',(strtotime ($today) ));
        $end_date = date('Y-m-t 23:59:59',(strtotime ($today) ));

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('pr.subCategory', 'sc');
        $query->select('SUM(poi.amount) as total1');

        $this->handleBudgetVsSpendSearch($data, $start_date, $end_date, $query);

        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 3');

        return $query->getQuery()->getResult();
    }

    public function totalPoIssued($dateStartTime, $dateEndTime)
    {
        $query = $this->createQueryBuilder('po');
        $query->select('count(po.id) as TotalPoIssued');
        $query->where('po.approveStatus = 0');
        $query->andWhere('po.status = 1');
        $this->handleSearchBetweenDate($dateStartTime, $dateEndTime, $query);

        return $query->getQuery()->getResult();
    }
    public function getApprovedPurchaseOrder($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems','poi');
        $query->leftJoin('po.vendor','v');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');


        $query->select('SUM(poi.quantity)');
        $query->where('po.approveStatus = 3');

        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }
        $query->leftJoin('pri.item', 'i');

        $result =  $query->getQuery()->getSingleScalarResult();
        return $result;
    }
    public function getRemainingItemQty($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems','poi');
        $query->leftJoin('po.vendor','v');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');


        $query->select('(po.totalOrderItemQuantity - po.totalOrderReceiveQuantity) as t');

        $query->where('po.approveStatus = 3');

        $query->where('poi.status = 1');
//        $query->andWhere('poi.quantity IS NOT NULL');



        if(!empty($data)){

            if($data['vendor']){
                $query->andWhere('po.vendor = :vendor');
                $query->setParameter('vendor', $data['vendor']);
            }if($data['po']){
                $query->andWhere('poi.purchaseOrder = :poNo');
                $query->setParameter('poNo', $data['po']);
            }

            $this->handleSearchByProject($data['project'], $query);

        }
        $query->leftJoin('pri.item', 'i');

        $result =  $query->getQuery()->getSingleScalarResult();

        return $result;
    }



    public function projectSpendPurchaseTypeWiseReport($data,$user)
    {

        if (empty($data['start_date']) && empty($data['end_date'])) {

            return false;
        }
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.project', 'p');
        $query->leftJoin('p.projectArea', 'pa');
        $query->leftJoin('po.poNonpo', 'poNo');

        $query->select('poNo.name');
        $query->addSelect('poNo.id');
        $query->addSelect('p.projectName');
        $query->addSelect('pa.areaName');
        $query->addSelect('p.id as projectId');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');

        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        }

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->join('p.users', 'u');
            $this->handleSearchByUser($user, $query);
        }
        $query->groupBy('p.id');
        $query->orderBy('p.projectName', 'ASC');
        $projectCosts = $query->getQuery()->getResult();


        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $projectCosts = $this->prepareProjectReportDataWithDate($projectCosts, $data['start_date'], $data['end_date']);
        }else{
            $projectCosts = $this->prepareProjectReportData($projectCosts);
        }

        return $projectCosts;
    }

    private function prepareProjectReportData($data)
    {
        $purchaseTypes = $this->getPurchaseTypesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeTotal($row['projectId'], $purchaseTypes);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    private function prepareProjectReportDataWithDate($data, $start, $end)
    {
        $purchaseTypes = $this->getPurchaseTypesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeTotalWithDate($row['projectId'], $purchaseTypes, $start, $end);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    private function getPurchaseTypeTotal($project, $types)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poNo.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $query->addGroupBy('poNo.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }

    private function getPurchaseTypeTotalWithDate($project, $types, $start, $end)
    {

        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poNo.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchBetweenDate($start, $end, $query);
        $query->addGroupBy('poNo.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }

    public function projectPurchaseTypeWiseCountReport($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poNo.name');
        $query->addSelect('poNo.id');
        $query->addSelect('p.projectName');
        $query->addSelect('p.id as projectId');
        $query->addSelect('COUNT(po.id) as total');

        $query->where('po.approveStatus = 3');

        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        }else{
            $query->where('po.approveStatus = 9');
        }

        $query->groupBy('p.id');
        $query->orderBy('p.projectName', 'ASC');

        $projectCosts = $query->getQuery()->getResult();

        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $projectCosts = $this->prepareProjectCountReportDataWithDate($projectCosts, $data['start_date'], $data['end_date']);
        }else{
            $projectCosts = $this->prepareProjectCountReportData($projectCosts);
        }

        return $projectCosts;
    }

    private function prepareProjectCountReportData($data)
    {
        $purchaseTypes = $this->getPurchaseTypesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeCountTotal($row['projectId'], $purchaseTypes);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    private function getPurchaseTypeCountTotal($project, $types)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poNo.id');
        $query->addSelect('COUNT(po.id) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $query->addGroupBy('poNo.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }

    private function prepareProjectCountReportDataWithDate($data, $start, $end)
    {
        $purchaseTypes = $this->getPurchaseTypesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeCountTotalWithDate($row['projectId'], $purchaseTypes, $start, $end);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    public function getPurchaseTypesAsArray()
    {
        $data = array();
        $types = $this->_em->getRepository('PmsSettingBundle:PurchaseType')->findAll();

        foreach ($types as $row) {
            $data[$row->getId()] = $row->getName();
        }

        return $data;
    }

    public function getSubCategoriesAsArray()
    {
        $data = array();
        $types = $this->_em->getRepository('PmsSettingBundle:SubCategory')->findAll();

        foreach ($types as $row) {
            $data[$row->getId()] = $row->getSubCategoryName();
        }

        return $data;
    }

    private function getPurchaseTypeCountTotalWithDate($project, $types, $start, $end)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('poNo.id');
        $query->addSelect('COUNT(po.id) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchBetweenDate($start, $end, $query);
        $query->addGroupBy('poNo.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }

    public function projectSpendSubCategoryWiseReport($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('p.projectArea', 'pa');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('p.id as projectId');
        $query->addSelect('sc.id as subCategoryId');
        $query->addSelect('p.projectName');
        $query->addSelect('pa.areaName');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');

        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        }else{
            $query->where('po.approveStatus = 9');
        }

        $query->groupBy('p.id');
        $query->orderBy('p.projectName', 'ASC');
        $projectCosts = $query->getQuery()->getResult();

        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $projectCosts = $this->prepareProjectReportSubCategoryWiseDataWithDate($projectCosts, $data['start_date'], $data['end_date']);
        }else{
            $projectCosts = $this->prepareProjectReportSubCategoryWiseData($projectCosts);
        }

        return $projectCosts;
    }

    private function prepareProjectReportSubCategoryWiseDataWithDate($data, $start, $end)
    {
        $subCategories = $this->getSubCategoriesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeSubCategoryWiseTotalWithDate($row['projectId'], $subCategories, $start, $end);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    private function prepareProjectReportSubCategoryWiseData($data)
    {
        $subCategories = $this->getSubCategoriesAsArray();

        foreach ($data as $key => $row) {
            $typeTotal = $this->getPurchaseTypeSubCategoryWiseTotal($row['projectId'], $subCategories);

            $data[$key]['typeSummary'] = $typeTotal;
        }

        return $data;
    }

    private function getPurchaseTypeSubCategoryWiseTotalWithDate($project, $subCategories, $start, $end)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('sc.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchBetweenDate($start, $end, $query);
        $query->addGroupBy('sc.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }

    private function getPurchaseTypeSubCategoryWiseTotal($project, $subCategories)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->select('sc.id');
        $query->addSelect('SUM(poi.amount) as total');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($project, $query);
        $query->addGroupBy('sc.id');
        $query->orderBy('total', 'DESC');

        $projectCosts = $query->getQuery()->getResult();

        if ($projectCosts) {
            $data = array();
            foreach ($projectCosts as $c) {
                $data[$c['id']] = $c['total'];
            }

            return $data;
        }

        return array();
    }




    public function getPurchaseOrderApprovedList()
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.project', 'p');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('p.users', 'u');
        $query->where('po.approveStatus = 3');

        return $query->getQuery()->getResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleAmendmentTypeFilter($type, $query)
    {
        if ($type == 'amendment') {
          $query->andWhere('po.amendmentStatus = :status');
           /* $query->andWhere('poi.amendment = :status');
            $query->groupBy('poi.purchaseOrder');*/
            $query->setParameter('status', 7);
        }
    }

    public function purchaseActivities($data)
    {
        if (!empty($data)){

            list($start_date, $end_date) = $this->monthStartEnd($data);

            $totalPurchase = $this->totalPurchaseOrder($start_date, $end_date);
            $totalPurchaseOpen = $this->open($start_date, $end_date);
            $totalPurchaseApproved = $this->approved($start_date, $end_date);
            $totalPurchaseInProgress = $this->inProgress($start_date, $end_date);
            $totalPurchaseResolved = $this->resolved($start_date, $end_date);
            $totalPurchaseHold = $this->hold($start_date, $end_date);
            $totalPurchaseCanceled = $this->cancel($start_date, $end_date);
            $totalPurchaseAmendment = $this->amendment($start_date, $end_date);

            return array($totalPurchase,$totalPurchaseOpen,$totalPurchaseApproved, $totalPurchaseInProgress,
                         $totalPurchaseResolved,$totalPurchaseHold ,$totalPurchaseCanceled,$totalPurchaseAmendment );
        } else {
            return false;
        }
    }
    protected function monthStartEnd($data)
    {
            $month      = $data["month"];
            $start_date = $month.' 00:00:00';
            $end_date   = date('Y-m-t 23:59:59', (strtotime($start_date)));

            return array($start_date, $end_date);

    }

    public function open($start_date, $end_date){

        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseOpen');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 0 OR po.approveStatus = 1 OR po.approveStatus = 2');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function approved($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseApproved');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.totalOrderReceiveQuantity is null');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function resolved($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseResolved');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.totalOrderReceiveQuantity >= po.totalOrderItemQuantity');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function inProgress($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseInProgress');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.totalOrderReceiveQuantity is not null');
        $query->andWhere('po.totalOrderItemQuantity > po.totalOrderReceiveQuantity');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function hold($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchasehold');
        $query->andWhere('po.status = 5');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
    }
    public function cancel($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseCancel');
        $query->andWhere('po.status = 6');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function amendment($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalPurchaseAmendment');
        $query->andWhere('po.amendmentStatus = 7');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    protected function totalPurchaseOrder($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) as totalOrder');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);

        return $query->getQuery()->getSingleScalarResult();
    }
    public function openItem($start_date, $end_date){

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseOpenItem');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 0 OR po.approveStatus = 1 OR po.approveStatus = 2');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function approvedItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseApprovedItem');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.totalOrderReceiveQuantity is null');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function resolvedItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseResolvedItem');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.totalOrderReceiveQuantity >= po.totalOrderItemQuantity');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function inProgressItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseInProgressItem');
        $query->andWhere('po.status = 1');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.totalOrderReceiveQuantity is not null');
        $query->andWhere('po.totalOrderItemQuantity > po.totalOrderReceiveQuantity');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function holdItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseholdItem');
        $query->andWhere('po.status = 5');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
    }
    public function cancelItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseCancelItem');
        $query->andWhere('po.status = 6');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    public function amendmentItem($start_date, $end_date){
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalPurchaseAmendmentItem');
        $query->andWhere('po.amendmentStatus = 7');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);
        return $query->getQuery()->getSingleScalarResult();
    }
    protected function totalPurchaseOrderItem($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->select('COUNT(poi.id) as totalOrder');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function purchaseOderItemActivities($data)
    {
        if (!empty($data)){

            list($start_date, $end_date) = $this->monthStartEnd($data);

            $totalPurchaseItem = $this->totalPurchaseOrderItem($start_date, $end_date);
            $totalPurchaseOpenItem = $this->openItem($start_date, $end_date);
            $totalPurchaseApprovedItem = $this->approvedItem($start_date, $end_date);
            $totalPurchaseInProgressItem = $this->inProgressItem($start_date, $end_date);
            $totalPurchaseResolvedItem = $this->resolvedItem($start_date, $end_date);
            $totalPurchaseHoldItem = $this->holdItem($start_date, $end_date);
            $totalPurchaseCanceledItem = $this->cancelItem($start_date, $end_date);
            $totalPurchaseAmendmentItem = $this->amendmentItem($start_date, $end_date);
            $totalPurchaseItemIndividualCancel = $this->totalPurchaseItemCanceledIndividual($start_date, $end_date);

            return array($totalPurchaseItem,$totalPurchaseOpenItem,$totalPurchaseApprovedItem, $totalPurchaseInProgressItem,
                $totalPurchaseResolvedItem,$totalPurchaseHoldItem ,$totalPurchaseCanceledItem,$totalPurchaseAmendmentItem,
                $totalPurchaseItemIndividualCancel);
        } else {
            return false;
        }

    }
    public function totalPurchaseItemCanceledIndividual($start_date, $end_date)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->innerJoin('poi.purchaseOrderItemClose','poic');
        $query->select('COUNT(poic.id) as totalPurchaseItemCanceledIndividual');
        $query->andWhere('po.status != 6');
        $this->handleSearchBetweenDate($start_date, $end_date,$query);


        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $type
     * @param $query
     */
    protected function handleAmendmentRefTypeFilter($type, $query)
    {
        if ($type == 'amendment-reference') {
            $query->andWhere('po.status = :status');
            $query->setParameter('status', 8);
        }
    }

    /**
     * @param $type
     * @param $query
     */
    private function handleInProgressTypeFilter($type, $query)
    {
        if ($type == 'in-progress') {

            $query->andWhere('po.status = 1');
            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.totalOrderReceiveQuantity is not null');
            $query->andWhere('po.totalOrderItemQuantity > po.totalOrderReceiveQuantity');
        }
    }
    /**
     * @param $type
     * @param $query
     */
    private function handleApproveTypeFilter($type, $query)
    {

        if ($type == 'approve') {

            $query->andWhere('po.approveStatus = 3');
            $query->andWhere('po.status = 1');
            $query->andWhere('po.totalOrderReceiveQuantity is null');
        }
    }

    public function getAdvancePayment($user)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->orderBy('po.createdDate', 'DESC');
        $query->where("po.paymentType = 'Advance payment'");
        $query->andWhere('po.advanceStatus is null');
        $query->andWhere('po.approveStatus = :approvedStatus');
        $query->setParameter('approvedStatus',3);

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            if($user->hasRole("ROLE_ACCOUNT_HEAD_OFFICE")){
                $query->andWhere('po.paymentFrom = :paymentFrom');
                $query->setParameter('paymentFrom',2);
                $this->handleSearchByUser($user, $query);
            }

            if($user->hasRole("ROLE_ACCOUNT_LOCAL_OFFICE")){
                $query->andWhere('po.paymentFrom = :paymentFrom');
                $query->setParameter('paymentFrom',1);
                $this->handleSearchByUser($user, $query);
            }
        }
        return $query->getQuery()->getResult();
    }

    public function getAdvanceArchivePayment()
    {
        return $this->findBy(array('advanceStatus'=>true));
    }

    public function poNoAutoComplete($poNo, User $user)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->select('po.id');
        $query->where($query->expr()->like("po.id", "'$poNo%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_ONE")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_TWO")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_THREE")){
                $query->andWhere('u IN(:user)');
                $query->setParameter('user', $user);
        }
        $query->groupBy('po.id');
        $query->orderBy('po.id', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function poRefAutoComplete($poRef, User $user)
    {
        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems', 'poi');
        $query->join('poi.purchaseRequisitionItem', 'pri');
        $query->join('pri.purchaseRequisition', 'pr');
        $query->join('pr.project', 'p');
        $query->join('p.users', 'u');
        $query->select('po.refNo as id');
        $query->addSelect('po.refNo as text');
        $query->where($query->expr()->like("po.refNo", "'$poRef%'"  ));
        if(!$user->hasRole("ROLE_SUPER_ADMIN")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_ONE")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_TWO")
            or !$user->hasRole("ROLE_PURCHASE_ORDER_APPROVE_THREE")){
                $query->andWhere('u IN(:user)');
                $query->setParameter('user', $user);
        }
        $query->groupBy('po.id');
        $query->orderBy('po.id', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function getDailyPoReport($data)
    {
        $query = $this->createQueryBuilder('po');
        $query->leftJoin('po.purchaseOrderItems', 'poi');
        $query->leftJoin('poi.purchaseRequisitionItem', 'pri');
        $query->leftJoin('pri.purchaseRequisition', 'pr');
        $query->leftJoin('pr.subCategory', 'sc');
        $query->leftJoin('pr.project', 'p');
        $query->leftJoin('po.poNonpo', 'poNo');
        $query->leftJoin('po.vendor', 'v');
        $query->leftJoin('po.buyer', 'b');
        $query->leftJoin('po.createdBy', 'cu');
        $query->leftJoin('po.approvedOne', 'oneU');
        $query->leftJoin('po.approvedTwo', 'twoU');
        $query->leftJoin('po.approvedThree', 'threeU');

        $query->select('po.id as poId');
        $query->addSelect('po.createdDate as poDate');
        $query->addSelect('po.paymentFrom as poFrom');
        $query->addSelect('po.totalOrderReceiveQuantity');
        $query->addSelect('po.totalOrderItemQuantity');
        $query->addSelect('po.advancePaymentAmount');
        $query->addSelect('po.status as status');
        $query->addSelect('po.approveStatus as approveStatus');
        $query->addSelect('pr.id as prId');
        $query->addSelect('p.projectName as projectName');
        $query->addSelect('v.vendorName as vendorName');
        $query->addSelect('poNo.name as ptName');
        $query->addSelect('po.paymentType as paymentType');
        $query->addSelect('po.paymentFrom as paymentFrom');
        $query->addSelect('po.paymentMethod as paymentMethod');
        $query->addSelect('SUM(poi.amount) as netTotal');
        $query->addSelect('cu.username as createdBy');
        $query->addSelect('oneU.username as verifiedBy');
        $query->addSelect('twoU.username as validateBy');
        $query->addSelect('threeU.username as approvedBy');
        $query->where('po.approveStatus = 3');

        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'], $query);
        $this->handleSearchByProject($data['project'], $query);
        $this->handleSearchByVendor($data['vendor'], $query);
        $this->handleSearchByPO($data['po'], $query);

        if(empty($data['start_date']) && empty($data['end_date']) && empty($data['project']) && empty($data['vendor']) && empty($data['po'])){
            $query->where('po.status = 9');
        }

        $query->groupBy('po.id');

        return $query->getQuery()->getResult();
    }

    /**
     * @param $dateStartTime
     * @param $dateEndTime
     * @param $query
     */
    protected function handleSearchBetweenDate($dateStartTime, $dateEndTime,$query)
    {

        if (!empty($dateStartTime) && !empty($dateEndTime)) {
//var_dump($dateStartTime,$dateEndTime);die;
           /* $query->andWhere('po.createdDate >= :start');
            $query->andWhere('po.createdDate <= :end');
            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');*/

            $query->andWhere('po.approvedThreeDate >= :start');
            $query->andWhere('po.approvedThreeDate <= :end');
            $query->setParameter('start', $dateStartTime.' 00:00:00');
            $query->setParameter('end', $dateEndTime.' 23:59:59');
        }
    }

    /**
     * @param $query
     * @param $start_date
     * @param $end_date
     */
    protected function handleSearchBetweenApprovalDate($query, $start_date, $end_date)
    {
        if (!empty($start_date) && !empty($end_date)) {
            $query->andWhere('po.approvedThreeDate >= :dateAfter');
            $query->andWhere('po.approvedThreeDate <= :dateBefore');
            $query->setParameter('dateAfter', $start_date.' 00:00:00');
            $query->setParameter('dateBefore', $end_date.' 23:59:59');
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {

        if (!empty($project)) {
            $query->andWhere("p.id = :project");
            $query->setParameter('project', $project);
        }
    }

    /**
     * @param $user
     * @param $query
     */
    protected function handleSearchByUser($user, $query)
    {
        if (!empty($user)) {

            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }
    }

    /**
     * @param $data
     * @param $start_date
     * @param $end_date
     * @param $query
     */
    protected function handleBudgetVsSpendSearch($data, $start_date, $end_date, $query)
    {
        if (!empty($start_date) && !empty($end_date) && !empty($data['project'])) {
            $this->handleSearchBetweenApprovalDate($query, $start_date, $end_date);
            $this->handleSearchByProject($data['project'], $query);
        } elseif (!empty($start_date) && !empty($end_date) && empty($data['project'])) {
            $this->handleSearchBetweenApprovalDate($query, $start_date, $end_date);
        } elseif (empty($start_date) && empty($end_date) && !empty($data['project'])) {
            $this->handleSearchByProject($data['project'], $query);
        } else {
            $query->where('po.createdDate is null');
        }
    }

    private function handleSearchByVendor($vendor, $query)
    {

        if (!empty($vendor)) {
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $vendor);
            $query->groupBy('v.id');
        }
    }
    private function handleSearchByArea($area, $query)
    {
        if (!empty($area)) {
            $query->andWhere('a.id = :area');
            $query->setParameter('area', $area);
            $query->groupBy('a.id');
        }
    }

    private function handleSearchByPO($po, $query)
    {
        if (!empty($po)) {
            $query->andWhere('po.id = :po');
            $query->setParameter('po', $po);
        }
    }

    public function getPaymentDetail($data)
    {
        $paymentMonthlyDetail = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $paymentMonthlyDetail[$i] = $this->getPaymentMonthlyResult($dateStart, $dateEnd);
            }

            return $paymentMonthlyDetail;
        }
    }

    public function getPaymentMonthlyResult($dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('po');
        $query->select('SUM(po.tax) as tax');
        $query->where('po.approveStatus = 3');
        $query->andWhere('po.approvedThreeDate >= :start');
        $query->andWhere('po.approvedThreeDate <= :end');
        $query->setParameter('start', $dateStart.' 00:00:00');
        $query->setParameter('end', $dateEnd.' 23:59:59');
        return $query->getQuery()->getSingleResult();
    }
    public function totalPoQuantity($dateStart, $dateEnd)
    {

        $query = $this->createQueryBuilder('po');
        $query->select('COUNT(po.id) AS PoId');
        $query->andWhere('po.approveStatus = 3');
        $query->andWhere('po.createdDate >= :start');
        $query->andWhere('po.createdDate <= :end');
        $query->setParameter('start', $dateStart.' 00:00:00');
        $query->setParameter('end', $dateEnd.' 23:59:59');
        return $query->getQuery()->getResult();
    }

    public function updatePurchaseOrderQuery($poId,$totalQuantity){

        $query = $this->createQueryBuilder('po');
        $query->update()
            ->set('po.totalOrderItemQuantity','?1')
            ->where('po.id = :id')
            ->setParameter(1, $totalQuantity)
            ->setParameter('id', $poId)
            ->getQuery()->execute();
    }

    /**
     * @param $query
     * @param $start_month
     * @param $end_month
     */
    private function handleSearchDate($start_month, $end_month,$query)
    {
        if (!empty($start_date) && !empty($end_date)) {
            $query->andWhere('po.createdDate >= :start');
            $query->andWhere('po.createdDate <= :end');
            $query->setParameter('start', $start_month.' 00:00:00');
            $query->setParameter('end', $end_month.' 23:59:59');
        }
    }

    public function getPaymentCompanyMonthlyDetail($dateStart,$dateEnd,$companyType)
    {

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->addSelect('po.id as poId');
        $query->addSelect('po.tax');
        $query->addSelect('po.createdDate as poDate');
        $query->addSelect('SUM(poi.amount) as poAmount');
        $query->addSelect('p.projectName');
        $query->where('po.approveStatus = 3');
        $this->handleSearchBetweenDate($dateStart, $dateEnd,$query);
        $this->handleSearchByCompanyType($companyType,$query);
        $query->groupBy('po.id');
        $query->orderBy('p.projectName','ASC');

        $paymentCompany[] = $query->getQuery()->getResult();
        return $paymentCompany;

    }

    public function getPurchaseOrderByVendor($vendor)
    {
        if(!empty($vendor)){

            $query = $this->createQueryBuilder('po');
            $query->leftJoin('po.vendor', 'v');
            $query->select('v.vendorName as vendorName');
            $query->addSelect('po.id as poId');
            $query->addSelect('po.netTotal as PoTotal');
            $query->addSelect('po.approvedThreeDate as poIssueDate');
            $query->addSelect('po.advancePaymentAmount as advancePayment');
            $query->where('po.approveStatus = 3');
            $query->andWhere('v.id = :vendor');
            $query->setParameter('vendor', $vendor);
            $query->orderBy('v.vendorName', 'ASC');
            $results =  $query->getQuery()->getResult();

            $data = array();
            foreach($results as $row){
                $data[$row['poId']] = $row;
            }
            return $data;
        } else {
            return false;
        }
    }
    public function getPoReportInFo($data)
    {

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.item','i');
        $query->join('poi.project','p');
        $query->join('i.category','c');
        $query->select('i.id as itemId');
        $query->addSelect('SUM(poi.quantity) as PoQty');
        $query->addSelect('SUM(poi.amount) as poAmount');
        $query->where('po.approveStatus = 3');
        $this->handleSearchByProject($data['project'],$query);
        $this->handleSearchByCategory($data['category'],$query);
        $this->handleSearchBetweenDate($data['start_date'], $data['end_date'],$query);
        $query->groupBy('i.id');

        $results = $query->getQuery()->getResult();
        $data = array();
        foreach($results as $row){
            $data[$row['itemId']] = $row;
        }
 return $data;

    }
    private function handleSearchByCategory($category, $query)
    {

        if (!empty($category)) {
            $query->andWhere('c.id = :category');
            $query->setParameter('category', $category);
        }
    }

    public function getTotalPoAmountByCompanyType($companyType,$start_date,$end_Date){

        $query = $this->createQueryBuilder('po');
        $query->join('po.purchaseOrderItems','poi');
        $query->join('poi.project','p');
        $query->select('SUM(poi.amount) as poAmount');
        $query->where('po.approveStatus = 3');
        $this->handleSearchBetweenDate($start_date, $end_Date,$query);
        $this->handleSearchByCompanyType($companyType,$query);


        return  $query->getQuery()->getSingleResult();

    }

    public function getTotalPoAmountByMonthly($data)
    {
        $paymentCompany = array();

        if (!empty($data['year'])) {

            for ($i = 1; 12 >= $i ; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));
                $paymentCompany[$i] = $this->getTotalPoAmountByCompanyType($data['companyType'],$dateStart, $dateEnd);
            }

            return $paymentCompany;
        }

    }

}
