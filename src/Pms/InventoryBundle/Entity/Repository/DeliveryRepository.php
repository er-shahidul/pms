<?php

namespace Pms\InventoryBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\InventoryBundle\Entity\Delivery;
use Pms\InventoryBundle\Entity\DeliveryItem;

/**
 * DeliveryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryRepository extends EntityRepository
{
    public function create($data)
    {
        /** @var Delivery $data */
        /** @var DeliveryItem $item */

        foreach ($data->getDeliveryItem() as $item) {
            $item->setDelivery($data);
        }
        $this->_em->persist($data);
        $this->_em->flush();
        return $data;
    }

    public function totalUsedReceivedItem() {

    }

    public function delete($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function update($data)
    {
        /** @var Delivery $data */
        /** @var DeliveryItem $item */
        foreach ($data->getDeliveryItem() as $item) {
            $item->setDelivery($data);
        }
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getAll(){
        return $this->findAll();
    }

    public function getAllById($data){
        return $this->findOneBy($data);
    }

    public function getPassNumberByProjectId($projectId){

        $getAllPassId = $this->_em->getRepository('PmsInventoryBundle:Delivery')
            ->createQueryBuilder('d')
            ->select('d.getPass')
            ->where('d.project = :project')
            ->setParameter('project',$projectId );
        $allPassId     = $getAllPassId->getQuery()->getResult();

        return $allPassId;
    }

    public function getDeliveryData($data, $user)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->join('d.project', 'p');
        $qb->join('p.users', 'u');
        $qb->join("d.deliveryItem" ,'di');
        $qb->select("d");
        $qb->orderBy("d.createdDate","DESC");

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $qb->andWhere('u IN(:user)');
            $qb->setParameter('user', $user);
        }

        if(!empty($data['project'])){
            $qb->andWhere($qb->expr()->eq("d.project", $data['project'] ));
        }
        if(!empty($data['gatePass'])){
            $gatePass = $data['gatePass'];
            $qb->andWhere($qb->expr()->eq("d.getPass", $gatePass ));
        }
        if(!empty($data['deliveryDate'])){
            $date = $data['deliveryDate']." 00:00:00";
            $qb->andWhere($qb->expr()->like("d.createdDate", "'%$date%'"  ));
        }

        if(!empty($data['item'])){
            $qb->andWhere($qb->expr()->eq("di.item", $data['item'] ));
        }

        return $qb;
    }
    public function DeliveryReportData($data, $user)
    {

        $query = $this->createQueryBuilder('d');
        $query->join('d.project', 'p');
        $query->join('d.category','c');
        $query->join('d.subCategory','sc');
        $query->join('d.costHeader','ch');
        $query->join('p.users', 'u');
        $query->join("d.deliveryItem" ,'di');

        $query->orderBy("d.createdDate","DESC");

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        if(!empty($data['start_date'] && !empty($data['end_date']))) {
            $query->andWhere('d.createdDate >= :dateAfter');
            $query->andWhere('d.createdDate <= :dateBefore');
            $query->setParameter('dateAfter', $data['start_date'].' 00:00:00');
            $query->setParameter('dateBefore', $data['end_date'].' 23:59:59');
        }
        if(!empty($data['item'])){
            $query->andWhere('di.item = :item');
            $query->setParameter('item', $data['item']);
        }
        if(!empty($data['project'])){
            $query->andWhere('d.project = :project');
            $query->setParameter('project', $data['project']);
        }
        return $query;
    }
    public function DeliveryReportDataExcel($data, $user)
    {

        $query = $this->createQueryBuilder('d');
        $query->join('d.project', 'p');
        $query->join('d.category','c');
        $query->join('d.subCategory','sc');
        $query->join('d.costHeader','ch');
        $query->join('p.users', 'u');
        $query->join("d.deliveryItem" ,'di');
        $query->select("d");
        $query->orderBy("d.createdDate","DESC");

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        if(!empty($data['start_date'] && !empty($data['end_date']))) {
            $query->andWhere('d.createdDate >= :dateAfter');
            $query->andWhere('d.createdDate <= :dateBefore');
            $query->setParameter('dateAfter', $data['start_date'].' 00:00:00');
            $query->setParameter('dateBefore', $data['end_date'].' 23:59:59');
        }
        if(!empty($data['item'])){
            $query->andWhere('di.item = :item');
            $query->setParameter('item', $data['item']);
        }
        if(!empty($data['project'])){
            $query->andWhere('d.project = :project');
            $query->setParameter('project', $data['project']);
        }

        return $query->getQuery()->getResult();

    }

    public function userDeliveryListReport($data)
    {
        if (!empty($data['start_date']) && !empty($data['end_date'])) {

            $userReceiveQuery    = $this
                ->createQueryBuilder('d')
                ->join('d.project', 'p')
                ->join('d.createdBy', 'u')
                ->join('u.groups', 'g')
                ->select('u.username')
                ->addSelect('g.name')
                ->addSelect('p.id')
                ->addSelect('p.projectName')
                ->addSelect('COUNT(d.id) as totalD')
                ->where('d.createdDate >= :start_date')
                ->andWhere('d.createdDate <= :end_date')
                ->setParameter('start_date', $data['start_date'])
                ->setParameter('end_date', $data['end_date'])
                ->groupBy('u.id', 'p.id')
                ->orderBy('u.username', 'ASC');
            $userReceive        = $userReceiveQuery->getQuery()->getResult();
        } else {
            $userReceiveQuery    = $this
                ->createQueryBuilder('d')
                ->join('d.project', 'p')
                ->join('d.createdBy', 'u')
                ->join('u.groups', 'g')
                ->select('u.username')
                ->addSelect('g.name')
                ->addSelect('p.id')
                ->addSelect('p.projectName')
                ->addSelect('COUNT(d.id) as totalD')
                ->where('d.status is null')
                ->groupBy('u.id', 'p.id')
                ->orderBy('u.username', 'ASC');
            $userReceive        = $userReceiveQuery->getQuery()->getResult();
        }

        return $userReceive;
    }

    public function getDeliveryCount($id, $data)
    {
        $userDeliveryQuery    = $this
            ->createQueryBuilder('d')
            ->join('d.project', 'p')
            ->join('d.createdBy', 'u')
            ->join('u.groups', 'g')
            ->select('COUNT(d.id) as totalTD')
            ->where('p.id = :pId')
            ->andWhere('d.createdDate >= :start_date')
            ->andWhere('d.createdDate <= :end_date')
            ->setParameter('start_date', $data['start_date'])
            ->setParameter('end_date', $data['end_date'])
            ->setParameter('pId', $id);
      return  $userDelivery        = $userDeliveryQuery->getQuery()->getSingleScalarResult();
    }

    public function totalDailyIssueItem($project, $item)
    {

        $date = date('Y-m-d');
        $qb = $this->createQueryBuilder('d');
        $qb->join('d.deliveryItem', 'di');
        $qb->select('SUM(di.quantity)');
        $qb->where("d.project= :project");
        $qb->andWhere("di.item = :item");
        $qb->andWhere($qb->expr()->like("d.createdDate", "'%$date%'"  ));
        $qb->setParameter('project', $project);
        $qb->setParameter('item', $item);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTrendIssuingReport($data)
    {

        if (!empty($data['year']) && !empty($data['item']) && !empty($data['project'])) {

            for ($i = 1; $i < 13; $i++) {
                $dateStart = date('Y-' . $i . '-d', (strtotime($data['year'])));
                $dateEnd = date('Y-' . $i . '-t', (strtotime($data['year'])));

                $trendUsageRMonthReport[] = $this->trendIssueMonthReport($data['item'], $data['project'], $dateStart, $dateEnd);
            }

            return $trendUsageRMonthReport;
        }
    }
    private function trendIssueMonthReport($item, $project, $dateStart, $dateEnd)
    {
        $query = $this->createQueryBuilder('d');
        $query->join('d.deliveryItem', 'di');
        $query->join('d.project', 'p');
        $query->join('di.item', 'i');
        $query->select('SUM(di.quantity) as itemUsageQuantity');
        $query->addSelect('i.itemName');
        $query->addSelect('p.projectName');
      //  $query->groupBy('di.delivery');
        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);
        $this->handleSearchBetweenDate($query, $dateStart, $dateEnd);

        return $query->getQuery()->getSingleResult();
    }

    /**
     * @param $query
     * @param $monthStart
     * @param $monthEnd
     */
    protected function handleSearchBetweenDate($query, $monthStart, $monthEnd)
    {
        if (!empty($monthStart) && !empty($monthEnd)) {
            $query->andWhere('d.createdDate >= :start_date');
            $query->andWhere('d.createdDate <= :end_date');
            $query->setParameter('start_date', $monthStart.' 00:00:00');
            $query->setParameter('end_date', $monthEnd.' 23:59:59');
        }
    }

    /**
     * @param $project
     * @param $query
     */
    protected function handleSearchByProject($project, $query)
    {
        if (!empty($project)) {
            $query->andWhere("p.id = :project");
            $query->setParameter('project', $project);
        }
    }
    /**
     * @param $item
     * @param $query
     */
    protected function handleSearchByItem($item, $query)
    {
        if (!empty($item)) {
            $query->andWhere("i.id = :item");
            $query->setParameter('item', $item);
        }
    }

    public function getTotalReceiveByProjectQty($project,$item){

        $query = $this->createQueryBuilder('d');
        $query->join('d.deliveryItem', 'di');
        $query->join('d.issuedToProject', 'p');
        $query->join('di.item', 'i');
        $query->select('SUM(di.quantity) as itemUsageQuantity');

        $query->where("d.deliveryType = 'project'");
        if (!empty($project)) {
            $query->andWhere("d.issuedToProject = :project");
            $query->setParameter('project', $project);
        }
//        $this->handleSearchByProject($project, $query);
        $this->handleSearchByItem($item, $query);

        return $query->getQuery()->getSingleResult();
    }
}
