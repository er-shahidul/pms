<?php

namespace Pms\InventoryBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Pms\InventoryBundle\Entity\Delivery;

/**
 * TotalReceiveItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TotalReceiveItemRepository extends EntityRepository
{
    public function getAll()
    {
        $getTotalItem = $this->createQueryBuilder('tri')
            ->join('tri.item', 'i')
            ->select('i.itemName')
            ->addSelect('i.id')
            ->orderBy('i.itemName','ASC');

        return $getTotalItem->getQuery()->getResult();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getCategoryWiseItem($category,$project)
    {
        $query = $this->createQueryBuilder('tri');
        $query->join('tri.item', 'i');
        $query->join('i.category', 'c');
        $query->join('tri.project', 'p');
        $query->select('i.id');
        $query->addSelect('i.itemName');
        $query->addSelect('p.id as Projectid');

        $query->where('c.id = :category');
        $query->setParameter('category', $category);

        $query->andWhere('p.id = :project');
        $query->setParameter('project', $project);
        $query->orderBy('i.itemName', 'asc');

        return $query->getQuery()->getResult();
    }

    public function getStockData($data)
    {

        $qb = $this->createQueryBuilder('tri');

        $qb->join("tri.project" ,'p');
        $qb->join("tri.item" ,'i');
        $qb->orderBy('i.itemName','ASC');

        if(!empty($data['item'])) {

            $qb->andWhere($qb->expr()->eq("i.id", $data['item'] ));
        }
        if(!empty($data['project'])){
            $qb->andWhere($qb->expr()->eq("p.id", $data['project'] ));
        }

        if(!empty($data['search'])){
                $qb->andWhere('tri.createdDate >= :dateAfter');
                $qb->andWhere('tri.createdDate <= :dateBefore');
                $qb->setParameter('dateAfter', $data['search']['start_date'].' 00:00:00');
                $qb->setParameter('dateBefore', $data['search']['end_date'].' 23:59:59');
        }
        return $qb;
    }

    public function getInventoryItemWiseReport($data)
    {

        if(!empty($data)){

            $qb = $this->createQueryBuilder('tri');
            $qb->select('((tri.totalItem + tri.openItem ) - tri.totalUsedItem) as stockInHandQty');
            $qb->addSelect('i.price');
            $qb->addSelect('p.projectName');
            $qb->addSelect('tri.createdDate');
            $qb->join("tri.project" ,'p');
            $qb->join("tri.item" ,'i');
            $qb->groupBy('tri.project','tri.item');
            $qb->orderBy('tri.createdDate', 'desc');

            if(empty($data['start_date']) or empty($data['end_date'])){
                return false;
            }

            $start      = $data['start_date'].' 00:00:01';
            $curDate    = date('Y-m-d h:m:s');
            $start_date = $data['start_date'] ? $start : $curDate;
            $end_date   = $data['end_date'].' 23:59:59';

            $qb ->where('tri.createdDate >= :dateAfter');
            $qb->setParameter('dateAfter', $start_date);

            if($data['end_date']) {
                $qb->andWhere('tri.createdDate <= :dateBefore');
                $qb->setParameter('dateBefore', $end_date);
            }
            if(!empty($data['item'])){
                $qb->andWhere($qb->expr()->eq("tri.item", $data['item'] ));
            }

            return $qb->getQuery()->getResult();
        } else{
            return false;
        }

    }



    public function getItemRemainingQuantityByProjectId($item,$project_id){

        $itemReceiveByProjectQty =  $this->getQuantityReceivedByProject($item,$project_id);
        if(!empty($itemReceiveByProjectQty)){
            $receiveByProjectQty = $itemReceiveByProjectQty['itemUsageQuantity'];
        } else {
            $receiveByProjectQty = 0;
        }

        $getTotalQuantity = $this->createQueryBuilder('ti')
            ->join('ti.item', 'i')
            ->join('i.itemType', 'it')
            ->join('ti.project', 'p')
            ->select('SUM(ti.totalItem + ti.openItem) - (ti.totalUsedItem) AS remainingQuantity')
            ->addSelect('i.itemUnit')
            ->addSelect('it.itemType')
            ->where('p.id = :project')
            ->andWhere('i.id = :item')
            ->setParameter('project',$project_id )
            ->setParameter('item', $item )
            ->groupBy('ti.project');

        $result =  $getTotalQuantity->getQuery()->getSingleResult();
        $result['remainingQuantity'] = $result['remainingQuantity'] + $receiveByProjectQty;
        return $result;

    }

    public function getQuantityReceivedByProject($item,$project_id){

        $query= $this->_em->getRepository('PmsInventoryBundle:Delivery')
             ->createQueryBuilder('d');
        $query->join('d.deliveryItem', 'di');
        $query->join('d.issuedToProject', 'p');
        $query->join('di.item', 'i');
        $query->select('SUM(di.quantity) as itemUsageQuantity');
        $query->where("d.deliveryType = 'project'");
        $query->andWhere("d.issuedToProject = :project");
        $query->setParameter('project', $project_id);
        $query->andWhere('i.id = :item');
        $query->setParameter('item', $item );
        $result =  $query->getQuery()->getSingleResult();
        return $result;
    }

    public function saveUsedDeliveryItem($deliveries)
    {
        $projectId = $deliveries->getProject()->getId();

        $totalReceiveItemRepo = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem');

        foreach($deliveries->getDeliveryItem() as $item) {

            $itemId = $item->getItem()->getId();

            $receiveItem = $totalReceiveItemRepo->findOneBy(
                array('project' =>$projectId,'item' => $itemId)
            );

                $useItemQuantity = $this->getTotalUseItemQuantity($itemId,$projectId);
                $receiveItem->setTotalUsedItem($useItemQuantity[0]['totalUseQuantity']);

                    $receiveItem = $totalReceiveItemRepo->findOneBy(
                        array('project' =>$projectId,'item' => $itemId)
                    );


                $receiveItem->setCreatedDate(new \DateTime(date('Y-m-d')));
                $this->_em->persist($receiveItem);
        }
            $this->_em->flush();
    }
    public function saveUsedDeliveryItemProject($deliveries)
    {

        $issuedTo = $deliveries->getIssuedToProject()->getId();

        $totalReceiveItemRepo = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem');

        foreach($deliveries->getDeliveryItem() as $item) {

            $itemId = $item->getItem()->getId();

            $receiveItem = $totalReceiveItemRepo->findOneBy(
                array('project' =>$issuedTo,'item' => $itemId)
            );

            $useItemQuantity = $this->getTotalUseItemProjectQuantity($itemId,$issuedTo);

            $receiveItem->setReceiveByProjectQty($useItemQuantity[0]['totalUseQuantity']);
                $receiveItem = $totalReceiveItemRepo->findOneBy(
                    array('project' =>$issuedTo,'item' => $itemId)
                );

            $receiveItem->setCreatedDate(new \DateTime(date('Y-m-d')));
            $this->_em->persist($receiveItem);
        }
        $this->_em->flush();
    }
    public function getTotalUseItemQuantity($item,$project_id){

        $getUseQuantity = $this->_em->getRepository('PmsInventoryBundle:DeliveryItem')
            ->createQueryBuilder('di')
            ->join('di.item', 'i')
            ->join('di.delivery', 'd')
            ->select('SUM(di.quantity) AS totalUseQuantity')
            ->where('d.project = :project')
            ->andWhere('i.id = :item')
            ->setParameter('project',$project_id )
            ->setParameter('item', $item )
            ->groupBy('i.id');
        $totalUseQuantity     = $getUseQuantity->getQuery()->getResult();

        return $totalUseQuantity;
    }
    public function getTotalUseItemProjectQuantity($item,$project_id){

        $getUseQuantity = $this->_em->getRepository('PmsInventoryBundle:DeliveryItem')
            ->createQueryBuilder('di')
            ->join('di.item', 'i')
            ->join('di.delivery', 'd')
            ->select('SUM(di.quantity) AS totalUseQuantity')
            ->where('d.issuedToProject = :project')
            ->andWhere('i.id = :item')
            ->setParameter('project',$project_id )
            ->setParameter('item', $item )
            ->groupBy('i.id');
        $totalUseQuantity     = $getUseQuantity->getQuery()->getResult();

        return $totalUseQuantity;
    }

    public function getItemAvailableStockQuantityItems($project, $item)
    {
        $itemLastReceiveQuery = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
            ->createQueryBuilder('tri')
            ->join('tri.item', 'i')
            ->select('(tri.totalItem) - (tri.totalUsedItem) + (tri.openItem) AS stock')
            ->addSelect('i.itemName')
            ->where("tri.project = :project")
            ->andWhere("tri.item = :item")
            ->setParameter('project', $project)
            ->setParameter('item', $item)
            ->orderBy('tri.id', 'DESC')
            ->setMaxResults(1);
        $itemAvailableStockQuantityItems = $itemLastReceiveQuery->getQuery()->getResult();

        return $itemAvailableStockQuantityItems;
    }

    public function existingTotalItemCheck($project,$item)
    {
        $qb = $this->createQueryBuilder('tri');
        $qb->join('tri.item', 'i');
        $qb->select('tri.totalItem + tri.openItem');
        $qb->where("tri.project = :project");
        $qb->andWhere("tri.item = :item");
        $qb->setParameter('project', $project);
        $qb->setParameter('item', $item);

          return $qb->getQuery()->getSingleScalarResult();

    }

    public function itemDeliveryAutoComplete($itemName, $getUser)
    {

        $query = $this->createQueryBuilder('tri');
        $query->join('tri.item','i');
        $query->select('i.id');
        $query->addSelect('i.itemName as text');
        $query->where($query->expr()->like("i.itemName", "'$itemName%'"  ));
        $query->orderBy('i.itemName', 'ASC');
        $query->setMaxResults( '10' );

        return $query->getQuery()->getResult();
    }

    public function findItem($item)
    {
        $query = $this->createQueryBuilder('tri');
        $query->join('tri.item','i');
        $query->select('i.id');
        $query->addSelect('i.itemName as text');
        $query->where("tri.item = :item");
        $query->setParameter('item', $item);
        $query->orderBy('i.itemName', 'ASC');
        $query->groupBy('tri.item');

        return $query->getQuery()->getResult();
    }
    public function  getTotalOpeningQty($data) {

        $qb = $this->createQueryBuilder('tri');
        $qb ->leftJoin('tri.project','p')
            ->leftJoin('tri.projectTo','pt')
            ->leftJoin('tri.item','i')
            ->select('tri.openItem')
            ->addSelect('i.id as itemId')
            ->addSelect('i.itemUnit')
            ->addSelect('i.itemName')
            ->addSelect('tri.price')
            ->addSelect('tri.maxStockCount')
            ->addSelect('tri.minStockCount')
            ->addSelect('tri.id')
            ->addSelect('tri.openingDate')
            ->addSelect('pt.id AS projectToId')
            ->addSelect('p.id AS projectFromId')
            ->addSelect('tri.receiveByProjectQty')
            ->addSelect('tri.totalItem');
        $this->filteringByProject($data, $qb);
        $this->filteringByItem($data,$qb);
        $qb->orderBy('i.itemName','ASC');
        $results = $qb->getQuery()->getResult();

        $date = new DateTime($data['start_date']);

        $data = array();
        foreach($results as $result ){

            $result['openItem'] = $result['openingDate'] == null  || $date->diff($result['openingDate'])->days > 1 ? $result['openItem'] : 0;
            $result['openingTotal'] = $result['openItem'] * $result['price'] ;
            $data[$result['itemId']] = $result;
        }

        return $data;
    }
    public function  getTotalReceiveByProjectQty($data) {

        $qb = $this->createQueryBuilder('tri');
        $qb ->leftJoin('tri.project','p')
            ->leftJoin('tri.item','i')
            ->leftJoin('tri.projectTo','pt')
            ->select('tri.openItem')
            ->addSelect('i.id as itemId')
            ->addSelect('i.itemUnit')
            ->addSelect('i.itemName')
            ->addSelect('tri.price')
            ->addSelect('tri.maxStockCount')
            ->addSelect('tri.minStockCount')
            ->addSelect('tri.id')
            ->addSelect('tri.openingDate')
            ->addSelect('pt.id AS projectToId')
            ->addSelect('p.id AS projectFromId')
            ->addSelect('tri.receiveByProjectQty')
            ->addSelect('tri.totalItem');
        $this->filteringReceiveByProject($data, $qb);
        $this->filteringByItem($data,$qb);
        $qb->orderBy('i.itemName','ASC');
        $results = $qb->getQuery()->getResult();

        $date = new DateTime($data['start_date']);

        $data = array();

        foreach($results as $result ){

            $result['openItem'] = $result['openingDate'] == null  || $date->diff($result['openingDate'])->days > 1 ? $result['openItem'] : 0;
            $result['openingTotal'] = $result['openItem'] * $result['price'] ;
            $result['ReceiveByProjectQty'] =  $result['receiveByProjectQty'];
//
            $data[$result['itemId']] = $result;
        }

        return $data;
    }

    public function filteringByItem($data,$qb){
        if(!empty($data['item'])){
            $qb->andWhere('i.id = :item');
            $qb->setParameter('item', $data['item']);
        }
    }

    /**
     * @param $data
     * @param $qb
     */
    private function filteringByProject($data, $qb)
    {
        if(!empty($data['project'])) {

            $qb->andWhere('p.id = :project');
            $qb->setParameter('project', $data['project']);
        }
    }
    /**
     * @param $data
     * @param $qb
     */
    private function filteringReceiveByProject($data, $qb)
    {
        if(!empty($data['project'])) {

            $qb->andWhere('p.id = :project');
            $qb->setParameter('project', $data['project']);
        }
    }

}
