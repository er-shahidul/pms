<?php

namespace Pms\InventoryBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Pms\InventoryBundle\Entity\DeliveryItem;

/**
 * DeliveryItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryItemRepository extends EntityRepository
{

    public function getItemQuantityByProjectId($item,$project_id){

        $getTotalQuantity = $this->_em->getRepository('PmsInventoryBundle:TotalReceiveItem')
            ->createQueryBuilder('ti')
            ->join('ti.item', 'i')
            ->join('ti.project', 'p')
            ->select('SUM(ti.totalItem) AS totalQuantity')
            ->addselect('(ti.totalUsedItem) AS totalUsedItemQuantity')
            ->where('p.id = :project')
            ->andWhere('i.id = :item')
            ->setParameter('project',$project_id )
            ->setParameter('item', $item )
            ->groupBy('ti.project');
        $totalQuantity     = $getTotalQuantity->getQuery()->getResult();

        return $totalQuantity;
    }

    public function existingItemCheck($project, $item)
    {

    }

    public function DeliveryReportData($data, $user)
    {
        if(empty($data)){
            return false;
        }

        $query = $this->createQueryBuilder('di');
        $query->join("di.delivery" ,'d');
  /*      $query->leftJoin("di.item" ,'i');
        $query->leftJoin("d.createdBy" ,'cb');
        $query->leftJoin("d.customerId" ,'ci');*/
        $query->join('d.project', 'p');
        $query->join('d.category','c');
        $query->join('d.subCategory','sc');
        $query->join('d.costHeader','ch');
        $query->join('p.users', 'u');

     /*   $query->select('i.itemName as itemName');
        $query->addSelect('i.itemUnit as itemUnit');
        $query->addSelect('di.quantity as deliveryQuantity');
        $query->addSelect('d.createdDate as createdDate');
        $query->addSelect('cb.fullName as issuedBy');
        $query->addSelect('ci.fullName as issuedTo');
        $query->addSelect('p.projectName as projectName');
        $query->addSelect('d.getPass as gatePass');
        $query->addSelect('c.categoryName as categoryName');
        $query->addSelect('sc.subCategoryName as subCategoryName');
        $query->addSelect('ch.title as costHeader');
        $query->addSelect('i.id as itemId');
        $query->addSelect('p.id as projectId');*/


        $query->orderBy("d.createdDate","DESC");

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $query->andWhere('u IN(:user)');
            $query->setParameter('user', $user);
        }

        if(!empty($data['start_date'] && !empty($data['end_date']))) {
            $query->andWhere('d.createdDate >= :dateAfter');
            $query->andWhere('d.createdDate <= :dateBefore');
            $query->setParameter('dateAfter', $data['start_date'].' 00:00:00');
            $query->setParameter('dateBefore', $data['end_date'].' 23:59:59');
        }
        if(!empty($data['item'])){
            $query->andWhere('di.item = :item');
            $query->setParameter('item', $data['item']);
        }
        if(!empty($data['project'])) {

            $query->andWhere('d.project = :project');
            $query->setParameter('project', $data['project']);
        }


          $results =  $query->getQuery()->getResult();
        $arrayList = array();
        foreach ($results as $key => $row) {
            $avgPrice = $this->collectItemAvgPrice($row);
            $row->setAvgPrice($avgPrice);
            $arrayList[] = $row;
            }

        return $results;
    }

    public function collectItemAvgPrice($data){

        $qb = $this->_em->getRepository('PmsCoreBundle:PurchaseOrderItem');
        $qb = $qb->createQueryBuilder('poi');
        $qb->select('AVG(poi.price)');
        $qb->andWhere('poi.item = :item');
        $qb->setParameter('item', $data->getItem()->getId());
        $qb->andWhere('poi.project = :project');
        $qb->setParameter('project', $data->getDelivery()->getProject()->getId());
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }

    public function getDeliveryData($data, $user,$deliveryType)
    {

        $qb = $this->createQueryBuilder('di');
        $qb->join("di.delivery" ,'d');
        $qb->join('d.project', 'p');
        $qb->join('d.category','c');
        $qb->join('d.subCategory','sc');
        $qb->join('d.costHeader','ch');
        $qb->join('p.users', 'u');
        $qb->orderBy("d.createdDate","DESC");

        if(!$user->hasRole("ROLE_SUPER_ADMIN")){
            $qb->andWhere('u IN(:user)');
            $qb->setParameter('user', $user);
        }

        if(!empty($data['project'])){

            $qb->andWhere('p.id = :project');
            $qb->setParameter('project',$data['project']);
        }
        if(!empty($data['gatePass'])){
            $gatePass = $data['gatePass'];
            $qb->andWhere($qb->expr()->eq("d.getPass", $gatePass ));
        }
        if(!empty($data['deliveryDate'])){
            $date = $data['deliveryDate']." 00:00:00";
            $qb->andWhere($qb->expr()->like("d.createdDate", "'%$date%'"  ));
        }

        if($deliveryType == 'individual'){
            $qb->andWhere("d.deliveryType != 'project' OR d.deliveryType IS NULL ");
        }
        if($deliveryType == 'project') {

            $qb->andWhere('d.deliveryType = :type');
            $qb->setParameter('type',$deliveryType);
        }

        if(!empty($data['item'])){
            $qb->andWhere($qb->expr()->eq("di.item", $data['item'] ));
        }

        return $qb;
    }


}
