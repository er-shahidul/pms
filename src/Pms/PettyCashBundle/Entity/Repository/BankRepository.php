<?php

namespace Pms\PettyCashBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BankRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BankRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function getTotalAddedBalance()
    {
        $totalAddedBalance = $this
            ->createQueryBuilder('b')
            ->select('SUM(b.amount) as TotalAddedBalance')
            ->where('b.status = :add')
            ->setParameter('add', 'add');
        $addedBalance      = $totalAddedBalance->getQuery()->getResult();
        return $addedBalance;
    }

    public function getTotalSubtractBalance()
    {
        $totalSubtractBalance = $this
            ->createQueryBuilder('b')
            ->select('SUM(b.amount) as TotalSubtractBalance')
            ->where('b.status = :subtract')
            ->setParameter('subtract', 'subtract');
        $subtractBalance      = $totalSubtractBalance->getQuery()->getResult();
        return $subtractBalance;
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getBankLists($data) {

        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this
            ->createQueryBuilder('b')
            ->leftJoin('b.createdBy','cb')
            ->select('b.id as bankId')
            ->addSelect('b.createdDate')
            ->addSelect('b.amount')
            ->addSelect('b.status')
            ->addSelect('b.notes')
            ->addSelect('cb.username');

        if(!empty($month)) {

            $query->andWhere('b.createdDate >= :start')
                ->andWhere('b.createdDate <= :end')
                ->setParameter('start', $start_date.' 00:00:00')
                ->setParameter('end', $end_date.' 23:59:59');
        }

       $result  = $query->getQuery()->getArrayResult();

        return $result;
    }

    public function getTotalBankAmount(){
        $totalBankAmount = $this
            ->createQueryBuilder('b')
            ->select('SUM(b.amount) as TotalBankAmount');
        $bankAmount      = $totalBankAmount->getQuery()->getResult();
        return $bankAmount;
    }
}
