<?php

namespace Pms\PettyCashBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{

    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getTotalCashAmount(){
        $getTotalCashAmount = $this
            ->createQueryBuilder('t')
            ->join('t.transactTo','u')
            ->select('SUM(t.transactionAmount) as TotalCashAmount')
            ->addSelect('u.username')
            ->where('t.status = :acknowledged')
            ->andWhere('t.transactionType = :cash')
            ->setParameter('acknowledged', 'acknowledged')
            ->setParameter('cash', 'cash')
            ->groupBy('t.transactTo');
         $totalCashAmount     = $getTotalCashAmount->getQuery()->getResult();

        return $totalCashAmount;
    }
    public function getTotalInvoiceAmount(){
        $getTotalInvoiceAmount = $this
            ->createQueryBuilder('t')
            ->join('t.transactTo','u')
            ->select('SUM(t.transactionAmount) as TotalInvoiceAmount')
            ->addSelect('u.username')
            ->where('t.status = :acknowledged')
            ->andWhere('t.transactionType = :invoice')
            ->setParameter('acknowledged', 'acknowledged')
            ->setParameter('invoice', 'invoice')
            ->groupBy('t.transactTo');
        $totalInvoiceAmount     = $getTotalInvoiceAmount->getQuery()->getResult();
        return $totalInvoiceAmount;
    }

    public function getAllByCreatedBy($userId,$data) {

        $month = $data['start_date'];

        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this
            ->createQueryBuilder('t');
        $query->orderBy('t.createdDate','DESC');
        if($userId){

            $query->where('t.createdBy = :user or t.transactTo = :user')
                  ->setParameter('user', $userId);
        }

        if(!empty($month)){

            $query->andWhere('t.createdDate >= :start')
                ->andWhere('t.createdDate <= :end')
                ->setParameter('start', $start_date.' 00:00:00')
                ->setParameter('end', $end_date.' 23:59:59');
        }

        $transactionLists = $query->getQuery()->getResult();
        return $transactionLists;
    }

    public function getAllTransaction($data) {

        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        if(empty($month)){
            return false ;
        }

        $Transactions = $this
            ->createQueryBuilder('t')
            ->leftJoin('t.transactTo','ut')
            ->leftJoin('t.createdBy','cb')
            ->select('t.id as transactionId')
            ->addSelect('t.transactionAmount')
            ->addSelect('t.transactionType')
            ->addSelect('t.status')
            ->addSelect('ut.username as TransactTo')
            ->addSelect('cb.username as TransactFrom')
            ->where('t.status = :acknowledged')
            ->setParameter('acknowledged', 'acknowledged')
            ->andWhere('t.createdDate >= :start')
            ->andWhere('t.createdDate <= :end')
            ->setParameter('start', $start_date.' 00:00:00')
            ->setParameter('end', $end_date.' 23:59:59');

        $results     = $Transactions->getQuery()->getResult();
        $dataInfo = array();
        $transactionIds = array();
       foreach ($results as $result ){
           $transactionIds[] = $result['transactionId'];
           $dataInfo[$result['transactionId']] = $result;
       }

        $transactionHistories = $this->_em->getRepository('PmsPettyCashBundle:TransactionHistory')
                                     ->getAllTransactionHistory($transactionIds);

        $transactionList = array();

        foreach ($dataInfo as $id => $data) {

            if(!isset($transactionHistories[$id])) {
                continue;
            }
            $transaction = array(
                'transactionId' => $data['transactionId'],
                'given Amount' => $data['transactionAmount'],
                'as' =>$data['transactionType'],
                'from' =>$data['TransactFrom'],
                'to' =>$data['TransactTo'],
                'status' =>$data['status'],
                'history' => $transactionHistories[$id]
            );
            $transactionList[] = $transaction;
        }
        var_dump($transactionList);die;
    return $transactionList;
    }

   


}
