<?php

namespace Pms\PettyCashBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;

/**
 * TransactionHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionHistoryRepository extends EntityRepository
{
    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getPettyCashReport1($data)
    {
        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $pettyCashReport = array();
        $indexTransactType = array();

        while (strtotime($start_date) < strtotime($end_date)) {

                    $start_date = date ("Y-m-d", strtotime("+1 day", strtotime($start_date)));
             $query = $this->createQueryBuilder('th')
                 ->leftJoin('th.transaction','t')
                 ->leftJoin('t.createdBy','u')
                 ->leftJoin('t.transactTo','ut')
                 ->select('th.transactionHistoryAmount')
                 ->addSelect('th.transactionType')
                 ->addSelect('ut.username as transactTo')
                 ->addSelect('u.username as  transactFrom')
                 ->addSelect('t.id as transactionId')
                 ->addSelect('t.notes as description')
                ->andWhere('th.createdDate >= :start')
                ->andWhere('th.createdDate <= :end')
                ->setParameter('start', $start_date.' 00:00:00')
                ->setParameter('end', $start_date.' 23:59:59')
                ->groupBy('th.transactionType');
            $pettyCashReport[$start_date] = $query->getQuery()->getResult();

            foreach ($pettyCashReport[$start_date] as $list){

                $cashList = $list;
                unset($cashList['transactTo'],$cashList['transactFrom'],
                    $cashList['description'],$cashList['transactionId']);
                $indexTransactType[$list['transactionType']] = $cashList;
                $indexTransactType['transactTo'] = $list['transactTo'];
                $indexTransactType['transactFrom'] = $list['transactFrom'];
                $indexTransactType['description'] = $list['description'];
                $indexTransactType['transactionId'] = $list['transactionId'];
      
                $pettyCashReport[$start_date] = $indexTransactType;
            }
        }


            return $pettyCashReport;
    }
    public function getPettyCashReport($data)
    {
        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this->createQueryBuilder('th')
            ->leftJoin('th.transaction','t')
            ->leftJoin('t.createdBy','u')
            ->leftJoin('t.transactTo','ut')
            ->select('SUM(th.transactionHistoryAmount) As transactionHistoryAmount')
            ->addSelect('t.transactionAmount')
            ->addSelect('th.transactionType')
            ->addSelect('ut.username as transactTo')
            ->addSelect('u.username as  transactFrom')
            ->addSelect('t.id as transactionId')
            ->addSelect('t.notes as description')
            ->addSelect('th.notes as historyDescription')
            ->addSelect('th.createdDate as createdDate')
            ->where('t.status = :status')
            ->setParameter('status', 'acknowledged');
            if(!empty($data)){

                $query->andWhere('th.createdDate >= :start')
                      ->andWhere('th.createdDate <= :end')
                      ->setParameter('start', $start_date.' 00:00:00')
                      ->setParameter('end', $end_date.' 23:59:59');
            }
                $query->groupBy('t.id');
        $pettyCashReports = $query->getQuery()->getResult();

        return $pettyCashReports;
    }
    public function getPettyCashReportExcel($data)
    {
        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this->createQueryBuilder('th')
            ->leftJoin('th.transaction','t')
            ->leftJoin('t.createdBy','u')
            ->leftJoin('t.transactTo','ut')
            ->select('SUM(th.transactionHistoryAmount) As transactionHistoryAmount')
            ->addSelect('t.transactionAmount')
            ->addSelect('th.transactionType')
            ->addSelect('ut.username as transactTo')
            ->addSelect('u.username as  transactFrom')
            ->addSelect('t.id as transactionId')
            ->addSelect('t.notes as description')
            ->addSelect('th.notes as historyDescription')
            ->addSelect('th.createdDate as createdDate')
            ->where('t.status = :status')
            ->setParameter('status', 'acknowledged');
            if(!empty($data['start_date'])){

                $query->andWhere('th.createdDate >= :start')
                      ->andWhere('th.createdDate <= :end')
                      ->setParameter('start', $start_date.' 00:00:00')
                      ->setParameter('end', $end_date.' 23:59:59');
            }
                $query->groupBy('t.id');
        $pettyCashReports = $query->getQuery()->getResult();

        return $pettyCashReports;
    }
    public function getAllTransactionHistory($transactionIds)
    {

        $query = $this->createQueryBuilder('th')
            ->leftJoin('th.transaction','t')
            ->leftJoin('t.createdBy','u')
            ->leftJoin('t.transactTo','ut')
            ->select('th.transactionHistoryAmount as adjustmentAmount')
            ->addSelect('th.notes as historyNotes')
            ->addSelect('th.transactionType as transactionHistoryType')
            ->addSelect('th.createdDate as adjustmentDate')
            ->addSelect('ut.username as historyTransactTo')
            ->addSelect('u.username as  historyTransactFrom')
            ->addSelect('t.id as transactionId')
            ->where('th.transaction IN (:transactionId)')
            ->setParameter('transactionId', $transactionIds);
        $pettyCashReports = $query->getQuery()->getResult();
        $data = array();
        foreach ($pettyCashReports as $id => $pettyCashReport) {

            $data[$pettyCashReport['transactionId']][$id]  = $pettyCashReport;
        }

        return $data;
    }
    public function totalCashTransaction($data)
    {
        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this->createQueryBuilder('th')
            ->leftJoin('th.transaction','t')
            ->leftJoin('t.createdBy','u')
            ->leftJoin('t.transactTo','ut')
            ->select('SUM(th.transactionHistoryAmount) AS cashAmount')
            ->where('th.transactionType = :type')
            ->setParameter('type', 'cash');
            if(!empty($data)){
            $query->andWhere('th.createdDate >= :start')
            ->andWhere('th.createdDate <= :end')
            ->setParameter('start', $start_date.' 00:00:00')
            ->setParameter('end', $end_date.' 23:59:59');
            }
        $totalMonthlyCashAmount = $query->getQuery()->getSingleScalarResult();
        
        return $totalMonthlyCashAmount;
    }
    public function totalInvoiceTransaction($data)
    {
        $month = $data['start_date'];
        $start_date = date($month);
        $end_date = date('Y-m-t', strtotime($start_date));

        $query = $this->createQueryBuilder('th')
            ->leftJoin('th.transaction','t')
            ->leftJoin('t.createdBy','u')
            ->leftJoin('t.transactTo','ut')
            ->select('SUM(th.transactionHistoryAmount) AS invoiceAmount')
            ->where('th.transactionType = :type')
            ->setParameter('type', 'invoice');
            if(!empty($data)) {
                $query->andWhere('th.createdDate >= :start')
                    ->andWhere('th.createdDate <= :end')
                    ->setParameter('start', $start_date . ' 00:00:00')
                    ->setParameter('end', $end_date . ' 23:59:59');
            }
        $totalMonthlyCashAmount = $query->getQuery()->getSingleScalarResult();

        return $totalMonthlyCashAmount;
    }
}
